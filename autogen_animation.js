(() => {
  var t = {
      9936: (t, r, e) => {
        "use strict";
        e.d(r, { H: () => o }),
          e(6992),
          e(9575),
          e(1539),
          e(4197),
          e(2990),
          e(8927),
          e(3105),
          e(5035),
          e(4345),
          e(7174),
          e(2846),
          e(4731),
          e(7209),
          e(6319),
          e(8867),
          e(7789),
          e(3739),
          e(9368),
          e(4483),
          e(2056),
          e(3462),
          e(678),
          e(7462),
          e(3824),
          e(5021),
          e(2974),
          e(5016);
        var n = e(1302);
        function o(t, r) {
          var e,
            o,
            i,
            a,
            u,
            c,
            s,
            f,
            l,
            p,
            v,
            y = 0,
            d = !1,
            h = !1,
            g = 0.0032,
            m = 2e3,
            b = 20 * Math.random();
          return (function () {
            if (
              (e = t.getContext("webgl", {
                preserveDrawingBuffer: !0,
                preMultipliedAlpha: !0,
              }))
            ) {
              A(),
                window.addEventListener("resize", x),
                e.viewport(0, 0, t.width, t.height),
                (function () {
                  var t = e.createShader(e.VERTEX_SHADER);
                  if (
                    (e.shaderSource(
                      t,
                      "\n      attribute vec3 vertexPosition;\n      uniform mat4 modelViewMatrix;\n      uniform mat4 perspectiveMatrix;\n      void main(void) {\n        gl_Position = perspectiveMatrix * modelViewMatrix * vec4(  vertexPosition.x, vertexPosition.y, 1.0, 1.0);\n      }"
                    ),
                    e.compileShader(t),
                    e.getShaderParameter(t, e.COMPILE_STATUS))
                  ) {
                    var r = e.createShader(e.FRAGMENT_SHADER);
                    if (
                      (e.shaderSource(
                        r,
                        "\n    #ifdef GL_ES\n      precision highp float;\n    #endif\n    uniform vec4 uColor;\n    void main(void) {\n      gl_FragColor = uColor;\n    }"
                      ),
                      e.compileShader(r),
                      e.getShaderParameter(r, e.COMPILE_STATUS))
                    )
                      return (
                        (e.program = e.createProgram()),
                        e.attachShader(e.program, t),
                        e.attachShader(e.program, r),
                        e.linkProgram(e.program),
                        e.getProgramParameter(e.program, e.LINK_STATUS)
                          ? void e.useProgram(e.program)
                          : (e.deleteProgram(e.program),
                            e.deleteProgram(t),
                            void e.deleteProgram(r))
                      );
                    e.deleteShader(r);
                  } else e.deleteShader(t);
                })();
              var r = e.getAttribLocation(e.program, "vertexPosition");
              e.enableVertexAttribArray(r),
                (u = e.createBuffer()),
                (function () {
                  (s = []), (f = []);
                  for (var t = 0; t < m; t++) {
                    var r = Math.random() * o - i,
                      e = Math.random() - 0.5,
                      u = Math.floor(45 * (r * a + 1)),
                      c = Math.floor(45 * (e + 1)),
                      l = 0.85 * (n.n[u + 90 * c] + b);
                    f.push(l);
                    var p = r + Math.sin(l) * g,
                      v = e + Math.cos(l) * g;
                    s.push(r, e, p, v);
                  }
                })(),
                (s = new Float32Array(s)),
                (c = new Float32Array([
                  -i,
                  0.5,
                  i,
                  0.5,
                  i,
                  -0.5,
                  -i,
                  -0.5,
                  -i,
                  0.5,
                  i,
                  -0.5,
                ])),
                w(),
                e.bindBuffer(e.ARRAY_BUFFER, u);
              var l = e.getAttribLocation(e.program, "vertexPosition");
              return (
                e.vertexAttribPointer(l, 2, e.FLOAT, !1, 0, 0),
                (v = e.getUniformLocation(e.program, "uColor")),
                e.enable(e.BLEND),
                T(),
                {
                  isPaused: function () {
                    return h;
                  },
                  isPlaying: function () {
                    return !1 === h;
                  },
                  play: function () {
                    h = !1;
                  },
                  pause: function () {
                    h = !0;
                  },
                }
              );
            }
          })();
          function x() {
            A(), w();
          }
          function w() {
            var t = 1 * Math.tan((26 * Math.PI) / 360),
              r = -t,
              n = t * o,
              i = -n,
              a = [
                2 / (n - i),
                0,
                (n + i) / (n - i),
                0,
                0,
                2 / (t - r),
                (t + r) / (t - r),
                0,
                0,
                0,
                1.0769230769230769,
                2.076923076923077,
                0,
                0,
                1,
                0,
              ],
              u = e.getUniformLocation(e.program, "modelViewMatrix"),
              c = e.getUniformLocation(e.program, "perspectiveMatrix");
            e.uniformMatrix4fv(u, !1, new Float32Array(a)),
              e.uniformMatrix4fv(
                c,
                !1,
                new Float32Array([
                  1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
                ])
              );
          }
          function A() {
            (l = window.innerWidth),
              (p = window.innerHeight),
              (t.width = l),
              (t.height = p),
              (o = t.width / t.height),
              (i = 0.5 * o),
              (a = t.height / t.width),
              e.viewport(0, 0, t.width, t.height),
              (c = new Float32Array([
                -i,
                0.5,
                i,
                0.5,
                i,
                -0.5,
                -i,
                -0.5,
                -i,
                0.5,
                i,
                -0.5,
              ]));
          }
          function T(t) {
            !(function (t) {
              if (!0 !== h) {
                var r,
                  e = 3e-4 * ++y + b;
                if (!0 !== d)
                  for (var u = 0; u < m; u += 1) {
                    var c = 4 * u;
                    (s[c] = s[c + 2]), (s[c + 1] = s[c + 3]);
                    var l = s[c + 2],
                      p = s[c + 3];
                    (p > 0.5 || p < -0.5 || l > i || l < -i) &&
                      ((l = Math.random() * o - i),
                      (p = Math.random() - 0.5),
                      (s[c] = l),
                      (s[c + 1] = p),
                      (r = !0));
                    var v = Math.floor(45 * (l * a + 1)),
                      x = Math.floor(45 * (p + 1)),
                      w = 0.85 * (n.n[v + 90 * x] + e),
                      A = r ? w : 0.5 * (w + f[u]);
                    (f[u] = A),
                      (l += Math.sin(A) * g),
                      (p += Math.cos(A) * g),
                      (s[c + 2] = l),
                      (s[c + 3] = p);
                  }
              }
            })(),
              requestAnimationFrame(T),
              !0 !== h &&
                (!0 !== d
                  ? ((d = !0),
                    e.blendFunc(e.SRC_ALPHA, e.DST_ALPHA),
                    e.uniform4f(v, 1, 1, 1, 0.02),
                    e.bufferData(e.ARRAY_BUFFER, c, e.STATIC_DRAW),
                    e.drawArrays(e.TRIANGLES, 0, 0.5 * c.length),
                    e.blendFunc(e.ONE, e.ZERO),
                    e.uniform4f(v, 0.7 * r[0], 0.7 * r[1], 0.7 * r[2], 1),
                    e.bufferData(e.ARRAY_BUFFER, s, e.DYNAMIC_DRAW),
                    e.drawArrays(e.LINES, 0, m))
                  : (d = !1));
          }
        }
      },
      1302: (t, r, e) => {
        "use strict";
        e.d(r, { n: () => n });
        var n = [
          1.56, 11.3, 10.84, 10.31, 9.82, 9.35, 8.88, 8.43, 8.01, 7.64, 7.36,
          7.13, 6.9, 6.61, 6.29, 6.01, 5.76, 5.54, 5.32, 5.06, 4.78, 4.55, 4.42,
          4.41, 4.46, 4.51, 4.51, 4.4, 4.28, 4.18, 4.11, 4.06, 4.04, 4.05, 4.1,
          4.13, 4.15, 4.16, 4.18, 4.19, 4.17, 4.1, 3.99, 3.88, 3.85, 3.95, 4.08,
          4.18, 4.29, 4.46, 4.68, 4.88, 5.02, 5.11, 5.15, 5.15, 5.14, 5.13,
          5.13, 5.19, 5.38, 5.66, 5.92, 6.06, 6.04, 5.9, 5.74, 5.66, 5.73, 5.99,
          6.36, 6.68, 6.83, 6.81, 6.74, 6.65, 6.6, 6.59, 6.49, 6.3, 6.09, 5.95,
          5.89, 5.85, 5.81, 5.75, 5.65, 5.65, 5.78, 5.96, 11.57, 11.31, 10.86,
          10.33, 9.84, 9.37, 8.9, 8.44, 8.01, 7.65, 7.36, 7.13, 6.9, 6.61, 6.29,
          6.01, 5.77, 5.54, 5.32, 5.06, 4.79, 4.56, 4.44, 4.42, 4.46, 4.51, 4.5,
          4.39, 4.26, 4.17, 4.09, 4.04, 4.02, 4.04, 4.08, 4.12, 4.13, 4.14,
          4.16, 4.17, 4.15, 4.08, 3.97, 3.87, 3.85, 3.95, 4.08, 4.18, 4.29,
          4.46, 4.68, 4.87, 5.02, 5.11, 5.15, 5.15, 5.13, 5.12, 5.13, 5.19,
          5.38, 5.66, 5.92, 6.05, 6.04, 5.91, 5.75, 5.67, 5.75, 6, 6.35, 6.67,
          6.81, 6.79, 6.72, 6.64, 6.58, 6.58, 6.48, 6.29, 6.08, 5.94, 5.88,
          5.85, 5.81, 5.75, 5.66, 5.66, 5.78, 5.97, 11.6, 11.35, 10.91, 10.39,
          9.9, 9.43, 8.95, 8.47, 8.04, 7.67, 7.38, 7.14, 6.9, 6.61, 6.28, 6.01,
          5.77, 5.56, 5.34, 5.09, 4.82, 4.6, 4.48, 4.46, 4.48, 4.5, 4.47, 4.35,
          4.23, 4.13, 4.05, 4, 3.97, 3.99, 4.03, 4.06, 4.07, 4.09, 4.11, 4.11,
          4.09, 4.02, 3.93, 3.85, 3.85, 3.96, 4.09, 4.19, 4.3, 4.46, 4.67, 4.86,
          5.01, 5.1, 5.14, 5.14, 5.13, 5.12, 5.13, 5.18, 5.37, 5.65, 5.9, 6.04,
          6.03, 5.92, 5.78, 5.72, 5.79, 6.02, 6.34, 6.62, 6.75, 6.73, 6.66,
          6.59, 6.54, 6.54, 6.44, 6.26, 6.05, 5.92, 5.86, 5.84, 5.82, 5.78,
          5.69, 5.69, 5.81, 5.99, 11.65, 11.41, 10.98, 10.48, 10, 9.53, 9.02,
          8.52, 8.08, 7.7, 7.41, 7.16, 6.91, 6.6, 6.27, 6.01, 5.79, 5.58, 5.37,
          5.12, 4.87, 4.66, 4.54, 4.51, 4.5, 4.49, 4.43, 4.3, 4.17, 4.06, 3.98,
          3.93, 3.9, 3.92, 3.95, 3.98, 3.99, 4, 4.02, 4.02, 3.99, 3.94, 3.87,
          3.83, 3.85, 3.97, 4.1, 4.2, 4.3, 4.45, 4.66, 4.85, 4.99, 5.08, 5.12,
          5.12, 5.11, 5.11, 5.12, 5.17, 5.35, 5.63, 5.88, 6.01, 6.01, 5.93,
          5.82, 5.78, 5.86, 6.05, 6.31, 6.54, 6.64, 6.63, 6.58, 6.52, 6.48,
          6.47, 6.38, 6.2, 6.01, 5.88, 5.83, 5.82, 5.83, 5.81, 5.73, 5.74, 5.84,
          6.01, 11.71, 11.48, 11.08, 10.59, 10.12, 9.65, 9.12, 8.6, 8.13, 7.75,
          7.45, 7.19, 6.92, 6.6, 6.27, 6.01, 5.81, 5.61, 5.4, 5.17, 4.93, 4.74,
          4.63, 4.58, 4.53, 4.47, 4.37, 4.24, 4.1, 3.98, 3.89, 3.84, 3.82, 3.83,
          3.86, 3.89, 3.9, 3.9, 3.91, 3.9, 3.88, 3.83, 3.8, 3.8, 3.86, 3.98,
          4.11, 4.21, 4.31, 4.45, 4.64, 4.82, 4.96, 5.06, 5.09, 5.1, 5.09, 5.09,
          5.1, 5.15, 5.33, 5.6, 5.84, 5.98, 5.99, 5.94, 5.87, 5.86, 5.93, 6.08,
          6.27, 6.44, 6.51, 6.5, 6.46, 6.42, 6.39, 6.39, 6.3, 6.13, 5.95, 5.82,
          5.78, 5.8, 5.84, 5.84, 5.78, 5.79, 5.89, 6.04, 11.79, 11.57, 11.19,
          10.72, 10.27, 9.79, 9.24, 8.69, 8.2, 7.82, 7.51, 7.23, 6.94, 6.61,
          6.27, 6.03, 5.83, 5.65, 5.44, 5.22, 5, 4.83, 4.72, 4.66, 4.57, 4.45,
          4.32, 4.17, 4.02, 3.9, 3.8, 3.74, 3.73, 3.74, 3.76, 3.79, 3.79, 3.79,
          3.79, 3.79, 3.76, 3.73, 3.73, 3.78, 3.87, 4.01, 4.14, 4.23, 4.32,
          4.45, 4.63, 4.79, 4.93, 5.02, 5.06, 5.06, 5.06, 5.06, 5.08, 5.12,
          5.29, 5.55, 5.79, 5.93, 5.95, 5.94, 5.92, 5.93, 6, 6.11, 6.22, 6.32,
          6.36, 6.35, 6.33, 6.3, 6.28, 6.28, 6.2, 6.04, 5.87, 5.75, 5.72, 5.76,
          5.83, 5.87, 5.83, 5.84, 5.93, 6.08, 11.87, 11.66, 11.3, 10.86, 10.42,
          9.94, 9.37, 8.79, 8.29, 7.91, 7.59, 7.29, 6.98, 6.63, 6.29, 6.05,
          5.87, 5.69, 5.49, 5.28, 5.08, 4.92, 4.81, 4.73, 4.6, 4.44, 4.26, 4.1,
          3.95, 3.81, 3.71, 3.65, 3.64, 3.65, 3.68, 3.69, 3.7, 3.7, 3.69, 3.68,
          3.65, 3.64, 3.67, 3.77, 3.9, 4.05, 4.17, 4.25, 4.33, 4.45, 4.6, 4.76,
          4.89, 4.98, 5.01, 5.02, 5.02, 5.03, 5.04, 5.08, 5.24, 5.5, 5.73, 5.86,
          5.9, 5.92, 5.94, 5.98, 6.05, 6.11, 6.16, 6.18, 6.19, 6.19, 6.18, 6.17,
          6.16, 6.16, 6.09, 5.94, 5.78, 5.67, 5.64, 5.71, 5.82, 5.89, 5.87,
          5.89, 5.98, 6.11, 11.95, 11.76, 11.42, 11, 10.57, 10.09, 9.51, 8.91,
          8.39, 8.01, 7.68, 7.36, 7.04, 6.67, 6.32, 6.08, 5.91, 5.75, 5.54,
          5.34, 5.15, 5, 4.9, 4.8, 4.63, 4.42, 4.22, 4.04, 3.88, 3.74, 3.63,
          3.58, 3.57, 3.59, 3.61, 3.62, 3.62, 3.62, 3.61, 3.6, 3.58, 3.57, 3.64,
          3.77, 3.93, 4.09, 4.21, 4.29, 4.35, 4.45, 4.58, 4.72, 4.84, 4.92,
          4.96, 4.96, 4.97, 4.97, 4.98, 5.02, 5.18, 5.42, 5.66, 5.79, 5.84,
          5.89, 5.94, 6, 6.07, 6.1, 6.08, 6.05, 6.03, 6.03, 6.03, 6.03, 6.04,
          6.04, 5.96, 5.82, 5.67, 5.56, 5.55, 5.64, 5.78, 5.89, 5.9, 5.92, 6.01,
          6.14, 12.03, 11.85, 11.52, 11.12, 10.71, 10.23, 9.64, 9.03, 8.5, 8.12,
          7.79, 7.46, 7.12, 6.73, 6.37, 6.13, 5.96, 5.8, 5.6, 5.4, 5.22, 5.08,
          4.97, 4.86, 4.66, 4.42, 4.18, 4, 3.84, 3.69, 3.58, 3.53, 3.53, 3.55,
          3.57, 3.58, 3.58, 3.58, 3.57, 3.56, 3.54, 3.55, 3.64, 3.81, 3.99,
          4.15, 4.26, 4.33, 4.38, 4.45, 4.56, 4.68, 4.79, 4.86, 4.89, 4.89, 4.9,
          4.9, 4.91, 4.94, 5.1, 5.34, 5.57, 5.7, 5.76, 5.83, 5.9, 5.98, 6.05,
          6.04, 5.98, 5.91, 5.87, 5.88, 5.88, 5.89, 5.9, 5.9, 5.83, 5.69, 5.55,
          5.45, 5.44, 5.56, 5.73, 5.86, 5.9, 5.94, 6.03, 6.16, 12.11, 11.93,
          11.61, 11.22, 10.82, 10.36, 9.77, 9.16, 8.63, 8.26, 7.92, 7.58, 7.22,
          6.82, 6.44, 6.19, 6.02, 5.86, 5.66, 5.46, 5.28, 5.14, 5.02, 4.9, 4.69,
          4.42, 4.17, 3.98, 3.81, 3.66, 3.55, 3.51, 3.52, 3.54, 3.56, 3.58,
          3.58, 3.58, 3.57, 3.57, 3.56, 3.58, 3.69, 3.86, 4.06, 4.22, 4.33,
          4.38, 4.41, 4.45, 4.54, 4.64, 4.73, 4.79, 4.81, 4.81, 4.82, 4.82,
          4.82, 4.85, 5, 5.24, 5.46, 5.59, 5.66, 5.74, 5.83, 5.91, 5.97, 5.95,
          5.87, 5.78, 5.74, 5.74, 5.75, 5.76, 5.77, 5.77, 5.69, 5.56, 5.42,
          5.32, 5.32, 5.45, 5.65, 5.81, 5.87, 5.93, 6.04, 6.18, 12.17, 12,
          11.69, 11.31, 10.92, 10.47, 9.89, 9.29, 8.77, 8.4, 8.06, 7.72, 7.35,
          6.93, 6.54, 6.28, 6.1, 5.93, 5.73, 5.53, 5.35, 5.19, 5.07, 4.94, 4.71,
          4.43, 4.17, 3.97, 3.8, 3.65, 3.55, 3.51, 3.53, 3.56, 3.6, 3.62, 3.63,
          3.63, 3.62, 3.62, 3.62, 3.64, 3.76, 3.95, 4.14, 4.31, 4.4, 4.43, 4.44,
          4.46, 4.52, 4.59, 4.66, 4.72, 4.74, 4.73, 4.73, 4.73, 4.73, 4.75,
          4.89, 5.12, 5.34, 5.47, 5.54, 5.63, 5.71, 5.8, 5.86, 5.84, 5.75, 5.66,
          5.61, 5.61, 5.62, 5.64, 5.65, 5.64, 5.56, 5.43, 5.29, 5.2, 5.2, 5.34,
          5.55, 5.73, 5.82, 5.9, 6.03, 6.18, 12.21, 12.05, 11.76, 11.39, 11.02,
          10.58, 10.02, 9.43, 8.93, 8.56, 8.22, 7.88, 7.51, 7.08, 6.68, 6.39,
          6.19, 6.01, 5.81, 5.61, 5.42, 5.26, 5.13, 4.99, 4.74, 4.45, 4.17,
          3.97, 3.8, 3.65, 3.56, 3.53, 3.56, 3.61, 3.67, 3.71, 3.72, 3.71, 3.7,
          3.68, 3.68, 3.71, 3.85, 4.04, 4.24, 4.41, 4.49, 4.5, 4.48, 4.47, 4.51,
          4.56, 4.62, 4.66, 4.68, 4.67, 4.66, 4.64, 4.63, 4.65, 4.77, 4.98,
          5.18, 5.31, 5.38, 5.48, 5.59, 5.68, 5.74, 5.71, 5.62, 5.51, 5.46,
          5.47, 5.49, 5.51, 5.52, 5.52, 5.45, 5.32, 5.19, 5.1, 5.11, 5.25, 5.46,
          5.65, 5.76, 5.87, 6.02, 6.19, 12.24, 12.08, 11.81, 11.47, 11.11,
          10.69, 10.15, 9.58, 9.08, 8.72, 8.39, 8.06, 7.69, 7.26, 6.84, 6.53,
          6.31, 6.11, 5.9, 5.7, 5.52, 5.35, 5.22, 5.06, 4.79, 4.47, 4.18, 3.96,
          3.79, 3.66, 3.57, 3.55, 3.59, 3.68, 3.77, 3.84, 3.86, 3.84, 3.8, 3.76,
          3.75, 3.79, 3.94, 4.14, 4.36, 4.52, 4.59, 4.57, 4.52, 4.48, 4.49,
          4.53, 4.58, 4.63, 4.65, 4.63, 4.6, 4.57, 4.55, 4.55, 4.65, 4.82, 4.99,
          5.1, 5.19, 5.32, 5.45, 5.57, 5.63, 5.59, 5.48, 5.36, 5.3, 5.31, 5.34,
          5.39, 5.41, 5.41, 5.34, 5.23, 5.12, 5.04, 5.05, 5.18, 5.38, 5.56,
          5.69, 5.83, 6.01, 6.2, 12.25, 12.11, 11.86, 11.54, 11.2, 10.79, 10.27,
          9.72, 9.24, 8.89, 8.57, 8.26, 7.9, 7.46, 7.02, 6.69, 6.43, 6.22, 6.01,
          5.81, 5.62, 5.46, 5.31, 5.14, 4.85, 4.5, 4.19, 3.96, 3.79, 3.67, 3.6,
          3.58, 3.64, 3.76, 3.89, 4, 4.03, 3.99, 3.92, 3.85, 3.82, 3.87, 4.03,
          4.25, 4.48, 4.64, 4.7, 4.65, 4.56, 4.49, 4.48, 4.51, 4.56, 4.61, 4.63,
          4.61, 4.56, 4.51, 4.47, 4.46, 4.53, 4.65, 4.78, 4.88, 4.99, 5.14,
          5.32, 5.45, 5.52, 5.47, 5.33, 5.2, 5.13, 5.15, 5.2, 5.27, 5.31, 5.31,
          5.25, 5.16, 5.07, 5, 5.01, 5.12, 5.3, 5.48, 5.62, 5.79, 6, 6.22,
          12.25, 12.13, 11.9, 11.61, 11.29, 10.89, 10.39, 9.86, 9.4, 9.05, 8.75,
          8.45, 8.11, 7.67, 7.22, 6.86, 6.57, 6.34, 6.13, 5.93, 5.74, 5.57,
          5.42, 5.24, 4.92, 4.55, 4.2, 3.97, 3.8, 3.69, 3.63, 3.62, 3.69, 3.84,
          4.03, 4.17, 4.21, 4.15, 4.05, 3.94, 3.89, 3.95, 4.12, 4.36, 4.59,
          4.76, 4.8, 4.73, 4.6, 4.5, 4.46, 4.49, 4.55, 4.61, 4.62, 4.59, 4.53,
          4.45, 4.4, 4.39, 4.42, 4.49, 4.57, 4.66, 4.77, 4.97, 5.18, 5.35, 5.42,
          5.35, 5.2, 5.05, 4.97, 4.99, 5.07, 5.16, 5.23, 5.23, 5.18, 5.11, 5.04,
          4.99, 5, 5.09, 5.24, 5.41, 5.56, 5.75, 5.99, 6.24, 12.25, 12.14,
          11.95, 11.68, 11.37, 10.98, 10.5, 10, 9.55, 9.21, 8.92, 8.64, 8.31,
          7.88, 7.41, 7.03, 6.72, 6.47, 6.25, 6.06, 5.87, 5.7, 5.54, 5.34, 5,
          4.6, 4.23, 3.98, 3.82, 3.71, 3.66, 3.67, 3.74, 3.93, 4.17, 4.34, 4.39,
          4.32, 4.17, 4.02, 3.96, 4.02, 4.2, 4.46, 4.7, 4.87, 4.89, 4.79, 4.63,
          4.5, 4.45, 4.47, 4.54, 4.6, 4.62, 4.58, 4.5, 4.4, 4.34, 4.31, 4.31,
          4.33, 4.38, 4.44, 4.58, 4.81, 5.06, 5.26, 5.33, 5.25, 5.08, 4.91,
          4.83, 4.86, 4.95, 5.07, 5.16, 5.16, 5.13, 5.08, 5.03, 5, 5, 5.07, 5.2,
          5.35, 5.51, 5.72, 6, 6.27, 12.26, 12.17, 11.99, 11.74, 11.44, 11.07,
          10.61, 10.12, 9.69, 9.35, 9.08, 8.82, 8.5, 8.08, 7.6, 7.2, 6.86, 6.6,
          6.38, 6.18, 6, 5.82, 5.66, 5.45, 5.09, 4.66, 4.27, 4.02, 3.85, 3.75,
          3.71, 3.72, 3.8, 4.02, 4.29, 4.5, 4.55, 4.46, 4.28, 4.1, 4.02, 4.08,
          4.28, 4.54, 4.8, 4.96, 4.97, 4.85, 4.66, 4.5, 4.44, 4.46, 4.53, 4.6,
          4.62, 4.57, 4.47, 4.36, 4.28, 4.25, 4.22, 4.2, 4.21, 4.26, 4.41, 4.67,
          4.96, 5.18, 5.26, 5.17, 4.98, 4.8, 4.71, 4.74, 4.86, 5, 5.1, 5.12,
          5.1, 5.07, 5.04, 5.02, 5.02, 5.07, 5.17, 5.31, 5.48, 5.71, 6.01, 6.3,
          12.28, 12.2, 12.03, 11.8, 11.52, 11.15, 10.7, 10.23, 9.81, 9.48, 9.22,
          8.98, 8.67, 8.25, 7.77, 7.35, 7, 6.73, 6.51, 6.31, 6.13, 5.95, 5.79,
          5.57, 5.19, 4.74, 4.33, 4.06, 3.89, 3.79, 3.76, 3.77, 3.85, 4.09,
          4.39, 4.62, 4.69, 4.58, 4.38, 4.17, 4.07, 4.13, 4.34, 4.61, 4.87,
          5.03, 5.03, 4.89, 4.68, 4.5, 4.42, 4.44, 4.52, 4.59, 4.61, 4.56, 4.45,
          4.32, 4.23, 4.2, 4.15, 4.1, 4.08, 4.12, 4.28, 4.57, 4.89, 5.13, 5.21,
          5.12, 4.92, 4.72, 4.62, 4.66, 4.79, 4.96, 5.07, 5.09, 5.08, 5.06,
          5.05, 5.04, 5.04, 5.08, 5.17, 5.3, 5.47, 5.72, 6.03, 6.34, 12.32,
          12.24, 12.08, 11.86, 11.58, 11.23, 10.79, 10.33, 9.91, 9.59, 9.34,
          9.1, 8.81, 8.39, 7.91, 7.49, 7.13, 6.85, 6.64, 6.44, 6.26, 6.08, 5.91,
          5.68, 5.29, 4.82, 4.41, 4.13, 3.95, 3.85, 3.81, 3.82, 3.91, 4.16,
          4.47, 4.71, 4.77, 4.66, 4.44, 4.22, 4.11, 4.18, 4.38, 4.65, 4.91,
          5.07, 5.06, 4.9, 4.68, 4.49, 4.41, 4.42, 4.5, 4.58, 4.59, 4.53, 4.41,
          4.28, 4.19, 4.15, 4.1, 4.03, 4, 4.04, 4.2, 4.51, 4.84, 5.1, 5.18,
          5.08, 4.88, 4.67, 4.58, 4.62, 4.76, 4.93, 5.06, 5.08, 5.07, 5.07,
          5.07, 5.07, 5.07, 5.11, 5.19, 5.31, 5.49, 5.75, 6.07, 6.39, 12.36,
          12.29, 12.14, 11.92, 11.65, 11.3, 10.86, 10.41, 10, 9.69, 9.44, 9.21,
          8.92, 8.51, 8.03, 7.61, 7.26, 6.98, 6.76, 6.57, 6.38, 6.2, 6.02, 5.79,
          5.39, 4.92, 4.5, 4.21, 4.03, 3.92, 3.88, 3.88, 3.96, 4.21, 4.51, 4.75,
          4.81, 4.7, 4.48, 4.26, 4.15, 4.21, 4.41, 4.68, 4.93, 5.08, 5.07, 4.91,
          4.68, 4.49, 4.4, 4.4, 4.48, 4.55, 4.56, 4.5, 4.38, 4.25, 4.15, 4.12,
          4.06, 4, 3.96, 4.01, 4.18, 4.48, 4.83, 5.08, 5.17, 5.08, 4.88, 4.68,
          4.58, 4.62, 4.76, 4.94, 5.06, 5.09, 5.09, 5.09, 5.09, 5.1, 5.11, 5.15,
          5.23, 5.36, 5.54, 5.8, 6.12, 6.44, 12.38, 12.32, 12.18, 11.98, 11.71,
          11.37, 10.95, 10.5, 10.11, 9.8, 9.55, 9.31, 9.01, 8.6, 8.13, 7.72,
          7.38, 7.11, 6.9, 6.7, 6.5, 6.31, 6.13, 5.89, 5.5, 5.03, 4.61, 4.32,
          4.14, 4.03, 3.99, 3.99, 4.06, 4.27, 4.54, 4.75, 4.81, 4.71, 4.51,
          4.31, 4.2, 4.26, 4.45, 4.71, 4.95, 5.09, 5.08, 4.92, 4.7, 4.5, 4.4,
          4.4, 4.46, 4.52, 4.53, 4.47, 4.35, 4.22, 4.14, 4.11, 4.05, 3.98, 3.94,
          3.99, 4.16, 4.47, 4.81, 5.07, 5.16, 5.09, 4.92, 4.74, 4.65, 4.69,
          4.82, 4.98, 5.1, 5.12, 5.12, 5.12, 5.12, 5.13, 5.14, 5.2, 5.29, 5.43,
          5.61, 5.87, 6.18, 6.48, 12.37, 12.32, 12.2, 12.02, 11.77, 11.44,
          11.04, 10.62, 10.24, 9.93, 9.67, 9.42, 9.1, 8.69, 8.22, 7.83, 7.5,
          7.24, 7.03, 6.83, 6.61, 6.41, 6.22, 5.99, 5.61, 5.16, 4.75, 4.45,
          4.27, 4.17, 4.14, 4.14, 4.19, 4.36, 4.57, 4.74, 4.78, 4.7, 4.53, 4.35,
          4.27, 4.32, 4.5, 4.74, 4.97, 5.1, 5.09, 4.94, 4.73, 4.54, 4.43, 4.41,
          4.46, 4.5, 4.5, 4.44, 4.33, 4.22, 4.13, 4.11, 4.05, 3.97, 3.93, 3.98,
          4.15, 4.46, 4.79, 5.06, 5.16, 5.12, 4.99, 4.85, 4.78, 4.82, 4.93,
          5.06, 5.16, 5.17, 5.16, 5.16, 5.16, 5.17, 5.19, 5.26, 5.37, 5.53,
          5.72, 5.96, 6.24, 6.5, 12.34, 12.3, 12.21, 12.06, 11.83, 11.51, 11.13,
          10.74, 10.38, 10.08, 9.81, 9.52, 9.18, 8.76, 8.31, 7.93, 7.63, 7.38,
          7.18, 6.96, 6.72, 6.5, 6.3, 6.07, 5.72, 5.29, 4.9, 4.6, 4.42, 4.34,
          4.32, 4.33, 4.35, 4.46, 4.59, 4.7, 4.73, 4.66, 4.54, 4.41, 4.35, 4.4,
          4.56, 4.78, 4.99, 5.11, 5.11, 4.97, 4.78, 4.59, 4.47, 4.44, 4.46,
          4.48, 4.48, 4.42, 4.32, 4.22, 4.15, 4.12, 4.06, 3.97, 3.93, 3.97,
          4.14, 4.44, 4.78, 5.04, 5.16, 5.17, 5.1, 5.01, 4.97, 4.99, 5.07, 5.17,
          5.24, 5.24, 5.22, 5.21, 5.2, 5.21, 5.24, 5.33, 5.46, 5.64, 5.84, 6.06,
          6.3, 6.53, 12.28, 12.26, 12.21, 12.09, 11.88, 11.58, 11.23, 10.86,
          10.53, 10.24, 9.94, 9.63, 9.26, 8.83, 8.39, 8.04, 7.75, 7.52, 7.32,
          7.09, 6.83, 6.59, 6.38, 6.16, 5.83, 5.44, 5.06, 4.77, 4.6, 4.53, 4.53,
          4.53, 4.53, 4.57, 4.61, 4.65, 4.66, 4.62, 4.54, 4.47, 4.44, 4.48,
          4.63, 4.83, 5.01, 5.13, 5.13, 5.01, 4.83, 4.66, 4.53, 4.47, 4.46,
          4.47, 4.45, 4.39, 4.31, 4.22, 4.17, 4.15, 4.08, 3.98, 3.93, 3.97,
          4.14, 4.44, 4.77, 5.03, 5.17, 5.23, 5.23, 5.2, 5.19, 5.2, 5.25, 5.3,
          5.33, 5.32, 5.29, 5.26, 5.24, 5.25, 5.29, 5.4, 5.56, 5.76, 5.97, 6.18,
          6.37, 6.54, 12.21, 12.22, 12.2, 12.11, 11.92, 11.64, 11.32, 10.99,
          10.67, 10.39, 10.08, 9.73, 9.34, 8.9, 8.47, 8.14, 7.88, 7.67, 7.47,
          7.23, 6.95, 6.68, 6.46, 6.26, 5.96, 5.59, 5.24, 4.95, 4.78, 4.73,
          4.75, 4.75, 4.73, 4.69, 4.64, 4.61, 4.6, 4.58, 4.56, 4.54, 4.54, 4.58,
          4.71, 4.88, 5.05, 5.15, 5.16, 5.06, 4.9, 4.73, 4.58, 4.5, 4.47, 4.45,
          4.42, 4.37, 4.3, 4.23, 4.19, 4.18, 4.1, 4, 3.93, 3.97, 4.14, 4.43,
          4.76, 5.03, 5.19, 5.3, 5.37, 5.41, 5.43, 5.43, 5.44, 5.45, 5.44, 5.41,
          5.36, 5.32, 5.29, 5.29, 5.34, 5.47, 5.66, 5.88, 6.1, 6.29, 6.44, 6.56,
          12.15, 12.17, 12.19, 12.13, 11.96, 11.7, 11.4, 11.1, 10.81, 10.53,
          10.21, 9.83, 9.41, 8.97, 8.56, 8.25, 8.01, 7.81, 7.62, 7.36, 7.07,
          6.78, 6.56, 6.37, 6.09, 5.76, 5.43, 5.13, 4.97, 4.94, 4.96, 4.97,
          4.92, 4.81, 4.68, 4.58, 4.56, 4.56, 4.58, 4.61, 4.64, 4.68, 4.79,
          4.94, 5.09, 5.19, 5.19, 5.11, 4.96, 4.79, 4.64, 4.53, 4.47, 4.43,
          4.39, 4.34, 4.28, 4.23, 4.21, 4.2, 4.12, 4.01, 3.93, 3.97, 4.14, 4.43,
          4.76, 5.04, 5.22, 5.38, 5.52, 5.63, 5.67, 5.66, 5.64, 5.6, 5.55, 5.5,
          5.43, 5.37, 5.33, 5.33, 5.39, 5.54, 5.76, 6, 6.23, 6.4, 6.51, 6.59,
          12.09, 12.13, 12.17, 12.14, 11.99, 11.75, 11.48, 11.2, 10.93, 10.66,
          10.32, 9.93, 9.49, 9.05, 8.65, 8.36, 8.14, 7.95, 7.76, 7.5, 7.19, 6.9,
          6.68, 6.5, 6.24, 5.93, 5.62, 5.32, 5.16, 5.14, 5.17, 5.17, 5.09, 4.93,
          4.74, 4.59, 4.54, 4.57, 4.63, 4.69, 4.73, 4.77, 4.87, 5.01, 5.14,
          5.23, 5.24, 5.16, 5.02, 4.85, 4.68, 4.55, 4.47, 4.41, 4.36, 4.31,
          4.27, 4.23, 4.21, 4.21, 4.13, 4.01, 3.93, 3.97, 4.14, 4.44, 4.77,
          5.07, 5.27, 5.48, 5.67, 5.83, 5.89, 5.88, 5.83, 5.75, 5.67, 5.59, 5.5,
          5.42, 5.37, 5.37, 5.43, 5.6, 5.84, 6.1, 6.35, 6.51, 6.58, 6.63, 12.04,
          12.1, 12.16, 12.15, 12.02, 11.79, 11.54, 11.28, 11.02, 10.76, 10.42,
          10.02, 9.58, 9.14, 8.75, 8.47, 8.27, 8.09, 7.91, 7.64, 7.33, 7.03,
          6.82, 6.64, 6.41, 6.12, 5.81, 5.51, 5.35, 5.32, 5.35, 5.35, 5.25,
          5.05, 4.81, 4.63, 4.57, 4.61, 4.69, 4.77, 4.83, 4.87, 4.96, 5.09,
          5.21, 5.29, 5.29, 5.22, 5.08, 4.9, 4.71, 4.57, 4.46, 4.39, 4.33, 4.28,
          4.24, 4.21, 4.21, 4.21, 4.13, 4.01, 3.93, 3.97, 4.15, 4.44, 4.79, 5.1,
          5.33, 5.57, 5.82, 6, 6.08, 6.06, 5.99, 5.89, 5.77, 5.67, 5.57, 5.47,
          5.41, 5.4, 5.47, 5.65, 5.91, 6.18, 6.44, 6.59, 6.66, 6.69, 12.02,
          12.08, 12.15, 12.16, 12.04, 11.82, 11.59, 11.34, 11.09, 10.83, 10.5,
          10.1, 9.67, 9.24, 8.86, 8.59, 8.4, 8.23, 8.04, 7.79, 7.48, 7.19, 6.98,
          6.81, 6.58, 6.3, 5.99, 5.7, 5.53, 5.49, 5.51, 5.49, 5.37, 5.15, 4.9,
          4.71, 4.65, 4.69, 4.77, 4.86, 4.92, 4.96, 5.05, 5.17, 5.28, 5.36,
          5.36, 5.27, 5.12, 4.93, 4.73, 4.57, 4.45, 4.36, 4.3, 4.25, 4.21, 4.18,
          4.18, 4.19, 4.12, 4.01, 3.93, 3.97, 4.15, 4.46, 4.82, 5.16, 5.41,
          5.68, 5.94, 6.14, 6.23, 6.21, 6.13, 6, 5.87, 5.75, 5.62, 5.51, 5.44,
          5.42, 5.5, 5.69, 5.95, 6.24, 6.5, 6.67, 6.73, 6.76, 12.04, 12.1,
          12.16, 12.17, 12.06, 11.85, 11.63, 11.4, 11.15, 10.9, 10.57, 10.19,
          9.77, 9.36, 8.99, 8.71, 8.51, 8.34, 8.15, 7.9, 7.6, 7.32, 7.12, 6.97,
          6.76, 6.49, 6.19, 5.89, 5.71, 5.66, 5.65, 5.61, 5.49, 5.27, 5.02,
          4.83, 4.78, 4.82, 4.89, 4.98, 5.04, 5.07, 5.15, 5.26, 5.36, 5.43,
          5.42, 5.32, 5.15, 4.94, 4.72, 4.54, 4.41, 4.31, 4.24, 4.19, 4.16,
          4.14, 4.15, 4.17, 4.11, 4.01, 3.94, 3.98, 4.16, 4.48, 4.85, 5.2, 5.48,
          5.77, 6.06, 6.28, 6.37, 6.35, 6.25, 6.12, 5.97, 5.82, 5.67, 5.53,
          5.44, 5.42, 5.5, 5.7, 5.98, 6.28, 6.55, 6.72, 6.79, 6.82, 12.1, 12.14,
          12.2, 12.2, 12.09, 11.9, 11.68, 11.46, 11.22, 10.97, 10.66, 10.29,
          9.89, 9.49, 9.12, 8.83, 8.61, 8.41, 8.23, 7.99, 7.7, 7.43, 7.25, 7.11,
          6.92, 6.67, 6.39, 6.09, 5.9, 5.82, 5.79, 5.73, 5.59, 5.38, 5.16, 4.99,
          4.95, 4.98, 5.05, 5.13, 5.19, 5.22, 5.28, 5.37, 5.45, 5.5, 5.48, 5.36,
          5.16, 4.93, 4.69, 4.5, 4.34, 4.23, 4.15, 4.1, 4.09, 4.09, 4.12, 4.14,
          4.1, 4.01, 3.96, 4.01, 4.19, 4.5, 4.87, 5.23, 5.53, 5.85, 6.16, 6.4,
          6.51, 6.48, 6.38, 6.23, 6.06, 5.9, 5.72, 5.54, 5.41, 5.38, 5.46, 5.68,
          5.98, 6.3, 6.58, 6.75, 6.82, 6.86, 12.19, 12.22, 12.26, 12.24, 12.13,
          11.95, 11.74, 11.52, 11.28, 11.03, 10.74, 10.4, 10.02, 9.64, 9.27,
          8.95, 8.68, 8.46, 8.28, 8.04, 7.77, 7.52, 7.35, 7.23, 7.06, 6.86, 6.6,
          6.3, 6.09, 5.98, 5.92, 5.83, 5.69, 5.51, 5.32, 5.19, 5.15, 5.18, 5.25,
          5.32, 5.37, 5.39, 5.43, 5.48, 5.53, 5.57, 5.54, 5.39, 5.16, 4.9, 4.65,
          4.43, 4.26, 4.13, 4.04, 4, 4, 4.04, 4.08, 4.11, 4.09, 4.02, 3.99,
          4.05, 4.23, 4.53, 4.89, 5.26, 5.57, 5.92, 6.26, 6.52, 6.63, 6.61, 6.5,
          6.34, 6.16, 5.97, 5.76, 5.53, 5.37, 5.31, 5.4, 5.64, 5.96, 6.3, 6.6,
          6.77, 6.84, 6.87, 12.3, 12.32, 12.32, 12.29, 12.17, 12, 11.8, 11.58,
          11.34, 11.1, 10.82, 10.51, 10.16, 9.79, 9.41, 9.06, 8.75, 8.49, 8.3,
          8.08, 7.82, 7.59, 7.43, 7.32, 7.2, 7.03, 6.8, 6.51, 6.28, 6.14, 6.04,
          5.92, 5.78, 5.63, 5.49, 5.4, 5.37, 5.4, 5.46, 5.52, 5.57, 5.58, 5.59,
          5.6, 5.62, 5.64, 5.59, 5.41, 5.15, 4.87, 4.6, 4.36, 4.17, 4.02, 3.92,
          3.88, 3.91, 3.98, 4.05, 4.09, 4.08, 4.04, 4.03, 4.1, 4.27, 4.56, 4.91,
          5.27, 5.6, 5.97, 6.34, 6.63, 6.75, 6.72, 6.61, 6.44, 6.25, 6.05, 5.79,
          5.51, 5.3, 5.22, 5.32, 5.58, 5.93, 6.29, 6.6, 6.77, 6.84, 6.86, 12.43,
          12.42, 12.4, 12.34, 12.22, 12.05, 11.86, 11.63, 11.4, 11.16, 10.9,
          10.61, 10.29, 9.94, 9.55, 9.16, 8.8, 8.51, 8.31, 8.1, 7.86, 7.65, 7.5,
          7.41, 7.32, 7.19, 6.99, 6.71, 6.46, 6.28, 6.15, 6.01, 5.87, 5.75,
          5.67, 5.62, 5.6, 5.63, 5.67, 5.73, 5.77, 5.78, 5.76, 5.72, 5.7, 5.71,
          5.65, 5.44, 5.15, 4.83, 4.55, 4.29, 4.07, 3.91, 3.8, 3.77, 3.83, 3.92,
          4.01, 4.06, 4.07, 4.06, 4.08, 4.15, 4.32, 4.58, 4.91, 5.27, 5.61,
          6.01, 6.4, 6.71, 6.85, 6.82, 6.7, 6.53, 6.32, 6.11, 5.81, 5.49, 5.23,
          5.13, 5.23, 5.51, 5.89, 6.27, 6.59, 6.76, 6.82, 6.83, 12.55, 12.53,
          12.48, 12.39, 12.27, 12.11, 11.91, 11.69, 11.46, 11.23, 10.98, 10.71,
          10.41, 10.07, 9.68, 9.26, 8.85, 8.53, 8.32, 8.12, 7.9, 7.7, 7.56,
          7.48, 7.43, 7.34, 7.17, 6.89, 6.62, 6.42, 6.25, 6.09, 5.95, 5.87,
          5.83, 5.82, 5.82, 5.84, 5.88, 5.92, 5.95, 5.96, 5.91, 5.84, 5.78,
          5.78, 5.7, 5.47, 5.14, 4.81, 4.51, 4.24, 4, 3.81, 3.7, 3.68, 3.76,
          3.88, 3.99, 4.04, 4.06, 4.08, 4.11, 4.2, 4.36, 4.6, 4.92, 5.26, 5.61,
          6.03, 6.45, 6.78, 6.92, 6.89, 6.78, 6.6, 6.38, 6.15, 5.83, 5.46, 5.15,
          5.03, 5.14, 5.44, 5.84, 6.25, 6.57, 6.74, 6.79, 6.8, 12.66, 12.62,
          12.55, 12.44, 12.32, 12.16, 11.96, 11.74, 11.51, 11.28, 11.05, 10.8,
          10.52, 10.19, 9.79, 9.34, 8.89, 8.55, 8.34, 8.14, 7.93, 7.75, 7.62,
          7.56, 7.52, 7.47, 7.32, 7.04, 6.76, 6.54, 6.34, 6.17, 6.04, 5.98,
          5.98, 6, 6.01, 6.03, 6.06, 6.09, 6.12, 6.12, 6.05, 5.95, 5.86, 5.85,
          5.76, 5.5, 5.15, 4.8, 4.49, 4.2, 3.95, 3.75, 3.62, 3.61, 3.7, 3.85,
          3.97, 4.03, 4.06, 4.09, 4.15, 4.23, 4.39, 4.62, 4.91, 5.25, 5.61,
          6.04, 6.48, 6.82, 6.97, 6.94, 6.83, 6.64, 6.42, 6.18, 5.83, 5.42,
          5.09, 4.95, 5.06, 5.37, 5.8, 6.22, 6.55, 6.72, 6.76, 6.76, 12.74,
          12.69, 12.6, 12.49, 12.36, 12.2, 12.01, 11.79, 11.56, 11.33, 11.11,
          10.87, 10.6, 10.28, 9.88, 9.41, 8.94, 8.58, 8.37, 8.18, 7.98, 7.8,
          7.68, 7.62, 7.61, 7.57, 7.44, 7.17, 6.88, 6.64, 6.43, 6.25, 6.12,
          6.08, 6.11, 6.15, 6.16, 6.18, 6.2, 6.23, 6.26, 6.25, 6.17, 6.04, 5.94,
          5.92, 5.82, 5.55, 5.18, 4.81, 4.5, 4.2, 3.93, 3.72, 3.59, 3.57, 3.68,
          3.84, 3.97, 4.02, 4.06, 4.11, 4.17, 4.26, 4.4, 4.62, 4.91, 5.24, 5.6,
          6.04, 6.49, 6.84, 7, 6.96, 6.85, 6.66, 6.44, 6.19, 5.83, 5.39, 5.04,
          4.89, 5, 5.32, 5.76, 6.19, 6.52, 6.69, 6.73, 6.72, 12.79, 12.74,
          12.64, 12.52, 12.4, 12.24, 12.05, 11.83, 11.6, 11.37, 11.15, 10.92,
          10.66, 10.34, 9.95, 9.47, 9, 8.63, 8.42, 8.23, 8.04, 7.86, 7.75, 7.69,
          7.69, 7.66, 7.53, 7.26, 6.97, 6.73, 6.52, 6.33, 6.2, 6.17, 6.21, 6.25,
          6.27, 6.28, 6.31, 6.33, 6.36, 6.35, 6.26, 6.12, 6.01, 5.99, 5.88, 5.6,
          5.23, 4.85, 4.54, 4.23, 3.95, 3.74, 3.6, 3.58, 3.69, 3.85, 3.97, 4.03,
          4.07, 4.11, 4.17, 4.26, 4.4, 4.62, 4.9, 5.22, 5.59, 6.03, 6.48, 6.83,
          6.99, 6.96, 6.84, 6.66, 6.43, 6.18, 5.81, 5.37, 5, 4.85, 4.96, 5.29,
          5.72, 6.16, 6.49, 6.66, 6.7, 6.69, 12.81, 12.76, 12.67, 12.56, 12.43,
          12.28, 12.08, 11.85, 11.62, 11.4, 11.18, 10.96, 10.7, 10.39, 9.99,
          9.52, 9.05, 8.68, 8.47, 8.29, 8.1, 7.93, 7.82, 7.76, 7.76, 7.73, 7.6,
          7.34, 7.05, 6.8, 6.59, 6.41, 6.28, 6.25, 6.29, 6.34, 6.35, 6.36, 6.38,
          6.39, 6.41, 6.4, 6.31, 6.18, 6.08, 6.05, 5.94, 5.67, 5.3, 4.93, 4.61,
          4.3, 4.01, 3.79, 3.65, 3.62, 3.72, 3.87, 3.99, 4.04, 4.08, 4.13, 4.2,
          4.29, 4.42, 4.62, 4.89, 5.2, 5.56, 5.99, 6.44, 6.79, 6.94, 6.91, 6.8,
          6.62, 6.4, 6.16, 5.79, 5.36, 4.99, 4.84, 4.95, 5.26, 5.69, 6.11, 6.43,
          6.61, 6.65, 6.65, 12.82, 12.78, 12.69, 12.58, 12.46, 12.3, 12.09,
          11.85, 11.61, 11.38, 11.18, 10.97, 10.73, 10.43, 10.04, 9.56, 9.09,
          8.72, 8.52, 8.34, 8.16, 8.01, 7.89, 7.84, 7.83, 7.8, 7.68, 7.41, 7.12,
          6.88, 6.66, 6.48, 6.35, 6.33, 6.37, 6.42, 6.44, 6.44, 6.42, 6.41,
          6.41, 6.4, 6.32, 6.21, 6.13, 6.1, 6, 5.75, 5.4, 5.04, 4.72, 4.4, 4.11,
          3.88, 3.73, 3.69, 3.77, 3.9, 4.01, 4.06, 4.11, 4.18, 4.27, 4.36, 4.48,
          4.65, 4.88, 5.16, 5.5, 5.92, 6.36, 6.7, 6.85, 6.82, 6.73, 6.57, 6.37,
          6.13, 5.78, 5.36, 5.01, 4.86, 4.96, 5.24, 5.63, 6.03, 6.34, 6.53, 6.6,
          6.63, 12.82, 12.77, 12.7, 12.6, 12.48, 12.33, 12.1, 11.83, 11.57,
          11.35, 11.16, 10.97, 10.75, 10.47, 10.08, 9.61, 9.13, 8.76, 8.56, 8.4,
          8.23, 8.08, 7.97, 7.91, 7.9, 7.87, 7.75, 7.48, 7.19, 6.94, 6.72, 6.54,
          6.42, 6.4, 6.45, 6.51, 6.53, 6.51, 6.46, 6.4, 6.37, 6.35, 6.3, 6.22,
          6.16, 6.15, 6.06, 5.83, 5.51, 5.18, 4.86, 4.54, 4.23, 3.99, 3.83,
          3.78, 3.84, 3.94, 4.03, 4.08, 4.16, 4.27, 4.38, 4.48, 4.59, 4.71,
          4.88, 5.12, 5.43, 5.83, 6.24, 6.57, 6.71, 6.69, 6.62, 6.5, 6.32, 6.1,
          5.77, 5.37, 5.04, 4.9, 4.99, 5.23, 5.57, 5.92, 6.22, 6.42, 6.53, 6.6,
          12.8, 12.76, 12.69, 12.6, 12.5, 12.34, 12.09, 11.79, 11.51, 11.29,
          11.12, 10.96, 10.77, 10.5, 10.12, 9.65, 9.17, 8.8, 8.6, 8.45, 8.3,
          8.17, 8.06, 7.99, 7.97, 7.94, 7.81, 7.55, 7.26, 7, 6.78, 6.6, 6.48,
          6.48, 6.54, 6.6, 6.62, 6.57, 6.47, 6.37, 6.3, 6.28, 6.25, 6.21, 6.19,
          6.18, 6.11, 5.92, 5.64, 5.34, 5.03, 4.7, 4.38, 4.12, 3.96, 3.89, 3.92,
          3.99, 4.06, 4.12, 4.23, 4.37, 4.52, 4.64, 4.72, 4.79, 4.89, 5.06,
          5.34, 5.71, 6.1, 6.41, 6.54, 6.53, 6.49, 6.41, 6.27, 6.07, 5.76, 5.39,
          5.08, 4.96, 5.03, 5.22, 5.49, 5.79, 6.08, 6.3, 6.46, 6.58, 12.76,
          12.73, 12.68, 12.6, 12.51, 12.35, 12.08, 11.75, 11.45, 11.22, 11.07,
          10.95, 10.79, 10.54, 10.17, 9.7, 9.22, 8.85, 8.65, 8.5, 8.37, 8.25,
          8.14, 8.06, 8.04, 8, 7.87, 7.61, 7.32, 7.06, 6.83, 6.65, 6.54, 6.55,
          6.62, 6.69, 6.72, 6.64, 6.49, 6.33, 6.22, 6.19, 6.19, 6.19, 6.2, 6.21,
          6.15, 6, 5.78, 5.5, 5.2, 4.87, 4.54, 4.27, 4.09, 4.02, 4.01, 4.05,
          4.1, 4.17, 4.31, 4.5, 4.69, 4.82, 4.88, 4.88, 4.9, 5.01, 5.25, 5.59,
          5.94, 6.23, 6.35, 6.35, 6.35, 6.31, 6.21, 6.04, 5.75, 5.41, 5.14,
          5.02, 5.09, 5.22, 5.42, 5.67, 5.93, 6.18, 6.39, 6.56, 12.71, 12.69,
          12.65, 12.59, 12.52, 12.36, 12.06, 11.7, 11.38, 11.16, 11.03, 10.93,
          10.81, 10.58, 10.22, 9.75, 9.27, 8.9, 8.7, 8.57, 8.45, 8.34, 8.23,
          8.13, 8.1, 8.06, 7.93, 7.67, 7.38, 7.11, 6.88, 6.71, 6.61, 6.62, 6.71,
          6.79, 6.81, 6.71, 6.51, 6.29, 6.15, 6.11, 6.13, 6.17, 6.21, 6.23,
          6.19, 6.08, 5.9, 5.67, 5.38, 5.04, 4.7, 4.42, 4.24, 4.15, 4.11, 4.12,
          4.16, 4.23, 4.4, 4.65, 4.87, 5.02, 5.05, 4.99, 4.93, 4.97, 5.16, 5.46,
          5.78, 6.04, 6.15, 6.16, 6.19, 6.2, 6.14, 6, 5.74, 5.44, 5.19, 5.1,
          5.14, 5.23, 5.36, 5.55, 5.79, 6.06, 6.32, 6.54, 12.65, 12.63, 12.6,
          12.56, 12.51, 12.35, 12.04, 11.66, 11.33, 11.11, 11, 10.93, 10.83,
          10.63, 10.28, 9.82, 9.34, 8.97, 8.78, 8.65, 8.54, 8.43, 8.31, 8.2,
          8.16, 8.11, 7.98, 7.72, 7.43, 7.16, 6.93, 6.76, 6.67, 6.7, 6.79, 6.88,
          6.91, 6.79, 6.54, 6.27, 6.09, 6.05, 6.09, 6.16, 6.23, 6.25, 6.23,
          6.16, 6.02, 5.81, 5.54, 5.2, 4.86, 4.57, 4.38, 4.28, 4.22, 4.2, 4.23,
          4.31, 4.52, 4.8, 5.06, 5.21, 5.22, 5.1, 4.97, 4.94, 5.08, 5.34, 5.62,
          5.85, 5.96, 5.98, 6.04, 6.09, 6.07, 5.96, 5.74, 5.47, 5.25, 5.16, 5.2,
          5.24, 5.31, 5.45, 5.68, 5.96, 6.25, 6.52, 12.57, 12.56, 12.55, 12.52,
          12.48, 12.34, 12.03, 11.64, 11.3, 11.08, 10.99, 10.94, 10.87, 10.69,
          10.35, 9.9, 9.42, 9.05, 8.86, 8.74, 8.63, 8.53, 8.4, 8.27, 8.21, 8.15,
          8.02, 7.76, 7.47, 7.2, 6.98, 6.82, 6.74, 6.78, 6.88, 6.98, 7, 6.87,
          6.59, 6.28, 6.08, 6.03, 6.07, 6.16, 6.24, 6.28, 6.27, 6.22, 6.11,
          5.94, 5.68, 5.35, 5, 4.71, 4.51, 4.4, 4.33, 4.3, 4.33, 4.41, 4.64,
          4.95, 5.24, 5.4, 5.38, 5.21, 5.02, 4.92, 5.02, 5.23, 5.48, 5.68, 5.78,
          5.81, 5.89, 5.98, 6, 5.91, 5.73, 5.49, 5.29, 5.22, 5.25, 5.26, 5.29,
          5.39, 5.6, 5.88, 6.2, 6.49, 12.49, 12.48, 12.48, 12.47, 12.45, 12.32,
          12.02, 11.63, 11.29, 11.08, 11, 10.97, 10.92, 10.75, 10.43, 9.99,
          9.52, 9.16, 8.97, 8.85, 8.74, 8.62, 8.47, 8.33, 8.26, 8.19, 8.05, 7.8,
          7.51, 7.25, 7.03, 6.88, 6.81, 6.86, 6.97, 7.07, 7.1, 6.96, 6.66, 6.33,
          6.11, 6.05, 6.08, 6.17, 6.26, 6.3, 6.3, 6.27, 6.19, 6.03, 5.78, 5.47,
          5.12, 4.83, 4.64, 4.52, 4.44, 4.41, 4.44, 4.54, 4.78, 5.11, 5.4, 5.56,
          5.53, 5.32, 5.08, 4.93, 4.99, 5.15, 5.36, 5.54, 5.62, 5.66, 5.76,
          5.87, 5.92, 5.87, 5.71, 5.5, 5.33, 5.26, 5.28, 5.28, 5.29, 5.37, 5.56,
          5.84, 6.17, 6.46, 12.38, 12.39, 12.4, 12.41, 12.4, 12.3, 12.01, 11.64,
          11.31, 11.11, 11.03, 11.01, 10.96, 10.81, 10.51, 10.08, 9.64, 9.28,
          9.1, 8.97, 8.85, 8.71, 8.55, 8.39, 8.3, 8.22, 8.08, 7.82, 7.54, 7.29,
          7.09, 6.94, 6.89, 6.94, 7.06, 7.16, 7.19, 7.04, 6.74, 6.41, 6.18, 6.1,
          6.13, 6.21, 6.29, 6.32, 6.32, 6.3, 6.23, 6.09, 5.86, 5.56, 5.23, 4.94,
          4.75, 4.63, 4.55, 4.53, 4.56, 4.67, 4.92, 5.25, 5.55, 5.7, 5.66, 5.43,
          5.15, 4.97, 4.98, 5.09, 5.26, 5.41, 5.48, 5.52, 5.63, 5.76, 5.84,
          5.81, 5.68, 5.5, 5.34, 5.28, 5.31, 5.3, 5.3, 5.37, 5.56, 5.83, 6.15,
          6.44, 12.25, 12.27, 12.3, 12.34, 12.36, 12.27, 12.01, 11.66, 11.35,
          11.15, 11.06, 11.03, 10.97, 10.82, 10.54, 10.15, 9.74, 9.42, 9.24,
          9.1, 8.97, 8.81, 8.63, 8.45, 8.34, 8.25, 8.1, 7.84, 7.57, 7.33, 7.14,
          7.01, 6.96, 7.01, 7.12, 7.2, 7.23, 7.09, 6.82, 6.5, 6.27, 6.19, 6.19,
          6.24, 6.3, 6.33, 6.34, 6.32, 6.25, 6.12, 5.91, 5.63, 5.32, 5.05, 4.86,
          4.73, 4.66, 4.64, 4.68, 4.79, 5.05, 5.38, 5.68, 5.83, 5.78, 5.55,
          5.26, 5.04, 5, 5.07, 5.18, 5.28, 5.33, 5.37, 5.48, 5.62, 5.71, 5.71,
          5.62, 5.47, 5.33, 5.29, 5.31, 5.31, 5.31, 5.38, 5.56, 5.83, 6.14,
          6.44, 12.09, 12.13, 12.2, 12.26, 12.31, 12.24, 12.01, 11.69, 11.4,
          11.2, 11.1, 11.03, 10.95, 10.79, 10.54, 10.2, 9.84, 9.56, 9.39, 9.24,
          9.09, 8.91, 8.71, 8.52, 8.39, 8.27, 8.11, 7.86, 7.6, 7.38, 7.2, 7.09,
          7.04, 7.08, 7.15, 7.22, 7.23, 7.12, 6.88, 6.6, 6.39, 6.29, 6.26, 6.28,
          6.32, 6.34, 6.34, 6.32, 6.26, 6.13, 5.94, 5.68, 5.4, 5.15, 4.96, 4.84,
          4.76, 4.73, 4.78, 4.9, 5.16, 5.5, 5.8, 5.94, 5.89, 5.66, 5.37, 5.15,
          5.07, 5.06, 5.1, 5.15, 5.17, 5.21, 5.32, 5.46, 5.56, 5.58, 5.52, 5.41,
          5.3, 5.27, 5.3, 5.3, 5.32, 5.39, 5.56, 5.83, 6.16, 6.47, 11.92, 11.98,
          12.09, 12.19, 12.26, 12.22, 12.01, 11.72, 11.45, 11.26, 11.13, 11.02,
          10.9, 10.73, 10.51, 10.23, 9.94, 9.7, 9.54, 9.39, 9.21, 9.01, 8.79,
          8.58, 8.43, 8.3, 8.13, 7.88, 7.63, 7.42, 7.26, 7.16, 7.12, 7.13, 7.17,
          7.2, 7.21, 7.12, 6.93, 6.7, 6.51, 6.4, 6.34, 6.32, 6.33, 6.35, 6.35,
          6.32, 6.25, 6.13, 5.95, 5.72, 5.48, 5.25, 5.07, 4.94, 4.85, 4.83,
          4.87, 5, 5.26, 5.61, 5.9, 6.04, 5.99, 5.78, 5.5, 5.27, 5.15, 5.08,
          5.04, 5.03, 5.02, 5.05, 5.15, 5.28, 5.38, 5.43, 5.4, 5.33, 5.26, 5.25,
          5.28, 5.29, 5.32, 5.4, 5.57, 5.84, 6.19, 6.51, 11.75, 11.83, 11.97,
          12.12, 12.21, 12.19, 12.01, 11.75, 11.51, 11.32, 11.16, 11, 10.83,
          10.65, 10.46, 10.24, 10.02, 9.83, 9.69, 9.52, 9.33, 9.1, 8.86, 8.64,
          8.47, 8.33, 8.15, 7.9, 7.66, 7.47, 7.33, 7.24, 7.2, 7.18, 7.18, 7.18,
          7.18, 7.12, 6.98, 6.81, 6.65, 6.53, 6.43, 6.38, 6.35, 6.36, 6.36,
          6.32, 6.25, 6.13, 5.96, 5.76, 5.55, 5.34, 5.17, 5.03, 4.94, 4.91,
          4.95, 5.08, 5.36, 5.7, 5.99, 6.13, 6.08, 5.89, 5.63, 5.4, 5.25, 5.12,
          5, 4.92, 4.88, 4.91, 4.99, 5.1, 5.21, 5.27, 5.28, 5.24, 5.21, 5.21,
          5.25, 5.28, 5.32, 5.42, 5.58, 5.86, 6.22, 6.57, 11.58, 11.69, 11.87,
          12.05, 12.17, 12.16, 12.01, 11.78, 11.56, 11.38, 11.19, 10.97, 10.76,
          10.57, 10.4, 10.24, 10.1, 9.96, 9.82, 9.65, 9.43, 9.19, 8.94, 8.7,
          8.52, 8.36, 8.17, 7.92, 7.69, 7.52, 7.4, 7.32, 7.28, 7.23, 7.19, 7.16,
          7.15, 7.11, 7.03, 6.92, 6.79, 6.65, 6.53, 6.44, 6.38, 6.38, 6.38,
          6.34, 6.25, 6.13, 5.98, 5.8, 5.62, 5.44, 5.27, 5.13, 5.03, 4.99, 5.03,
          5.17, 5.44, 5.78, 6.07, 6.2, 6.15, 5.99, 5.76, 5.53, 5.35, 5.16, 4.97,
          4.82, 4.76, 4.78, 4.85, 4.94, 5.04, 5.12, 5.16, 5.16, 5.16, 5.17,
          5.21, 5.26, 5.32, 5.43, 5.59, 5.88, 6.26, 6.63, 11.43, 11.56, 11.77,
          11.98, 12.12, 12.13, 12.01, 11.8, 11.6, 11.43, 11.21, 10.95, 10.7,
          10.5, 10.35, 10.25, 10.16, 10.06, 9.94, 9.76, 9.53, 9.27, 9, 8.75,
          8.56, 8.39, 8.19, 7.95, 7.73, 7.57, 7.46, 7.4, 7.36, 7.29, 7.21, 7.15,
          7.13, 7.12, 7.09, 7.02, 6.92, 6.78, 6.63, 6.5, 6.43, 6.42, 6.41, 6.37,
          6.28, 6.16, 6.01, 5.86, 5.7, 5.54, 5.38, 5.23, 5.12, 5.08, 5.11, 5.24,
          5.52, 5.86, 6.14, 6.26, 6.22, 6.07, 5.87, 5.64, 5.44, 5.2, 4.95, 4.75,
          4.66, 4.68, 4.73, 4.82, 4.91, 4.99, 5.05, 5.09, 5.11, 5.14, 5.19,
          5.25, 5.33, 5.44, 5.6, 5.89, 6.3, 6.69, 11.31, 11.45, 11.69, 11.92,
          12.08, 12.1, 11.99, 11.81, 11.62, 11.45, 11.22, 10.93, 10.66, 10.45,
          10.32, 10.25, 10.21, 10.14, 10.02, 9.84, 9.6, 9.33, 9.06, 8.81, 8.61,
          8.43, 8.23, 7.99, 7.78, 7.63, 7.53, 7.48, 7.44, 7.35, 7.25, 7.16,
          7.14, 7.15, 7.15, 7.12, 7.04, 6.9, 6.73, 6.58, 6.49, 6.48, 6.47, 6.42,
          6.33, 6.21, 6.07, 5.93, 5.79, 5.64, 5.49, 5.33, 5.22, 5.17, 5.2, 5.33,
          5.59, 5.93, 6.21, 6.32, 6.28, 6.15, 5.95, 5.74, 5.52, 5.24, 4.94, 4.7,
          4.6, 4.61, 4.66, 4.73, 4.81, 4.91, 4.99, 5.04, 5.08, 5.12, 5.17, 5.24,
          5.33, 5.46, 5.61, 5.91, 6.33, 6.74, 11.23, 11.38, 11.62, 11.87, 12.03,
          12.07, 11.97, 11.8, 11.62, 11.46, 11.22, 10.93, 10.64, 10.43, 10.31,
          10.26, 10.24, 10.2, 10.08, 9.9, 9.65, 9.38, 9.1, 8.86, 8.65, 8.47,
          8.28, 8.04, 7.84, 7.69, 7.61, 7.56, 7.52, 7.43, 7.31, 7.21, 7.19, 7.2,
          7.22, 7.22, 7.14, 7, 6.83, 6.67, 6.57, 6.56, 6.56, 6.5, 6.41, 6.29,
          6.16, 6.03, 5.9, 5.75, 5.6, 5.44, 5.32, 5.26, 5.28, 5.41, 5.67, 6,
          6.27, 6.38, 6.33, 6.2, 6.01, 5.79, 5.57, 5.27, 4.95, 4.69, 4.57, 4.58,
          4.62, 4.69, 4.77, 4.87, 4.96, 5.02, 5.07, 5.12, 5.17, 5.24, 5.34,
          5.47, 5.63, 5.93, 6.35, 6.76, 11.18, 11.33, 11.57, 11.82, 11.99,
          12.03, 11.94, 11.78, 11.6, 11.45, 11.22, 10.92, 10.64, 10.43, 10.33,
          10.29, 10.27, 10.23, 10.12, 9.93, 9.69, 9.42, 9.15, 8.9, 8.71, 8.53,
          8.34, 8.11, 7.91, 7.77, 7.68, 7.64, 7.6, 7.5, 7.38, 7.29, 7.26, 7.28,
          7.3, 7.3, 7.23, 7.09, 6.92, 6.77, 6.67, 6.66, 6.66, 6.61, 6.53, 6.41,
          6.28, 6.15, 6.01, 5.87, 5.71, 5.55, 5.43, 5.36, 5.38, 5.5, 5.75, 6.07,
          6.33, 6.43, 6.38, 6.24, 6.05, 5.82, 5.59, 5.29, 4.96, 4.7, 4.58, 4.59,
          4.63, 4.7, 4.78, 4.88, 4.97, 5.04, 5.09, 5.13, 5.19, 5.26, 5.36, 5.49,
          5.65, 5.95, 6.37, 6.78, 11.13, 11.28, 11.51, 11.75, 11.92, 11.96,
          11.88, 11.73, 11.56, 11.42, 11.2, 10.92, 10.65, 10.45, 10.35, 10.32,
          10.32, 10.29, 10.18, 9.99, 9.74, 9.47, 9.2, 8.96, 8.77, 8.61, 8.43,
          8.21, 8, 7.85, 7.75, 7.7, 7.66, 7.57, 7.45, 7.36, 7.33, 7.35, 7.36,
          7.35, 7.28, 7.15, 6.99, 6.85, 6.76, 6.76, 6.77, 6.74, 6.67, 6.56,
          6.44, 6.3, 6.15, 5.99, 5.82, 5.66, 5.55, 5.5, 5.52, 5.63, 5.86, 6.15,
          6.38, 6.46, 6.41, 6.27, 6.08, 5.86, 5.63, 5.32, 4.99, 4.73, 4.61,
          4.62, 4.66, 4.73, 4.82, 4.92, 5, 5.07, 5.12, 5.17, 5.22, 5.3, 5.4,
          5.53, 5.68, 5.98, 6.39, 6.79, 11.1, 11.23, 11.44, 11.66, 11.82, 11.86,
          11.8, 11.66, 11.51, 11.37, 11.17, 10.91, 10.66, 10.47, 10.37, 10.37,
          10.39, 10.37, 10.26, 10.07, 9.81, 9.53, 9.25, 9.03, 8.86, 8.72, 8.56,
          8.34, 8.12, 7.95, 7.82, 7.75, 7.7, 7.61, 7.5, 7.41, 7.38, 7.39, 7.4,
          7.38, 7.31, 7.18, 7.04, 6.91, 6.84, 6.85, 6.87, 6.87, 6.83, 6.75,
          6.63, 6.47, 6.3, 6.12, 5.93, 5.79, 5.69, 5.67, 5.7, 5.8, 5.99, 6.23,
          6.42, 6.48, 6.42, 6.29, 6.11, 5.9, 5.68, 5.37, 5.04, 4.77, 4.65, 4.66,
          4.71, 4.79, 4.88, 4.98, 5.06, 5.13, 5.18, 5.23, 5.28, 5.36, 5.47, 5.6,
          5.74, 6.02, 6.42, 6.8, 11.07, 11.18, 11.37, 11.56, 11.7, 11.74, 11.69,
          11.58, 11.45, 11.32, 11.13, 10.89, 10.66, 10.49, 10.4, 10.42, 10.47,
          10.47, 10.37, 10.17, 9.89, 9.59, 9.32, 9.1, 8.96, 8.85, 8.7, 8.49,
          8.26, 8.05, 7.89, 7.79, 7.74, 7.64, 7.53, 7.45, 7.42, 7.42, 7.42,
          7.38, 7.3, 7.18, 7.06, 6.96, 6.91, 6.92, 6.97, 7, 7, 6.95, 6.84, 6.67,
          6.46, 6.24, 6.05, 5.91, 5.85, 5.85, 5.9, 5.99, 6.14, 6.32, 6.45, 6.49,
          6.42, 6.31, 6.15, 5.96, 5.74, 5.44, 5.1, 4.83, 4.71, 4.72, 4.78, 4.86,
          4.96, 5.06, 5.14, 5.2, 5.26, 5.3, 5.36, 5.44, 5.55, 5.68, 5.82, 6.08,
          6.45, 6.82, 11.06, 11.15, 11.3, 11.46, 11.58, 11.62, 11.59, 11.49,
          11.38, 11.26, 11.09, 10.88, 10.68, 10.51, 10.44, 10.48, 10.56, 10.58,
          10.48, 10.27, 9.98, 9.67, 9.39, 9.19, 9.07, 8.99, 8.87, 8.66, 8.41,
          8.17, 7.96, 7.83, 7.76, 7.66, 7.55, 7.47, 7.44, 7.44, 7.41, 7.36,
          7.28, 7.17, 7.07, 6.99, 6.97, 6.99, 7.05, 7.13, 7.18, 7.16, 7.06,
          6.87, 6.62, 6.37, 6.16, 6.04, 6.01, 6.05, 6.12, 6.19, 6.29, 6.4, 6.48,
          6.48, 6.42, 6.32, 6.18, 6.01, 5.81, 5.52, 5.18, 4.91, 4.78, 4.8, 4.86,
          4.95, 5.06, 5.15, 5.23, 5.3, 5.35, 5.39, 5.45, 5.54, 5.66, 5.78, 5.91,
          6.15, 6.49, 6.83, 11.06, 11.13, 11.25, 11.37, 11.47, 11.51, 11.49,
          11.41, 11.31, 11.2, 11.05, 10.87, 10.69, 10.54, 10.47, 10.54, 10.64,
          10.69, 10.6, 10.38, 10.07, 9.74, 9.46, 9.27, 9.19, 9.13, 9.04, 8.84,
          8.57, 8.28, 8.03, 7.86, 7.77, 7.67, 7.55, 7.47, 7.45, 7.44, 7.4, 7.33,
          7.24, 7.14, 7.06, 7.02, 7.01, 7.04, 7.13, 7.25, 7.34, 7.37, 7.28,
          7.07, 6.79, 6.51, 6.28, 6.17, 6.18, 6.25, 6.34, 6.39, 6.44, 6.48,
          6.49, 6.46, 6.4, 6.32, 6.21, 6.07, 5.89, 5.61, 5.27, 5, 4.87, 4.89,
          4.96, 5.06, 5.17, 5.27, 5.34, 5.4, 5.45, 5.5, 5.56, 5.65, 5.77, 5.89,
          6.01, 6.22, 6.53, 6.84, 11.09, 11.14, 11.22, 11.31, 11.38, 11.42,
          11.4, 11.34, 11.26, 11.15, 11.02, 10.86, 10.7, 10.56, 10.5, 10.59,
          10.73, 10.79, 10.7, 10.47, 10.15, 9.81, 9.53, 9.36, 9.3, 9.28, 9.2,
          9.01, 8.72, 8.4, 8.1, 7.89, 7.78, 7.66, 7.55, 7.47, 7.44, 7.42, 7.37,
          7.29, 7.2, 7.11, 7.05, 7.03, 7.04, 7.09, 7.19, 7.35, 7.49, 7.55, 7.48,
          7.26, 6.95, 6.64, 6.4, 6.3, 6.34, 6.44, 6.54, 6.57, 6.57, 6.55, 6.51,
          6.45, 6.39, 6.33, 6.25, 6.13, 5.97, 5.71, 5.38, 5.1, 4.98, 5, 5.08,
          5.18, 5.3, 5.39, 5.46, 5.52, 5.57, 5.61, 5.67, 5.77, 5.89, 6, 6.1,
          6.29, 6.57, 6.86, 11.14, 11.17, 11.22, 11.28, 11.33, 11.36, 11.35,
          11.3, 11.22, 11.12, 11, 10.86, 10.72, 10.59, 10.54, 10.64, 10.79,
          10.87, 10.79, 10.55, 10.22, 9.88, 9.6, 9.45, 9.41, 9.41, 9.35, 9.17,
          8.87, 8.5, 8.16, 7.93, 7.79, 7.66, 7.53, 7.45, 7.42, 7.4, 7.33, 7.25,
          7.15, 7.07, 7.03, 7.03, 7.07, 7.12, 7.24, 7.43, 7.62, 7.71, 7.65,
          7.43, 7.1, 6.77, 6.52, 6.43, 6.48, 6.61, 6.71, 6.73, 6.68, 6.61, 6.52,
          6.44, 6.38, 6.33, 6.28, 6.19, 6.06, 5.81, 5.49, 5.22, 5.1, 5.12, 5.2,
          5.32, 5.43, 5.52, 5.59, 5.64, 5.69, 5.73, 5.79, 5.89, 6, 6.11, 6.19,
          6.35, 6.61, 6.87, 11.21, 11.22, 11.25, 11.29, 11.33, 11.35, 11.33,
          11.28, 11.2, 11.11, 11, 10.87, 10.74, 10.61, 10.56, 10.68, 10.84,
          10.93, 10.85, 10.61, 10.28, 9.93, 9.67, 9.53, 9.51, 9.53, 9.48, 9.3,
          8.99, 8.6, 8.23, 7.96, 7.8, 7.65, 7.51, 7.42, 7.39, 7.36, 7.3, 7.21,
          7.12, 7.04, 7.02, 7.03, 7.08, 7.14, 7.27, 7.49, 7.7, 7.82, 7.79, 7.57,
          7.24, 6.9, 6.65, 6.55, 6.62, 6.75, 6.85, 6.84, 6.77, 6.65, 6.53, 6.43,
          6.37, 6.34, 6.31, 6.25, 6.14, 5.91, 5.62, 5.35, 5.24, 5.26, 5.34,
          5.45, 5.57, 5.65, 5.72, 5.77, 5.81, 5.86, 5.92, 6.01, 6.11, 6.2, 6.27,
          6.41, 6.64, 6.88, 11.3, 11.31, 11.33, 11.35, 11.37, 11.37, 11.34,
          11.29, 11.21, 11.12, 11.02, 10.89, 10.76, 10.63, 10.59, 10.7, 10.87,
          10.96, 10.88, 10.64, 10.32, 9.98, 9.73, 9.6, 9.59, 9.62, 9.59, 9.41,
          9.09, 8.69, 8.29, 8, 7.82, 7.64, 7.48, 7.38, 7.35, 7.32, 7.26, 7.17,
          7.09, 7.02, 7, 7.03, 7.08, 7.15, 7.29, 7.52, 7.75, 7.9, 7.88, 7.68,
          7.36, 7.02, 6.77, 6.68, 6.73, 6.85, 6.93, 6.91, 6.81, 6.68, 6.54,
          6.43, 6.38, 6.35, 6.34, 6.31, 6.22, 6.02, 5.74, 5.5, 5.38, 5.41, 5.49,
          5.6, 5.7, 5.79, 5.85, 5.9, 5.94, 5.98, 6.04, 6.12, 6.21, 6.29, 6.33,
          6.45, 6.66, 6.89, 11.39, 11.4, 11.41, 11.42, 11.42, 11.41, 11.37,
          11.31, 11.23, 11.14, 11.04, 10.92, 10.79, 10.67, 10.62, 10.73, 10.89,
          10.98, 10.9, 10.67, 10.37, 10.05, 9.82, 9.7, 9.68, 9.7, 9.65, 9.47,
          9.16, 8.76, 8.36, 8.04, 7.83, 7.63, 7.45, 7.34, 7.31, 7.28, 7.21,
          7.13, 7.05, 7, 6.99, 7.02, 7.08, 7.15, 7.29, 7.54, 7.79, 7.95, 7.96,
          7.78, 7.48, 7.16, 6.91, 6.81, 6.84, 6.93, 6.98, 6.94, 6.83, 6.69,
          6.55, 6.44, 6.38, 6.36, 6.36, 6.35, 6.29, 6.12, 5.88, 5.67, 5.56,
          5.59, 5.66, 5.76, 5.86, 5.94, 6, 6.05, 6.09, 6.14, 6.19, 6.26, 6.34,
          6.39, 6.41, 6.51, 6.69, 6.9, 11.47, 11.48, 11.48, 11.48, 11.48, 11.45,
          11.4, 11.33, 11.25, 11.16, 11.07, 10.96, 10.84, 10.72, 10.67, 10.76,
          10.92, 10.99, 10.91, 10.71, 10.43, 10.15, 9.93, 9.81, 9.77, 9.75,
          9.68, 9.49, 9.19, 8.8, 8.41, 8.09, 7.86, 7.63, 7.43, 7.31, 7.27, 7.24,
          7.17, 7.09, 7.01, 6.96, 6.96, 7, 7.07, 7.14, 7.29, 7.55, 7.82, 8.01,
          8.03, 7.88, 7.61, 7.31, 7.07, 6.95, 6.94, 6.99, 7, 6.94, 6.83, 6.69,
          6.55, 6.45, 6.38, 6.36, 6.37, 6.37, 6.34, 6.22, 6.03, 5.86, 5.78, 5.8,
          5.86, 5.94, 6.03, 6.1, 6.16, 6.22, 6.27, 6.32, 6.37, 6.44, 6.49, 6.52,
          6.53, 6.59, 6.73, 6.9, 11.54, 11.55, 11.55, 11.55, 11.53, 11.49,
          11.43, 11.35, 11.27, 11.19, 11.1, 11, 10.89, 10.77, 10.72, 10.8,
          10.94, 11.01, 10.93, 10.74, 10.5, 10.26, 10.07, 9.95, 9.86, 9.79,
          9.67, 9.48, 9.19, 8.83, 8.46, 8.14, 7.88, 7.63, 7.42, 7.28, 7.25,
          7.21, 7.14, 7.05, 6.97, 6.92, 6.93, 6.98, 7.05, 7.13, 7.29, 7.56,
          7.85, 8.06, 8.1, 7.98, 7.74, 7.46, 7.23, 7.09, 7.03, 7.02, 6.99, 6.91,
          6.8, 6.68, 6.56, 6.45, 6.38, 6.36, 6.37, 6.38, 6.38, 6.3, 6.18, 6.07,
          6.01, 6.03, 6.07, 6.14, 6.21, 6.28, 6.34, 6.41, 6.47, 6.53, 6.58,
          6.63, 6.66, 6.67, 6.66, 6.69, 6.78, 6.9, 11.6, 11.61, 11.61, 11.61,
          11.59, 11.53, 11.46, 11.37, 11.29, 11.21, 11.13, 11.05, 10.95, 10.84,
          10.77, 10.85, 10.96, 11.02, 10.93, 10.77, 10.57, 10.38, 10.21, 10.09,
          9.95, 9.8, 9.63, 9.43, 9.16, 8.84, 8.5, 8.19, 7.91, 7.64, 7.41, 7.27,
          7.23, 7.19, 7.1, 7, 6.92, 6.88, 6.9, 6.96, 7.04, 7.11, 7.28, 7.57,
          7.88, 8.1, 8.16, 8.07, 7.86, 7.61, 7.39, 7.23, 7.12, 7.04, 6.96, 6.86,
          6.76, 6.66, 6.56, 6.46, 6.39, 6.36, 6.36, 6.38, 6.4, 6.38, 6.33, 6.28,
          6.25, 6.26, 6.29, 6.34, 6.39, 6.45, 6.52, 6.6, 6.68, 6.74, 6.79, 6.83,
          6.84, 6.83, 6.8, 6.79, 6.83, 6.9, 11.64, 11.66, 11.67, 11.66, 11.63,
          11.57, 11.49, 11.39, 11.3, 11.23, 11.16, 11.09, 11, 10.9, 10.83,
          10.88, 10.98, 11.02, 10.94, 10.8, 10.65, 10.49, 10.36, 10.22, 10.03,
          9.81, 9.58, 9.37, 9.12, 8.84, 8.53, 8.23, 7.94, 7.65, 7.41, 7.26,
          7.21, 7.17, 7.07, 6.96, 6.88, 6.84, 6.87, 6.93, 7.02, 7.1, 7.27, 7.57,
          7.9, 8.14, 8.22, 8.15, 7.97, 7.75, 7.54, 7.35, 7.19, 7.05, 6.92, 6.81,
          6.72, 6.64, 6.56, 6.47, 6.39, 6.35, 6.35, 6.38, 6.41, 6.44, 6.46,
          6.47, 6.48, 6.48, 6.49, 6.52, 6.55, 6.61, 6.69, 6.78, 6.88, 6.95,
          6.99, 7.01, 7.01, 6.98, 6.93, 6.89, 6.87, 6.9, 11.68, 11.69, 11.71,
          11.71, 11.67, 11.6, 11.51, 11.41, 11.32, 11.25, 11.19, 11.13, 11.05,
          10.95, 10.88, 10.92, 11, 11.03, 10.94, 10.83, 10.71, 10.6, 10.48,
          10.34, 10.1, 9.81, 9.53, 9.3, 9.08, 8.83, 8.56, 8.27, 7.96, 7.66,
          7.41, 7.25, 7.21, 7.15, 7.05, 6.93, 6.84, 6.81, 6.84, 6.91, 7, 7.09,
          7.27, 7.58, 7.91, 8.16, 8.26, 8.22, 8.07, 7.87, 7.66, 7.46, 7.24,
          7.05, 6.88, 6.75, 6.67, 6.62, 6.56, 6.48, 6.39, 6.35, 6.34, 6.36,
          6.42, 6.49, 6.58, 6.64, 6.67, 6.67, 6.67, 6.67, 6.7, 6.74, 6.83, 6.94,
          7.05, 7.13, 7.17, 7.18, 7.16, 7.12, 7.05, 6.98, 6.92, 6.89, 11.7,
          11.72, 11.74, 11.74, 11.7, 11.62, 11.53, 11.42, 11.33, 11.26, 11.21,
          11.16, 11.09, 10.99, 10.92, 10.95, 11.01, 11.03, 10.95, 10.85, 10.76,
          10.68, 10.58, 10.43, 10.15, 9.8, 9.48, 9.25, 9.04, 8.83, 8.58, 8.29,
          7.98, 7.67, 7.41, 7.25, 7.2, 7.15, 7.03, 6.9, 6.81, 6.78, 6.82, 6.9,
          6.99, 7.07, 7.26, 7.58, 7.92, 8.18, 8.29, 8.26, 8.14, 7.96, 7.76,
          7.54, 7.29, 7.04, 6.84, 6.71, 6.64, 6.6, 6.56, 6.48, 6.4, 6.34, 6.33,
          6.35, 6.42, 6.53, 6.66, 6.77, 6.82, 6.82, 6.8, 6.79, 6.8, 6.85, 6.94,
          7.06, 7.18, 7.26, 7.3, 7.31, 7.28, 7.22, 7.14, 7.05, 6.95, 6.89,
          11.72, 11.74, 11.76, 11.76, 11.72, 11.63, 11.54, 11.43, 11.34, 11.27,
          11.22, 11.18, 11.12, 11.02, 10.94, 10.96, 11.02, 11.03, 10.95, 10.86,
          10.79, 10.73, 10.64, 10.49, 10.18, 9.8, 9.45, 9.21, 9.02, 8.82, 8.59,
          8.31, 7.99, 7.68, 7.41, 7.25, 7.2, 7.14, 7.02, 6.89, 6.79, 6.77, 6.8,
          6.89, 6.98, 7.07, 7.25, 7.58, 7.93, 8.2, 8.31, 8.29, 8.18, 8.01, 7.82,
          7.58, 7.31, 7.04, 6.82, 6.68, 6.61, 6.59, 6.56, 6.49, 6.4, 6.34, 6.32,
          6.35, 6.42, 6.55, 6.71, 6.85, 6.92, 6.91, 6.89, 6.86, 6.87, 6.91, 7,
          7.13, 7.26, 7.35, 7.39, 7.39, 7.35, 7.28, 7.2, 7.09, 6.97, 6.89,
          11.72, 11.74, 11.76, 11.76, 11.72, 11.64, 11.54, 11.43, 11.34, 11.27,
          11.22, 11.18, 11.12, 11.03, 10.95, 10.97, 11.02, 11.03, 10.95, 10.86,
          10.8, 10.74, 10.66, 10.5, 10.19, 9.8, 9.44, 9.2, 9.01, 8.82, 8.59,
          8.32, 7.99, 7.68, 7.41, 7.25, 7.2, 7.14, 7.02, 6.88, 6.79, 6.76, 6.8,
          6.88, 6.98, 7.07, 7.25, 7.58, 7.93, 8.2, 8.31, 8.3, 8.2, 8.03, 7.83,
          7.6, 7.32, 7.04, 6.81, 6.67, 6.6, 6.58, 6.56, 6.49, 6.4, 6.34, 6.32,
          6.34, 6.42, 6.56, 6.73, 6.88, 6.94, 6.93, 6.91, 6.88, 6.89, 6.93,
          7.02, 7.15, 7.28, 7.37, 7.41, 7.41, 7.37, 7.3, 7.22, 7.1, 6.97, 6.89,
          11.74, 11.76, 11.78, 11.78, 11.73, 11.65, 11.56, 11.46, 11.37, 11.3,
          11.25, 11.2, 11.14, 11.04, 10.96, 10.97, 11.01, 11.01, 10.93, 10.84,
          10.78, 10.72, 10.64, 10.48, 10.17, 9.79, 9.44, 9.2, 9.01, 8.82, 8.6,
          8.33, 8, 7.68, 7.41, 7.24, 7.19, 7.14, 7.02, 6.89, 6.8, 6.78, 6.82,
          6.9, 6.99, 7.08, 7.26, 7.57, 7.91, 8.17, 8.28, 8.28, 8.17, 8.01, 7.81,
          7.58, 7.3, 7.03, 6.8, 6.66, 6.6, 6.57, 6.55, 6.48, 6.39, 6.33, 6.31,
          6.34, 6.41, 6.55, 6.73, 6.87, 6.94, 6.93, 6.91, 6.88, 6.88, 6.92,
          7.01, 7.14, 7.26, 7.35, 7.39, 7.38, 7.35, 7.28, 7.2, 7.09, 6.97, 6.89,
          11.8, 11.81, 11.82, 11.81, 11.76, 11.68, 11.6, 11.51, 11.43, 11.36,
          11.3, 11.25, 11.19, 11.08, 10.99, 10.97, 10.99, 10.97, 10.88, 10.79,
          10.72, 10.65, 10.57, 10.42, 10.13, 9.77, 9.43, 9.19, 9.01, 8.83, 8.62,
          8.35, 8.03, 7.69, 7.41, 7.22, 7.17, 7.12, 7.03, 6.93, 6.85, 6.83,
          6.86, 6.93, 7.02, 7.1, 7.26, 7.55, 7.86, 8.09, 8.2, 8.2, 8.11, 7.96,
          7.77, 7.54, 7.27, 7, 6.78, 6.64, 6.58, 6.55, 6.53, 6.46, 6.37, 6.31,
          6.29, 6.32, 6.39, 6.54, 6.72, 6.87, 6.94, 6.93, 6.91, 6.88, 6.88,
          6.91, 6.99, 7.1, 7.21, 7.28, 7.32, 7.32, 7.29, 7.23, 7.15, 7.06, 6.96,
          6.9, 11.87, 11.88, 11.87, 11.85, 11.8, 11.73, 11.66, 11.59, 11.52,
          11.45, 11.39, 11.33, 11.25, 11.13, 11.02, 10.97, 10.95, 10.91, 10.81,
          10.72, 10.64, 10.56, 10.48, 10.34, 10.07, 9.73, 9.41, 9.18, 9.01,
          8.85, 8.65, 8.39, 8.06, 7.71, 7.4, 7.19, 7.13, 7.11, 7.05, 6.98, 6.93,
          6.91, 6.93, 6.99, 7.06, 7.13, 7.28, 7.51, 7.77, 7.98, 8.09, 8.1, 8.02,
          7.88, 7.7, 7.47, 7.21, 6.96, 6.75, 6.61, 6.54, 6.52, 6.49, 6.43, 6.34,
          6.28, 6.26, 6.29, 6.36, 6.51, 6.7, 6.86, 6.94, 6.93, 6.91, 6.88, 6.88,
          6.89, 6.95, 7.03, 7.12, 7.18, 7.22, 7.22, 7.2, 7.15, 7.08, 7.01, 6.94,
          6.91, 11.97, 11.96, 11.94, 11.9, 11.85, 11.79, 11.73, 11.68, 11.62,
          11.56, 11.5, 11.42, 11.33, 11.2, 11.07, 10.97, 10.9, 10.82, 10.72,
          10.62, 10.52, 10.44, 10.36, 10.23, 9.99, 9.69, 9.39, 9.17, 9.01, 8.87,
          8.69, 8.44, 8.1, 7.72, 7.38, 7.15, 7.09, 7.08, 7.06, 7.04, 7.01, 7,
          7.01, 7.05, 7.11, 7.18, 7.29, 7.47, 7.67, 7.84, 7.95, 7.97, 7.91,
          7.79, 7.61, 7.39, 7.15, 6.91, 6.71, 6.57, 6.5, 6.48, 6.45, 6.39, 6.3,
          6.24, 6.22, 6.25, 6.33, 6.49, 6.69, 6.86, 6.94, 6.93, 6.91, 6.88,
          6.86, 6.87, 6.9, 6.95, 7, 7.06, 7.09, 7.1, 7.08, 7.04, 6.99, 6.94,
          6.92, 6.93, 12.06, 12.04, 12, 11.95, 11.89, 11.84, 11.81, 11.78,
          11.74, 11.68, 11.61, 11.52, 11.41, 11.26, 11.1, 10.96, 10.84, 10.72,
          10.61, 10.5, 10.4, 10.3, 10.22, 10.11, 9.91, 9.64, 9.37, 9.16, 9.01,
          8.89, 8.73, 8.49, 8.14, 7.74, 7.37, 7.11, 7.04, 7.06, 7.08, 7.1, 7.11,
          7.1, 7.1, 7.12, 7.17, 7.22, 7.31, 7.43, 7.57, 7.7, 7.8, 7.83, 7.8,
          7.69, 7.52, 7.31, 7.08, 6.86, 6.67, 6.53, 6.46, 6.43, 6.41, 6.34,
          6.26, 6.2, 6.18, 6.21, 6.29, 6.46, 6.67, 6.85, 6.93, 6.93, 6.91, 6.88,
          6.85, 6.83, 6.83, 6.84, 6.87, 6.9, 6.94, 6.95, 6.94, 6.91, 6.88, 6.87,
          6.89, 6.94, 12.13, 12.1, 12.05, 11.99, 11.93, 11.89, 11.87, 11.86,
          11.84, 11.79, 11.71, 11.61, 11.47, 11.31, 11.13, 10.94, 10.76, 10.61,
          10.49, 10.38, 10.26, 10.16, 10.09, 10, 9.82, 9.59, 9.35, 9.15, 9.01,
          8.91, 8.77, 8.53, 8.18, 7.76, 7.35, 7.07, 7, 7.03, 7.1, 7.16, 7.2,
          7.19, 7.19, 7.2, 7.22, 7.27, 7.33, 7.39, 7.47, 7.56, 7.66, 7.7, 7.68,
          7.59, 7.43, 7.22, 7.01, 6.81, 6.63, 6.48, 6.41, 6.38, 6.36, 6.3, 6.21,
          6.16, 6.14, 6.17, 6.26, 6.43, 6.66, 6.85, 6.93, 6.93, 6.9, 6.87, 6.83,
          6.79, 6.75, 6.73, 6.72, 6.73, 6.77, 6.78, 6.79, 6.78, 6.76, 6.78,
          6.85, 6.94, 12.18, 12.14, 12.08, 12.01, 11.94, 11.91, 11.92, 11.93,
          11.92, 11.87, 11.79, 11.67, 11.52, 11.34, 11.13, 10.9, 10.68, 10.5,
          10.37, 10.25, 10.13, 10.03, 9.96, 9.89, 9.74, 9.54, 9.33, 9.14, 9.01,
          8.92, 8.8, 8.57, 8.21, 7.76, 7.34, 7.04, 6.96, 7.01, 7.11, 7.21, 7.27,
          7.28, 7.27, 7.26, 7.27, 7.31, 7.35, 7.36, 7.39, 7.44, 7.54, 7.59,
          7.59, 7.51, 7.35, 7.15, 6.95, 6.76, 6.59, 6.44, 6.37, 6.34, 6.31,
          6.25, 6.17, 6.12, 6.1, 6.14, 6.23, 6.41, 6.65, 6.85, 6.94, 6.93, 6.9,
          6.85, 6.8, 6.73, 6.66, 6.6, 6.56, 6.56, 6.59, 6.61, 6.63, 6.64, 6.64,
          6.7, 6.8, 6.93, 12.19, 12.15, 12.08, 12, 11.94, 11.92, 11.93, 11.96,
          11.97, 11.92, 11.84, 11.71, 11.54, 11.34, 11.11, 10.84, 10.59, 10.38,
          10.25, 10.13, 10.01, 9.91, 9.85, 9.79, 9.67, 9.5, 9.31, 9.12, 9, 8.93,
          8.81, 8.59, 8.22, 7.77, 7.32, 7.01, 6.92, 6.99, 7.11, 7.25, 7.33,
          7.34, 7.32, 7.31, 7.32, 7.35, 7.36, 7.34, 7.33, 7.36, 7.45, 7.52,
          7.52, 7.45, 7.3, 7.1, 6.91, 6.72, 6.55, 6.41, 6.33, 6.3, 6.27, 6.21,
          6.14, 6.09, 6.07, 6.11, 6.21, 6.4, 6.64, 6.85, 6.94, 6.93, 6.9, 6.84,
          6.76, 6.67, 6.56, 6.46, 6.39, 6.38, 6.41, 6.44, 6.47, 6.5, 6.52, 6.61,
          6.75, 6.91, 12.15, 12.11, 12.04, 11.96, 11.9, 11.89, 11.92, 11.96,
          11.97, 11.93, 11.84, 11.7, 11.52, 11.31, 11.05, 10.77, 10.49, 10.27,
          10.14, 10.02, 9.9, 9.81, 9.76, 9.73, 9.63, 9.47, 9.29, 9.12, 9, 8.93,
          8.82, 8.59, 8.23, 7.76, 7.31, 6.99, 6.9, 6.97, 7.11, 7.26, 7.35, 7.37,
          7.36, 7.35, 7.35, 7.37, 7.38, 7.34, 7.31, 7.33, 7.42, 7.48, 7.49,
          7.42, 7.27, 7.07, 6.88, 6.7, 6.53, 6.38, 6.3, 6.26, 6.24, 6.18, 6.11,
          6.06, 6.05, 6.1, 6.2, 6.4, 6.65, 6.86, 6.95, 6.94, 6.89, 6.81, 6.71,
          6.59, 6.46, 6.33, 6.24, 6.21, 6.24, 6.27, 6.32, 6.36, 6.41, 6.52,
          6.69, 6.87, 12.08, 12.04, 11.97, 11.9, 11.85, 11.84, 11.88, 11.92,
          11.94, 11.91, 11.82, 11.67, 11.47, 11.24, 10.98, 10.68, 10.39, 10.17,
          10.04, 9.92, 9.82, 9.73, 9.7, 9.68, 9.59, 9.45, 9.28, 9.11, 9, 8.93,
          8.82, 8.59, 8.22, 7.76, 7.31, 6.99, 6.9, 6.97, 7.11, 7.26, 7.35, 7.38,
          7.37, 7.36, 7.36, 7.38, 7.38, 7.34, 7.31, 7.33, 7.41, 7.47, 7.47,
          7.41, 7.25, 7.06, 6.87, 6.68, 6.51, 6.36, 6.27, 6.25, 6.22, 6.17, 6.1,
          6.05, 6.04, 6.09, 6.19, 6.39, 6.64, 6.85, 6.95, 6.93, 6.88, 6.78,
          6.65, 6.51, 6.35, 6.19, 6.08, 6.05, 6.07, 6.11, 6.17, 6.23, 6.3, 6.44,
          6.63, 6.82, 12, 11.96, 11.9, 11.84, 11.8, 11.8, 11.83, 11.87, 11.89,
          11.86, 11.77, 11.62, 11.41, 11.16, 10.89, 10.58, 10.3, 10.08, 9.96,
          9.85, 9.74, 9.67, 9.64, 9.64, 9.56, 9.43, 9.27, 9.1, 9, 8.93, 8.82,
          8.59, 8.23, 7.77, 7.34, 7.03, 6.95, 7, 7.12, 7.24, 7.33, 7.36, 7.36,
          7.35, 7.35, 7.37, 7.37, 7.34, 7.32, 7.34, 7.42, 7.47, 7.46, 7.39,
          7.23, 7.03, 6.85, 6.67, 6.5, 6.35, 6.27, 6.25, 6.24, 6.19, 6.12, 6.06,
          6.03, 6.07, 6.18, 6.38, 6.61, 6.82, 6.91, 6.89, 6.84, 6.74, 6.59,
          6.42, 6.24, 6.06, 5.94, 5.89, 5.91, 5.96, 6.01, 6.09, 6.18, 6.34,
          6.54, 6.75, 11.91, 11.88, 11.83, 11.78, 11.75, 11.75, 11.78, 11.81,
          11.82, 11.8, 11.71, 11.55, 11.34, 11.08, 10.79, 10.49, 10.22, 10.02,
          9.9, 9.78, 9.68, 9.61, 9.6, 9.6, 9.54, 9.42, 9.26, 9.1, 9, 8.93, 8.83,
          8.6, 8.24, 7.8, 7.39, 7.1, 7.03, 7.06, 7.14, 7.22, 7.28, 7.31, 7.33,
          7.33, 7.33, 7.34, 7.34, 7.33, 7.33, 7.37, 7.45, 7.48, 7.45, 7.36, 7.2,
          7.01, 6.83, 6.67, 6.5, 6.34, 6.28, 6.27, 6.28, 6.24, 6.16, 6.07, 6.02,
          6.04, 6.15, 6.34, 6.56, 6.75, 6.83, 6.82, 6.77, 6.68, 6.53, 6.34,
          6.13, 5.94, 5.8, 5.75, 5.77, 5.8, 5.86, 5.94, 6.05, 6.22, 6.45, 6.66,
          11.81, 11.79, 11.76, 11.72, 11.7, 11.7, 11.71, 11.74, 11.75, 11.73,
          11.64, 11.48, 11.25, 10.98, 10.69, 10.41, 10.16, 9.97, 9.85, 9.74,
          9.63, 9.56, 9.56, 9.58, 9.52, 9.4, 9.25, 9.1, 9, 8.94, 8.84, 8.61,
          8.26, 7.84, 7.46, 7.21, 7.13, 7.14, 7.16, 7.19, 7.23, 7.26, 7.28,
          7.29, 7.29, 7.3, 7.31, 7.32, 7.35, 7.41, 7.48, 7.49, 7.44, 7.33, 7.16,
          6.98, 6.81, 6.66, 6.5, 6.35, 6.29, 6.31, 6.33, 6.31, 6.22, 6.1, 6.02,
          6.01, 6.12, 6.3, 6.5, 6.66, 6.74, 6.73, 6.7, 6.62, 6.47, 6.26, 6.03,
          5.82, 5.68, 5.62, 5.63, 5.66, 5.71, 5.79, 5.92, 6.1, 6.34, 6.57,
          11.71, 11.7, 11.67, 11.65, 11.64, 11.64, 11.65, 11.66, 11.66, 11.65,
          11.56, 11.4, 11.16, 10.88, 10.59, 10.33, 10.11, 9.94, 9.82, 9.71,
          9.59, 9.52, 9.52, 9.56, 9.51, 9.4, 9.25, 9.1, 9.01, 8.96, 8.86, 8.63,
          8.28, 7.9, 7.55, 7.32, 7.26, 7.24, 7.2, 7.17, 7.17, 7.2, 7.23, 7.25,
          7.25, 7.26, 7.27, 7.31, 7.37, 7.44, 7.51, 7.51, 7.43, 7.3, 7.12, 6.94,
          6.79, 6.65, 6.5, 6.35, 6.31, 6.35, 6.4, 6.39, 6.29, 6.14, 6.01, 5.98,
          6.08, 6.25, 6.43, 6.57, 6.63, 6.63, 6.62, 6.56, 6.41, 6.18, 5.94,
          5.72, 5.57, 5.51, 5.51, 5.53, 5.57, 5.65, 5.78, 5.99, 6.24, 6.47,
          11.6, 11.59, 11.58, 11.58, 11.58, 11.58, 11.57, 11.57, 11.57, 11.56,
          11.48, 11.31, 11.07, 10.79, 10.5, 10.25, 10.06, 9.91, 9.81, 9.69,
          9.57, 9.49, 9.5, 9.54, 9.5, 9.39, 9.25, 9.11, 9.02, 8.98, 8.88, 8.66,
          8.32, 7.96, 7.65, 7.45, 7.39, 7.34, 7.25, 7.15, 7.12, 7.15, 7.18,
          7.21, 7.21, 7.21, 7.23, 7.3, 7.39, 7.48, 7.54, 7.52, 7.41, 7.26, 7.07,
          6.9, 6.77, 6.64, 6.51, 6.36, 6.33, 6.39, 6.46, 6.46, 6.36, 6.17, 6.01,
          5.95, 6.05, 6.21, 6.36, 6.48, 6.53, 6.54, 6.54, 6.5, 6.37, 6.12, 5.86,
          5.64, 5.49, 5.42, 5.41, 5.42, 5.44, 5.52, 5.66, 5.88, 6.14, 6.38,
          11.48, 11.48, 11.49, 11.49, 11.5, 11.5, 11.5, 11.48, 11.48, 11.48,
          11.4, 11.23, 10.99, 10.7, 10.42, 10.19, 10.02, 9.9, 9.79, 9.67, 9.55,
          9.47, 9.48, 9.54, 9.5, 9.4, 9.26, 9.12, 9.04, 9, 8.91, 8.7, 8.36,
          8.03, 7.75, 7.57, 7.52, 7.44, 7.3, 7.15, 7.09, 7.12, 7.15, 7.17, 7.18,
          7.17, 7.2, 7.28, 7.4, 7.5, 7.56, 7.52, 7.39, 7.22, 7.03, 6.86, 6.74,
          6.63, 6.5, 6.36, 6.34, 6.43, 6.52, 6.53, 6.42, 6.21, 6, 5.92, 6.03,
          6.17, 6.31, 6.41, 6.45, 6.46, 6.48, 6.46, 6.33, 6.07, 5.8, 5.58, 5.42,
          5.35, 5.33, 5.32, 5.34, 5.41, 5.56, 5.78, 6.04, 6.29, 11.36, 11.37,
          11.38, 11.4, 11.42, 11.42, 11.41, 11.39, 11.39, 11.39, 11.32, 11.16,
          10.92, 10.63, 10.35, 10.14, 9.99, 9.88, 9.78, 9.66, 9.53, 9.45, 9.47,
          9.53, 9.5, 9.4, 9.27, 9.14, 9.07, 9.03, 8.95, 8.74, 8.41, 8.09, 7.84,
          7.68, 7.63, 7.54, 7.36, 7.17, 7.08, 7.11, 7.14, 7.16, 7.17, 7.15,
          7.17, 7.27, 7.4, 7.51, 7.56, 7.5, 7.36, 7.18, 6.98, 6.82, 6.71, 6.61,
          6.49, 6.35, 6.35, 6.45, 6.55, 6.57, 6.46, 6.23, 6, 5.91, 6.01, 6.15,
          6.27, 6.36, 6.39, 6.41, 6.44, 6.43, 6.31, 6.05, 5.76, 5.53, 5.37, 5.3,
          5.28, 5.25, 5.26, 5.32, 5.47, 5.7, 5.97, 6.22, 11.24, 11.25, 11.27,
          11.3, 11.32, 11.33, 11.32, 11.3, 11.3, 11.31, 11.25, 11.09, 10.86,
          10.58, 10.3, 10.1, 9.97, 9.86, 9.77, 9.64, 9.52, 9.44, 9.47, 9.53,
          9.51, 9.42, 9.29, 9.16, 9.1, 9.07, 8.99, 8.79, 8.46, 8.16, 7.91, 7.76,
          7.72, 7.62, 7.42, 7.21, 7.11, 7.13, 7.15, 7.17, 7.17, 7.14, 7.16,
          7.26, 7.39, 7.5, 7.54, 7.48, 7.33, 7.13, 6.94, 6.78, 6.67, 6.58, 6.47,
          6.33, 6.34, 6.45, 6.56, 6.59, 6.48, 6.24, 6.01, 5.91, 6.01, 6.15,
          6.27, 6.35, 6.38, 6.4, 6.44, 6.43, 6.31, 6.04, 5.75, 5.51, 5.35, 5.27,
          5.24, 5.21, 5.2, 5.26, 5.41, 5.64, 5.91, 6.16, 11.11, 11.12, 11.15,
          11.18, 11.21, 11.22, 11.22, 11.21, 11.22, 11.24, 11.19, 11.04, 10.81,
          10.54, 10.27, 10.07, 9.94, 9.84, 9.75, 9.63, 9.5, 9.43, 9.46, 9.53,
          9.52, 9.43, 9.31, 9.19, 9.13, 9.11, 9.03, 8.83, 8.51, 8.21, 7.97,
          7.83, 7.78, 7.68, 7.48, 7.27, 7.16, 7.17, 7.19, 7.2, 7.19, 7.16, 7.17,
          7.25, 7.37, 7.47, 7.51, 7.44, 7.29, 7.09, 6.9, 6.74, 6.64, 6.55, 6.43,
          6.3, 6.31, 6.42, 6.54, 6.58, 6.47, 6.24, 6.02, 5.93, 6.03, 6.17, 6.29,
          6.37, 6.4, 6.42, 6.45, 6.44, 6.32, 6.04, 5.75, 5.51, 5.34, 5.25, 5.22,
          5.19, 5.18, 5.24, 5.38, 5.6, 5.87, 6.12, 10.92, 10.95, 10.99, 11.04,
          11.08, 11.11, 11.12, 11.13, 11.15, 11.18, 11.12, 10.98, 10.76, 10.49,
          10.22, 10.04, 9.91, 9.82, 9.72, 9.6, 9.47, 9.39, 9.42, 9.49, 9.49,
          9.43, 9.33, 9.22, 9.16, 9.12, 9.03, 8.83, 8.52, 8.23, 8, 7.85, 7.81,
          7.72, 7.54, 7.35, 7.24, 7.25, 7.26, 7.27, 7.25, 7.21, 7.2, 7.26, 7.35,
          7.44, 7.46, 7.4, 7.25, 7.05, 6.86, 6.7, 6.6, 6.5, 6.39, 6.26, 6.27,
          6.37, 6.48, 6.51, 6.41, 6.23, 6.04, 5.98, 6.09, 6.23, 6.34, 6.42,
          6.45, 6.46, 6.48, 6.44, 6.3, 6.02, 5.74, 5.5, 5.34, 5.25, 5.21, 5.18,
          5.17, 5.23, 5.37, 5.58, 5.83, 6.06, 10.68, 10.73, 10.8, 10.88, 10.94,
          10.98, 11.01, 11.04, 11.07, 11.11, 11.06, 10.92, 10.69, 10.43, 10.18,
          10, 9.87, 9.78, 9.69, 9.56, 9.42, 9.33, 9.34, 9.42, 9.45, 9.41, 9.34,
          9.24, 9.17, 9.1, 8.99, 8.77, 8.48, 8.2, 7.99, 7.85, 7.81, 7.74, 7.59,
          7.43, 7.34, 7.34, 7.36, 7.36, 7.35, 7.3, 7.27, 7.29, 7.34, 7.39, 7.41,
          7.34, 7.2, 7.02, 6.83, 6.67, 6.56, 6.46, 6.35, 6.22, 6.21, 6.28, 6.37,
          6.39, 6.33, 6.2, 6.08, 6.06, 6.18, 6.31, 6.41, 6.48, 6.51, 6.51, 6.5,
          6.43, 6.26, 5.99, 5.71, 5.49, 5.33, 5.25, 5.21, 5.18, 5.18, 5.23,
          5.37, 5.56, 5.78, 5.99, 10.41, 10.48, 10.59, 10.7, 10.79, 10.85, 10.9,
          10.95, 11, 11.05, 11, 10.85, 10.62, 10.36, 10.12, 9.95, 9.84, 9.75,
          9.66, 9.52, 9.36, 9.25, 9.25, 9.32, 9.38, 9.38, 9.34, 9.26, 9.16,
          9.06, 8.9, 8.68, 8.41, 8.15, 7.95, 7.82, 7.79, 7.74, 7.63, 7.52, 7.46,
          7.45, 7.47, 7.48, 7.47, 7.41, 7.35, 7.32, 7.32, 7.34, 7.35, 7.29,
          7.16, 6.98, 6.8, 6.64, 6.52, 6.41, 6.29, 6.17, 6.14, 6.18, 6.24, 6.25,
          6.21, 6.16, 6.13, 6.17, 6.28, 6.4, 6.5, 6.56, 6.58, 6.57, 6.52, 6.4,
          6.21, 5.94, 5.68, 5.48, 5.34, 5.25, 5.21, 5.19, 5.2, 5.26, 5.38, 5.55,
          5.73, 5.91, 10.11, 10.2, 10.36, 10.52, 10.63, 10.71, 10.79, 10.86,
          10.93, 10.99, 10.94, 10.78, 10.55, 10.3, 10.07, 9.91, 9.8, 9.71, 9.63,
          9.48, 9.3, 9.16, 9.14, 9.21, 9.29, 9.34, 9.33, 9.26, 9.14, 8.99, 8.8,
          8.57, 8.32, 8.09, 7.9, 7.79, 7.76, 7.73, 7.68, 7.62, 7.58, 7.57, 7.59,
          7.6, 7.6, 7.53, 7.45, 7.37, 7.31, 7.29, 7.29, 7.23, 7.11, 6.95, 6.77,
          6.61, 6.48, 6.36, 6.24, 6.12, 6.06, 6.07, 6.09, 6.09, 6.08, 6.12,
          6.18, 6.28, 6.4, 6.5, 6.58, 6.63, 6.65, 6.62, 6.53, 6.37, 6.14, 5.88,
          5.65, 5.47, 5.35, 5.27, 5.23, 5.21, 5.23, 5.29, 5.4, 5.54, 5.68, 5.82,
          9.8, 9.92, 10.12, 10.32, 10.47, 10.57, 10.67, 10.77, 10.86, 10.93,
          10.88, 10.72, 10.48, 10.23, 10.02, 9.87, 9.77, 9.69, 9.6, 9.44, 9.24,
          9.07, 9.02, 9.08, 9.18, 9.27, 9.3, 9.24, 9.11, 8.91, 8.68, 8.45, 8.22,
          8.02, 7.86, 7.76, 7.73, 7.73, 7.73, 7.73, 7.71, 7.69, 7.71, 7.73,
          7.73, 7.66, 7.54, 7.41, 7.3, 7.24, 7.23, 7.17, 7.06, 6.92, 6.74, 6.58,
          6.43, 6.31, 6.19, 6.07, 5.99, 5.96, 5.94, 5.93, 5.96, 6.07, 6.23,
          6.39, 6.5, 6.59, 6.65, 6.69, 6.7, 6.66, 6.53, 6.32, 6.07, 5.82, 5.61,
          5.46, 5.36, 5.3, 5.25, 5.24, 5.27, 5.33, 5.43, 5.53, 5.63, 5.73, 9.5,
          9.64, 9.88, 10.13, 10.3, 10.43, 10.56, 10.68, 10.79, 10.87, 10.82,
          10.65, 10.42, 10.18, 9.97, 9.83, 9.74, 9.67, 9.58, 9.41, 9.18, 8.99,
          8.91, 8.96, 9.07, 9.19, 9.25, 9.21, 9.05, 8.82, 8.57, 8.33, 8.14,
          7.96, 7.83, 7.74, 7.72, 7.74, 7.79, 7.83, 7.83, 7.8, 7.82, 7.85, 7.84,
          7.77, 7.63, 7.45, 7.28, 7.19, 7.17, 7.12, 7.02, 6.88, 6.71, 6.54,
          6.39, 6.26, 6.14, 6.02, 5.93, 5.86, 5.81, 5.79, 5.85, 6.04, 6.28,
          6.48, 6.58, 6.65, 6.7, 6.72, 6.73, 6.68, 6.51, 6.26, 6, 5.76, 5.59,
          5.47, 5.39, 5.33, 5.29, 5.28, 5.31, 5.37, 5.46, 5.53, 5.58, 5.64,
          9.21, 9.38, 9.66, 9.94, 10.14, 10.29, 10.44, 10.59, 10.72, 10.81,
          10.76, 10.59, 10.36, 10.13, 9.94, 9.81, 9.73, 9.66, 9.58, 9.4, 9.15,
          8.92, 8.81, 8.85, 8.96, 9.1, 9.18, 9.14, 8.98, 8.73, 8.46, 8.24, 8.08,
          7.93, 7.82, 7.75, 7.74, 7.78, 7.85, 7.92, 7.94, 7.9, 7.91, 7.94, 7.94,
          7.86, 7.7, 7.48, 7.27, 7.15, 7.12, 7.06, 6.97, 6.84, 6.68, 6.51, 6.35,
          6.22, 6.1, 5.98, 5.88, 5.79, 5.72, 5.69, 5.77, 6.01, 6.3, 6.54, 6.63,
          6.68, 6.7, 6.71, 6.72, 6.66, 6.47, 6.2, 5.93, 5.72, 5.58, 5.49, 5.43,
          5.38, 5.33, 5.33, 5.36, 5.41, 5.48, 5.52, 5.54, 5.57, 8.96, 9.15,
          9.45, 9.76, 9.98, 10.15, 10.33, 10.5, 10.64, 10.74, 10.7, 10.54,
          10.31, 10.09, 9.92, 9.81, 9.73, 9.67, 9.59, 9.4, 9.13, 8.87, 8.74,
          8.75, 8.86, 9, 9.08, 9.05, 8.89, 8.64, 8.38, 8.18, 8.05, 7.94, 7.86,
          7.8, 7.79, 7.84, 7.93, 8.01, 8.03, 7.99, 7.99, 8.01, 8, 7.92, 7.74,
          7.5, 7.26, 7.12, 7.07, 7.02, 6.93, 6.8, 6.64, 6.47, 6.31, 6.18, 6.06,
          5.96, 5.85, 5.75, 5.67, 5.64, 5.74, 6, 6.32, 6.56, 6.63, 6.66, 6.67,
          6.66, 6.66, 6.6, 6.41, 6.14, 5.88, 5.7, 5.58, 5.52, 5.48, 5.44, 5.39,
          5.38, 5.4, 5.44, 5.49, 5.51, 5.5, 5.51, 8.76, 8.95, 9.26, 9.59, 9.83,
          10.02, 10.22, 10.41, 10.56, 10.67, 10.63, 10.48, 10.28, 10.07, 9.92,
          9.81, 9.75, 9.69, 9.62, 9.42, 9.13, 8.85, 8.69, 8.67, 8.76, 8.89,
          8.97, 8.94, 8.79, 8.56, 8.33, 8.16, 8.07, 7.99, 7.93, 7.89, 7.88,
          7.93, 8.02, 8.09, 8.1, 8.04, 8.03, 8.05, 8.03, 7.94, 7.75, 7.5, 7.25,
          7.09, 7.04, 6.98, 6.88, 6.75, 6.59, 6.43, 6.28, 6.15, 6.04, 5.94,
          5.84, 5.75, 5.68, 5.65, 5.75, 6.01, 6.31, 6.54, 6.59, 6.6, 6.58, 6.57,
          6.56, 6.5, 6.32, 6.07, 5.84, 5.69, 5.6, 5.57, 5.55, 5.51, 5.45, 5.43,
          5.44, 5.46, 5.49, 5.49, 5.47, 5.46, 8.59, 8.78, 9.08, 9.41, 9.67,
          9.88, 10.1, 10.31, 10.48, 10.59, 10.57, 10.44, 10.25, 10.07, 9.92,
          9.82, 9.76, 9.7, 9.63, 9.43, 9.13, 8.85, 8.66, 8.61, 8.67, 8.78, 8.84,
          8.81, 8.69, 8.5, 8.3, 8.17, 8.12, 8.08, 8.04, 8.02, 8.02, 8.05, 8.12,
          8.18, 8.17, 8.1, 8.06, 8.05, 8.01, 7.91, 7.72, 7.47, 7.22, 7.06, 7.01,
          6.94, 6.84, 6.71, 6.55, 6.39, 6.26, 6.15, 6.05, 5.97, 5.88, 5.8, 5.74,
          5.72, 5.81, 6.04, 6.32, 6.51, 6.54, 6.52, 6.48, 6.44, 6.42, 6.38,
          6.21, 6, 5.8, 5.68, 5.63, 5.62, 5.62, 5.58, 5.53, 5.49, 5.47, 5.47,
          5.48, 5.46, 5.42, 5.41, 8.48, 8.64, 8.92, 9.23, 9.49, 9.72, 9.97,
          10.2, 10.39, 10.5, 10.5, 10.4, 10.24, 10.07, 9.93, 9.83, 9.75, 9.69,
          9.61, 9.42, 9.14, 8.85, 8.65, 8.57, 8.6, 8.67, 8.72, 8.69, 8.59, 8.45,
          8.31, 8.23, 8.2, 8.19, 8.19, 8.19, 8.19, 8.21, 8.25, 8.27, 8.23, 8.14,
          8.08, 8.03, 7.96, 7.85, 7.66, 7.42, 7.18, 7.03, 6.97, 6.9, 6.8, 6.67,
          6.52, 6.37, 6.26, 6.18, 6.1, 6.03, 5.95, 5.89, 5.84, 5.83, 5.91, 6.11,
          6.33, 6.48, 6.48, 6.43, 6.36, 6.29, 6.26, 6.22, 6.09, 5.92, 5.76,
          5.67, 5.65, 5.67, 5.69, 5.67, 5.6, 5.54, 5.5, 5.47, 5.46, 5.42, 5.37,
          5.35, 8.4, 8.54, 8.77, 9.05, 9.31, 9.56, 9.83, 10.08, 10.29, 10.42,
          10.44, 10.36, 10.23, 10.08, 9.95, 9.83, 9.74, 9.66, 9.58, 9.41, 9.14,
          8.86, 8.64, 8.54, 8.54, 8.58, 8.6, 8.58, 8.5, 8.41, 8.34, 8.3, 8.31,
          8.34, 8.36, 8.38, 8.38, 8.39, 8.38, 8.36, 8.29, 8.19, 8.09, 7.99,
          7.88, 7.75, 7.57, 7.35, 7.13, 6.99, 6.92, 6.85, 6.76, 6.64, 6.49,
          6.35, 6.27, 6.23, 6.18, 6.12, 6.06, 6.02, 5.99, 5.99, 6.05, 6.2, 6.36,
          6.45, 6.43, 6.34, 6.23, 6.13, 6.09, 6.06, 5.96, 5.83, 5.72, 5.66,
          5.68, 5.73, 5.77, 5.75, 5.68, 5.6, 5.52, 5.46, 5.43, 5.38, 5.32, 5.29,
          8.35, 8.45, 8.64, 8.87, 9.12, 9.39, 9.69, 9.97, 10.19, 10.33, 10.37,
          10.32, 10.22, 10.1, 9.97, 9.84, 9.71, 9.62, 9.54, 9.38, 9.13, 8.87,
          8.65, 8.53, 8.48, 8.49, 8.5, 8.47, 8.43, 8.39, 8.38, 8.39, 8.44, 8.49,
          8.54, 8.58, 8.59, 8.57, 8.52, 8.44, 8.34, 8.22, 8.08, 7.93, 7.78,
          7.63, 7.46, 7.26, 7.08, 6.94, 6.87, 6.81, 6.72, 6.61, 6.46, 6.34, 6.3,
          6.3, 6.28, 6.23, 6.19, 6.17, 6.16, 6.17, 6.21, 6.3, 6.39, 6.43, 6.38,
          6.26, 6.11, 5.97, 5.91, 5.89, 5.83, 5.75, 5.68, 5.66, 5.7, 5.78, 5.84,
          5.83, 5.75, 5.65, 5.53, 5.44, 5.39, 5.33, 5.26, 5.23, 8.32, 8.39,
          8.52, 8.71, 8.95, 9.23, 9.55, 9.86, 10.1, 10.24, 10.3, 10.29, 10.21,
          10.11, 9.98, 9.83, 9.68, 9.57, 9.49, 9.34, 9.12, 8.88, 8.66, 8.51,
          8.44, 8.41, 8.4, 8.37, 8.36, 8.38, 8.43, 8.49, 8.56, 8.64, 8.72, 8.77,
          8.78, 8.74, 8.64, 8.52, 8.39, 8.25, 8.07, 7.87, 7.67, 7.51, 7.35,
          7.18, 7.02, 6.9, 6.83, 6.77, 6.69, 6.59, 6.44, 6.34, 6.33, 6.37, 6.39,
          6.35, 6.32, 6.32, 6.33, 6.35, 6.38, 6.41, 6.43, 6.41, 6.34, 6.19,
          5.99, 5.83, 5.75, 5.74, 5.71, 5.67, 5.65, 5.65, 5.72, 5.83, 5.91,
          5.91, 5.83, 5.69, 5.55, 5.43, 5.36, 5.29, 5.21, 5.18, 8.3, 8.33, 8.41,
          8.55, 8.78, 9.08, 9.42, 9.75, 10.01, 10.16, 10.23, 10.25, 10.2, 10.11,
          9.99, 9.82, 9.64, 9.51, 9.43, 9.3, 9.11, 8.88, 8.67, 8.5, 8.4, 8.35,
          8.31, 8.28, 8.3, 8.37, 8.47, 8.57, 8.67, 8.77, 8.87, 8.93, 8.95, 8.89,
          8.75, 8.58, 8.42, 8.27, 8.05, 7.81, 7.57, 7.39, 7.24, 7.1, 6.97, 6.86,
          6.79, 6.74, 6.67, 6.57, 6.43, 6.34, 6.37, 6.45, 6.49, 6.46, 6.45,
          6.46, 6.49, 6.52, 6.53, 6.51, 6.47, 6.4, 6.31, 6.13, 5.9, 5.7, 5.61,
          5.61, 5.61, 5.62, 5.63, 5.66, 5.74, 5.87, 5.97, 5.99, 5.89, 5.74,
          5.57, 5.42, 5.34, 5.26, 5.18, 5.14, 8.27, 8.27, 8.31, 8.42, 8.64,
          8.96, 9.31, 9.65, 9.92, 10.08, 10.17, 10.2, 10.18, 10.1, 9.98, 9.79,
          9.6, 9.45, 9.37, 9.26, 9.08, 8.88, 8.67, 8.49, 8.37, 8.29, 8.25, 8.22,
          8.26, 8.37, 8.51, 8.64, 8.75, 8.87, 8.98, 9.06, 9.08, 9, 8.83, 8.62,
          8.44, 8.28, 8.04, 7.75, 7.49, 7.3, 7.16, 7.03, 6.92, 6.84, 6.77, 6.71,
          6.65, 6.56, 6.42, 6.34, 6.4, 6.51, 6.57, 6.55, 6.55, 6.58, 6.62, 6.66,
          6.65, 6.6, 6.51, 6.4, 6.29, 6.1, 5.84, 5.62, 5.51, 5.52, 5.54, 5.58,
          5.62, 5.66, 5.77, 5.91, 6.03, 6.05, 5.95, 5.78, 5.59, 5.43, 5.34,
          5.25, 5.17, 5.13, 8.22, 8.21, 8.22, 8.32, 8.53, 8.85, 9.22, 9.57,
          9.84, 10.01, 10.11, 10.15, 10.14, 10.08, 9.95, 9.76, 9.56, 9.4, 9.32,
          9.22, 9.06, 8.86, 8.66, 8.47, 8.34, 8.25, 8.2, 8.17, 8.22, 8.36, 8.52,
          8.67, 8.79, 8.92, 9.04, 9.13, 9.15, 9.06, 8.87, 8.64, 8.45, 8.28,
          8.02, 7.72, 7.44, 7.24, 7.11, 6.99, 6.9, 6.82, 6.75, 6.7, 6.64, 6.56,
          6.42, 6.35, 6.42, 6.55, 6.63, 6.61, 6.62, 6.66, 6.71, 6.75, 6.74,
          6.66, 6.54, 6.41, 6.29, 6.08, 5.81, 5.57, 5.46, 5.47, 5.51, 5.57,
          5.63, 5.68, 5.79, 5.95, 6.08, 6.1, 6, 5.83, 5.62, 5.44, 5.35, 5.27,
          5.18, 5.14, 8.16, 8.14, 8.15, 8.24, 8.45, 8.77, 9.14, 9.5, 9.78, 9.94,
          10.04, 10.09, 10.09, 10.03, 9.9, 9.71, 9.51, 9.35, 9.28, 9.17, 9.02,
          8.83, 8.63, 8.45, 8.31, 8.22, 8.17, 8.14, 8.2, 8.34, 8.52, 8.67, 8.79,
          8.92, 9.05, 9.14, 9.16, 9.07, 8.87, 8.64, 8.44, 8.27, 8.01, 7.7, 7.42,
          7.22, 7.09, 6.98, 6.89, 6.81, 6.74, 6.69, 6.64, 6.56, 6.43, 6.36,
          6.44, 6.57, 6.65, 6.64, 6.65, 6.69, 6.75, 6.79, 6.78, 6.69, 6.56,
          6.43, 6.31, 6.1, 5.82, 5.58, 5.47, 5.48, 5.52, 5.58, 5.65, 5.7, 5.82,
          5.98, 6.11, 6.14, 6.04, 5.86, 5.66, 5.48, 5.39, 5.31, 5.22, 5.19,
          8.07, 8.05, 8.07, 8.16, 8.37, 8.7, 9.07, 9.42, 9.7, 9.87, 9.97, 10.02,
          10.01, 9.95, 9.83, 9.64, 9.44, 9.29, 9.22, 9.13, 8.99, 8.81, 8.62,
          8.44, 8.3, 8.21, 8.15, 8.13, 8.18, 8.32, 8.48, 8.64, 8.76, 8.89, 9.02,
          9.1, 9.12, 9.03, 8.84, 8.61, 8.41, 8.25, 7.99, 7.69, 7.41, 7.22, 7.09,
          6.98, 6.89, 6.82, 6.75, 6.71, 6.67, 6.6, 6.47, 6.4, 6.48, 6.6, 6.68,
          6.66, 6.66, 6.69, 6.74, 6.78, 6.77, 6.68, 6.56, 6.43, 6.31, 6.1, 5.83,
          5.59, 5.48, 5.5, 5.54, 5.61, 5.67, 5.73, 5.84, 6, 6.12, 6.15, 6.05,
          5.89, 5.69, 5.53, 5.45, 5.37, 5.28, 5.25, 7.95, 7.94, 7.97, 8.07,
          8.29, 8.61, 8.98, 9.34, 9.62, 9.79, 9.88, 9.92, 9.91, 9.85, 9.73,
          9.55, 9.35, 9.21, 9.14, 9.06, 8.96, 8.82, 8.64, 8.46, 8.32, 8.21,
          8.15, 8.12, 8.16, 8.28, 8.43, 8.58, 8.7, 8.83, 8.95, 9.03, 9.05, 8.97,
          8.79, 8.57, 8.38, 8.21, 7.97, 7.68, 7.42, 7.23, 7.1, 6.99, 6.9, 6.83,
          6.77, 6.76, 6.75, 6.7, 6.58, 6.51, 6.56, 6.66, 6.72, 6.69, 6.68, 6.68,
          6.7, 6.72, 6.71, 6.64, 6.52, 6.4, 6.29, 6.08, 5.82, 5.59, 5.49, 5.5,
          5.55, 5.62, 5.69, 5.74, 5.85, 5.99, 6.1, 6.12, 6.03, 5.89, 5.73, 5.6,
          5.52, 5.44, 5.36, 5.32, 7.81, 7.82, 7.86, 7.98, 8.2, 8.51, 8.88, 9.25,
          9.53, 9.7, 9.78, 9.8, 9.78, 9.71, 9.61, 9.43, 9.24, 9.1, 9.04, 8.99,
          8.93, 8.83, 8.68, 8.51, 8.35, 8.23, 8.15, 8.12, 8.15, 8.24, 8.37, 8.5,
          8.63, 8.76, 8.87, 8.94, 8.96, 8.88, 8.72, 8.51, 8.33, 8.16, 7.93,
          7.67, 7.43, 7.26, 7.12, 7.01, 6.92, 6.85, 6.81, 6.82, 6.86, 6.85,
          6.75, 6.66, 6.68, 6.75, 6.78, 6.74, 6.69, 6.65, 6.62, 6.63, 6.63,
          6.56, 6.46, 6.34, 6.23, 6.04, 5.79, 5.57, 5.48, 5.49, 5.55, 5.63, 5.7,
          5.75, 5.84, 5.96, 6.05, 6.06, 5.98, 5.88, 5.76, 5.67, 5.61, 5.53,
          5.44, 5.4, 7.65, 7.68, 7.75, 7.88, 8.1, 8.41, 8.78, 9.14, 9.43, 9.59,
          9.67, 9.67, 9.63, 9.56, 9.46, 9.29, 9.11, 8.98, 8.92, 8.91, 8.9, 8.86,
          8.74, 8.57, 8.4, 8.25, 8.16, 8.12, 8.14, 8.2, 8.29, 8.42, 8.55, 8.68,
          8.78, 8.84, 8.85, 8.79, 8.64, 8.45, 8.28, 8.11, 7.9, 7.67, 7.45, 7.29,
          7.16, 7.04, 6.95, 6.89, 6.86, 6.91, 7, 7.03, 6.95, 6.85, 6.83, 6.86,
          6.86, 6.79, 6.7, 6.6, 6.53, 6.52, 6.51, 6.46, 6.37, 6.27, 6.16, 5.98,
          5.75, 5.55, 5.46, 5.47, 5.54, 5.63, 5.71, 5.76, 5.83, 5.91, 5.97,
          5.97, 5.91, 5.85, 5.79, 5.74, 5.7, 5.62, 5.53, 5.48, 7.5, 7.54, 7.63,
          7.78, 8, 8.3, 8.67, 9.03, 9.32, 9.48, 9.54, 9.52, 9.46, 9.4, 9.3,
          9.15, 8.98, 8.85, 8.79, 8.82, 8.87, 8.88, 8.8, 8.63, 8.45, 8.28, 8.17,
          8.13, 8.13, 8.15, 8.22, 8.33, 8.47, 8.6, 8.69, 8.74, 8.75, 8.69, 8.57,
          8.4, 8.23, 8.06, 7.87, 7.67, 7.48, 7.32, 7.19, 7.08, 6.99, 6.93, 6.92,
          7.01, 7.15, 7.24, 7.17, 7.06, 7, 6.98, 6.94, 6.86, 6.72, 6.56, 6.43,
          6.39, 6.39, 6.35, 6.27, 6.18, 6.08, 5.91, 5.69, 5.51, 5.43, 5.45,
          5.52, 5.62, 5.7, 5.75, 5.8, 5.85, 5.88, 5.87, 5.82, 5.81, 5.81, 5.8,
          5.78, 5.71, 5.62, 5.56, 7.36, 7.42, 7.52, 7.69, 7.9, 8.19, 8.55, 8.91,
          9.2, 9.36, 9.4, 9.37, 9.3, 9.23, 9.15, 9, 8.84, 8.72, 8.67, 8.72,
          8.83, 8.9, 8.86, 8.69, 8.5, 8.31, 8.18, 8.14, 8.12, 8.12, 8.16, 8.26,
          8.41, 8.53, 8.62, 8.66, 8.67, 8.62, 8.51, 8.36, 8.19, 8.02, 7.85,
          7.67, 7.51, 7.37, 7.24, 7.13, 7.04, 6.99, 6.99, 7.12, 7.32, 7.45, 7.4,
          7.27, 7.18, 7.11, 7.03, 6.92, 6.74, 6.51, 6.34, 6.27, 6.27, 6.23,
          6.17, 6.09, 6, 5.84, 5.64, 5.47, 5.39, 5.42, 5.5, 5.6, 5.69, 5.73,
          5.76, 5.78, 5.79, 5.76, 5.73, 5.75, 5.81, 5.86, 5.86, 5.79, 5.7, 5.64,
          7.25, 7.31, 7.43, 7.6, 7.81, 8.08, 8.43, 8.79, 9.07, 9.23, 9.26, 9.21,
          9.13, 9.06, 8.99, 8.86, 8.71, 8.59, 8.55, 8.63, 8.79, 8.91, 8.89,
          8.74, 8.53, 8.33, 8.19, 8.14, 8.11, 8.09, 8.11, 8.21, 8.37, 8.5, 8.58,
          8.62, 8.63, 8.58, 8.49, 8.34, 8.18, 8.01, 7.84, 7.68, 7.54, 7.41,
          7.28, 7.17, 7.09, 7.05, 7.07, 7.24, 7.48, 7.65, 7.62, 7.48, 7.35,
          7.24, 7.12, 6.99, 6.76, 6.48, 6.25, 6.16, 6.16, 6.13, 6.08, 6.01,
          5.92, 5.77, 5.58, 5.43, 5.36, 5.39, 5.47, 5.58, 5.67, 5.7, 5.71, 5.71,
          5.69, 5.65, 5.63, 5.69, 5.8, 5.89, 5.91, 5.86, 5.76, 5.7, 7.16, 7.23,
          7.36, 7.52, 7.72, 7.97, 8.31, 8.66, 8.94, 9.09, 9.12, 9.06, 8.98,
          8.91, 8.85, 8.73, 8.59, 8.48, 8.44, 8.54, 8.73, 8.89, 8.9, 8.75, 8.55,
          8.35, 8.2, 8.15, 8.11, 8.08, 8.09, 8.2, 8.37, 8.5, 8.58, 8.62, 8.63,
          8.59, 8.5, 8.36, 8.19, 8.01, 7.85, 7.7, 7.57, 7.45, 7.33, 7.23, 7.15,
          7.12, 7.16, 7.36, 7.64, 7.83, 7.81, 7.66, 7.51, 7.36, 7.21, 7.05,
          6.78, 6.46, 6.2, 6.09, 6.08, 6.06, 6.01, 5.95, 5.86, 5.71, 5.54, 5.39,
          5.32, 5.35, 5.44, 5.55, 5.63, 5.66, 5.65, 5.63, 5.59, 5.55, 5.54,
          5.63, 5.78, 5.9, 5.94, 5.89, 5.8, 5.74, 7.12, 7.18, 7.3, 7.46, 7.64,
          7.88, 8.2, 8.54, 8.81, 8.95, 8.98, 8.92, 8.84, 8.78, 8.73, 8.61, 8.48,
          8.38, 8.34, 8.46, 8.67, 8.85, 8.88, 8.74, 8.55, 8.34, 8.2, 8.15, 8.11,
          8.08, 8.1, 8.21, 8.4, 8.54, 8.63, 8.67, 8.68, 8.64, 8.55, 8.41, 8.23,
          8.04, 7.88, 7.73, 7.61, 7.49, 7.37, 7.28, 7.22, 7.2, 7.25, 7.47, 7.77,
          7.98, 7.96, 7.81, 7.64, 7.47, 7.3, 7.11, 6.82, 6.46, 6.17, 6.05, 6.03,
          6.01, 5.96, 5.9, 5.81, 5.67, 5.5, 5.35, 5.29, 5.32, 5.4, 5.51, 5.59,
          5.6, 5.59, 5.55, 5.51, 5.46, 5.46, 5.57, 5.73, 5.88, 5.94, 5.9, 5.82,
          5.77, 7.1, 7.16, 7.27, 7.42, 7.58, 7.79, 8.1, 8.41, 8.67, 8.81, 8.83,
          8.79, 8.72, 8.67, 8.63, 8.52, 8.4, 8.3, 8.27, 8.38, 8.59, 8.78, 8.82,
          8.7, 8.52, 8.33, 8.19, 8.14, 8.12, 8.1, 8.13, 8.27, 8.47, 8.62, 8.72,
          8.78, 8.79, 8.75, 8.65, 8.5, 8.31, 8.11, 7.94, 7.79, 7.65, 7.53, 7.43,
          7.34, 7.29, 7.28, 7.35, 7.58, 7.88, 8.09, 8.08, 7.92, 7.75, 7.57,
          7.37, 7.17, 6.85, 6.48, 6.17, 6.04, 6.01, 5.98, 5.94, 5.88, 5.78,
          5.64, 5.47, 5.33, 5.26, 5.29, 5.37, 5.47, 5.54, 5.55, 5.53, 5.49,
          5.44, 5.4, 5.4, 5.51, 5.68, 5.83, 5.91, 5.89, 5.82, 5.78, 7.09, 7.14,
          7.25, 7.38, 7.53, 7.72, 7.99, 8.28, 8.52, 8.65, 8.69, 8.67, 8.62, 8.6,
          8.56, 8.46, 8.33, 8.23, 8.2, 8.31, 8.51, 8.69, 8.73, 8.63, 8.47, 8.3,
          8.18, 8.14, 8.12, 8.13, 8.2, 8.36, 8.57, 8.75, 8.86, 8.93, 8.94, 8.9,
          8.79, 8.64, 8.44, 8.23, 8.04, 7.87, 7.73, 7.61, 7.51, 7.42, 7.37,
          7.37, 7.45, 7.68, 7.97, 8.17, 8.15, 8, 7.83, 7.64, 7.43, 7.2, 6.87,
          6.49, 6.18, 6.03, 6, 5.97, 5.94, 5.88, 5.79, 5.64, 5.45, 5.3, 5.23,
          5.26, 5.35, 5.45, 5.52, 5.52, 5.49, 5.44, 5.4, 5.35, 5.36, 5.46, 5.62,
          5.77, 5.86, 5.86, 5.81, 5.78, 7.07, 7.13, 7.24, 7.37, 7.5, 7.66, 7.9,
          8.15, 8.36, 8.49, 8.55, 8.56, 8.56, 8.55, 8.52, 8.42, 8.29, 8.19,
          8.16, 8.25, 8.43, 8.59, 8.63, 8.54, 8.4, 8.26, 8.16, 8.13, 8.13, 8.18,
          8.29, 8.48, 8.71, 8.9, 9.04, 9.12, 9.13, 9.09, 8.98, 8.82, 8.62, 8.4,
          8.18, 7.99, 7.83, 7.71, 7.61, 7.52, 7.46, 7.46, 7.55, 7.77, 8.03,
          8.21, 8.18, 8.03, 7.87, 7.69, 7.48, 7.23, 6.88, 6.5, 6.18, 6.03, 6,
          5.98, 5.95, 5.9, 5.81, 5.65, 5.45, 5.29, 5.21, 5.24, 5.33, 5.44, 5.51,
          5.51, 5.47, 5.42, 5.38, 5.33, 5.33, 5.42, 5.56, 5.7, 5.79, 5.81, 5.78,
          5.78, 7.07, 7.13, 7.24, 7.36, 7.48, 7.62, 7.82, 8.03, 8.21, 8.33,
          8.41, 8.47, 8.51, 8.53, 8.51, 8.4, 8.26, 8.16, 8.13, 8.2, 8.35, 8.48,
          8.51, 8.43, 8.33, 8.22, 8.14, 8.11, 8.14, 8.24, 8.4, 8.62, 8.86, 9.08,
          9.23, 9.32, 9.35, 9.3, 9.19, 9.02, 8.81, 8.58, 8.35, 8.13, 7.95, 7.83,
          7.72, 7.62, 7.55, 7.56, 7.65, 7.85, 8.08, 8.22, 8.18, 8.04, 7.9, 7.73,
          7.52, 7.25, 6.89, 6.51, 6.2, 6.04, 6, 5.99, 5.98, 5.94, 5.85, 5.67,
          5.46, 5.27, 5.19, 5.22, 5.32, 5.44, 5.52, 5.51, 5.47, 5.42, 5.37,
          5.33, 5.33, 5.39, 5.5, 5.62, 5.71, 5.75, 5.75, 5.77, 7.08, 7.14, 7.25,
          7.38, 7.48, 7.6, 7.76, 7.92, 8.07, 8.18, 8.29, 8.4, 8.49, 8.53, 8.51,
          8.4, 8.25, 8.14, 8.1, 8.16, 8.27, 8.36, 8.38, 8.32, 8.25, 8.18, 8.12,
          8.1, 8.16, 8.3, 8.51, 8.76, 9.02, 9.25, 9.43, 9.54, 9.56, 9.52, 9.4,
          9.23, 9.02, 8.78, 8.52, 8.28, 8.08, 7.95, 7.84, 7.73, 7.65, 7.65,
          7.75, 7.93, 8.11, 8.22, 8.17, 8.04, 7.91, 7.76, 7.55, 7.26, 6.9, 6.52,
          6.21, 6.05, 6.01, 6.01, 6.02, 5.99, 5.89, 5.7, 5.46, 5.26, 5.16, 5.2,
          5.31, 5.44, 5.52, 5.51, 5.47, 5.42, 5.37, 5.34, 5.33, 5.37, 5.44,
          5.53, 5.63, 5.69, 5.71, 5.75, 7.1, 7.17, 7.28, 7.4, 7.5, 7.6, 7.71,
          7.84, 7.96, 8.06, 8.19, 8.35, 8.48, 8.55, 8.52, 8.4, 8.25, 8.13, 8.09,
          8.13, 8.2, 8.26, 8.27, 8.22, 8.18, 8.14, 8.1, 8.09, 8.17, 8.36, 8.61,
          8.9, 9.17, 9.42, 9.61, 9.73, 9.76, 9.72, 9.6, 9.43, 9.21, 8.97, 8.69,
          8.42, 8.2, 8.07, 7.96, 7.83, 7.74, 7.74, 7.84, 8, 8.14, 8.22, 8.15,
          8.03, 7.92, 7.79, 7.58, 7.28, 6.91, 6.53, 6.23, 6.06, 6.01, 6.02,
          6.05, 6.03, 5.93, 5.72, 5.46, 5.23, 5.13, 5.17, 5.29, 5.44, 5.53,
          5.52, 5.47, 5.42, 5.37, 5.34, 5.33, 5.34, 5.38, 5.45, 5.55, 5.62,
          5.67, 5.73, 7.13, 7.2, 7.32, 7.45, 7.54, 7.61, 7.69, 7.78, 7.87, 7.97,
          8.12, 8.31, 8.48, 8.57, 8.54, 8.41, 8.25, 8.12, 8.09, 8.11, 8.15,
          8.18, 8.18, 8.14, 8.12, 8.1, 8.09, 8.08, 8.18, 8.4, 8.7, 9.01, 9.29,
          9.56, 9.77, 9.9, 9.93, 9.88, 9.77, 9.59, 9.38, 9.12, 8.83, 8.54, 8.31,
          8.18, 8.07, 7.93, 7.83, 7.82, 7.93, 8.06, 8.18, 8.22, 8.14, 8.03,
          7.94, 7.82, 7.61, 7.3, 6.92, 6.55, 6.25, 6.07, 6.02, 6.03, 6.07, 6.05,
          5.95, 5.73, 5.45, 5.2, 5.09, 5.13, 5.26, 5.42, 5.52, 5.51, 5.46, 5.41,
          5.37, 5.34, 5.33, 5.31, 5.32, 5.37, 5.47, 5.56, 5.62, 5.7, 7.18, 7.26,
          7.38, 7.5, 7.59, 7.64, 7.7, 7.76, 7.83, 7.92, 8.08, 8.3, 8.49, 8.59,
          8.56, 8.42, 8.25, 8.12, 8.09, 8.09, 8.11, 8.12, 8.11, 8.08, 8.08,
          8.08, 8.08, 8.07, 8.19, 8.44, 8.76, 9.09, 9.38, 9.65, 9.87, 10.01,
          10.05, 10, 9.88, 9.71, 9.49, 9.24, 8.94, 8.63, 8.39, 8.27, 8.15, 8.01,
          7.9, 7.89, 8, 8.13, 8.22, 8.24, 8.16, 8.05, 7.97, 7.86, 7.65, 7.33,
          6.95, 6.57, 6.26, 6.08, 6.02, 6.04, 6.07, 6.06, 5.95, 5.71, 5.41,
          5.16, 5.04, 5.08, 5.22, 5.39, 5.49, 5.48, 5.43, 5.39, 5.35, 5.32,
          5.31, 5.28, 5.27, 5.3, 5.41, 5.51, 5.59, 5.68, 7.25, 7.33, 7.45, 7.57,
          7.65, 7.69, 7.73, 7.78, 7.84, 7.91, 8.08, 8.3, 8.5, 8.6, 8.57, 8.43,
          8.25, 8.12, 8.08, 8.09, 8.1, 8.1, 8.08, 8.06, 8.06, 8.07, 8.08, 8.07,
          8.19, 8.46, 8.8, 9.13, 9.42, 9.7, 9.92, 10.06, 10.1, 10.05, 9.94,
          9.77, 9.55, 9.3, 9, 8.69, 8.45, 8.33, 8.22, 8.07, 7.96, 7.96, 8.07,
          8.2, 8.28, 8.29, 8.21, 8.1, 8.02, 7.91, 7.7, 7.37, 6.98, 6.6, 6.28,
          6.08, 6.01, 6.02, 6.05, 6.03, 5.92, 5.67, 5.36, 5.09, 4.97, 5.01,
          5.16, 5.33, 5.44, 5.43, 5.38, 5.34, 5.31, 5.29, 5.27, 5.24, 5.22,
          5.25, 5.36, 5.47, 5.56, 5.65, 7.34, 7.41, 7.53, 7.65, 7.72, 7.76, 7.8,
          7.84, 7.88, 7.95, 8.11, 8.32, 8.51, 8.6, 8.57, 8.43, 8.25, 8.12, 8.08,
          8.09, 8.1, 8.1, 8.09, 8.07, 8.07, 8.08, 8.09, 8.09, 8.2, 8.46, 8.8,
          9.13, 9.42, 9.69, 9.92, 10.06, 10.1, 10.05, 9.94, 9.77, 9.56, 9.31,
          9.01, 8.72, 8.48, 8.36, 8.26, 8.12, 8.02, 8.02, 8.14, 8.26, 8.35,
          8.36, 8.27, 8.17, 8.09, 7.97, 7.76, 7.41, 7.02, 6.62, 6.3, 6.09, 6, 6,
          6.02, 5.99, 5.86, 5.61, 5.29, 5.02, 4.9, 4.94, 5.08, 5.25, 5.36, 5.35,
          5.31, 5.27, 5.24, 5.22, 5.21, 5.19, 5.17, 5.21, 5.32, 5.44, 5.53,
          5.63, 7.43, 7.51, 7.63, 7.75, 7.83, 7.86, 7.89, 7.92, 7.96, 8.02,
          8.16, 8.35, 8.52, 8.59, 8.56, 8.42, 8.24, 8.11, 8.08, 8.09, 8.11,
          8.12, 8.11, 8.09, 8.1, 8.12, 8.13, 8.13, 8.24, 8.48, 8.79, 9.11, 9.4,
          9.67, 9.89, 10.03, 10.07, 10.02, 9.91, 9.75, 9.55, 9.31, 9.02, 8.74,
          8.52, 8.41, 8.31, 8.18, 8.08, 8.07, 8.19, 8.31, 8.39, 8.41, 8.32,
          8.22, 8.14, 8.02, 7.8, 7.46, 7.05, 6.65, 6.31, 6.09, 5.99, 5.97, 5.98,
          5.93, 5.8, 5.54, 5.22, 4.95, 4.83, 4.87, 5, 5.15, 5.25, 5.24, 5.2,
          5.16, 5.14, 5.13, 5.13, 5.11, 5.11, 5.15, 5.27, 5.39, 5.5, 5.62, 7.53,
          7.62, 7.75, 7.88, 7.95, 7.98, 8.01, 8.03, 8.07, 8.12, 8.23, 8.38,
          8.51, 8.57, 8.53, 8.4, 8.23, 8.11, 8.09, 8.1, 8.13, 8.15, 8.14, 8.13,
          8.15, 8.18, 8.2, 8.2, 8.29, 8.5, 8.78, 9.08, 9.36, 9.63, 9.84, 9.98,
          10.02, 9.97, 9.87, 9.71, 9.51, 9.29, 9.03, 8.77, 8.57, 8.47, 8.38,
          8.24, 8.14, 8.13, 8.23, 8.35, 8.43, 8.44, 8.35, 8.25, 8.17, 8.05,
          7.83, 7.49, 7.08, 6.67, 6.33, 6.09, 5.98, 5.94, 5.93, 5.88, 5.73,
          5.47, 5.15, 4.88, 4.76, 4.8, 4.9, 5.03, 5.11, 5.09, 5.06, 5.03, 5.01,
          5, 5.01, 5, 5.02, 5.08, 5.21, 5.35, 5.47, 5.61, 7.63, 7.73, 7.88,
          8.01, 8.09, 8.12, 8.14, 8.17, 8.2, 8.24, 8.32, 8.42, 8.51, 8.55, 8.5,
          8.38, 8.22, 8.11, 8.09, 8.11, 8.15, 8.18, 8.19, 8.18, 8.21, 8.26, 8.3,
          8.29, 8.36, 8.53, 8.76, 9.04, 9.31, 9.57, 9.78, 9.91, 9.95, 9.9, 9.8,
          9.66, 9.47, 9.26, 9.03, 8.8, 8.63, 8.54, 8.45, 8.32, 8.2, 8.18, 8.27,
          8.37, 8.44, 8.45, 8.36, 8.26, 8.18, 8.07, 7.86, 7.52, 7.11, 6.7, 6.34,
          6.1, 5.97, 5.92, 5.89, 5.82, 5.66, 5.4, 5.09, 4.82, 4.71, 4.73, 4.81,
          4.9, 4.95, 4.93, 4.89, 4.87, 4.86, 4.86, 4.87, 4.88, 4.92, 5, 5.14,
          5.29, 5.44, 5.6, 7.74, 7.84, 8, 8.16, 8.24, 8.26, 8.29, 8.31, 8.33,
          8.36, 8.41, 8.46, 8.5, 8.51, 8.47, 8.35, 8.21, 8.11, 8.09, 8.12, 8.18,
          8.23, 8.24, 8.24, 8.29, 8.36, 8.4, 8.4, 8.44, 8.56, 8.75, 8.99, 9.26,
          9.51, 9.71, 9.84, 9.87, 9.83, 9.73, 9.6, 9.43, 9.24, 9.04, 8.85, 8.7,
          8.63, 8.54, 8.4, 8.27, 8.23, 8.3, 8.38, 8.44, 8.44, 8.35, 8.25, 8.18,
          8.07, 7.87, 7.54, 7.14, 6.72, 6.36, 6.1, 5.96, 5.89, 5.85, 5.77, 5.6,
          5.34, 5.03, 4.77, 4.66, 4.67, 4.71, 4.76, 4.78, 4.75, 4.72, 4.7, 4.69,
          4.7, 4.72, 4.75, 4.82, 4.92, 5.06, 5.23, 5.41, 5.6, 7.83, 7.95, 8.13,
          8.29, 8.38, 8.41, 8.43, 8.45, 8.47, 8.49, 8.5, 8.5, 8.5, 8.48, 8.44,
          8.33, 8.2, 8.11, 8.1, 8.14, 8.21, 8.27, 8.29, 8.3, 8.37, 8.46, 8.52,
          8.52, 8.53, 8.6, 8.74, 8.95, 9.21, 9.45, 9.64, 9.76, 9.79, 9.75, 9.67,
          9.54, 9.39, 9.22, 9.05, 8.9, 8.78, 8.72, 8.63, 8.49, 8.35, 8.29, 8.33,
          8.38, 8.42, 8.41, 8.33, 8.23, 8.16, 8.06, 7.87, 7.55, 7.16, 6.74,
          6.38, 6.11, 5.95, 5.87, 5.81, 5.72, 5.54, 5.28, 4.97, 4.72, 4.61,
          4.61, 4.62, 4.63, 4.62, 4.58, 4.55, 4.53, 4.53, 4.54, 4.57, 4.62,
          4.71, 4.83, 4.98, 5.17, 5.38, 5.6, 7.92, 8.04, 8.24, 8.42, 8.51, 8.54,
          8.56, 8.57, 8.59, 8.6, 8.58, 8.54, 8.49, 8.46, 8.42, 8.32, 8.2, 8.12,
          8.11, 8.15, 8.24, 8.31, 8.35, 8.37, 8.45, 8.55, 8.62, 8.63, 8.62,
          8.64, 8.74, 8.92, 9.16, 9.39, 9.58, 9.69, 9.72, 9.69, 9.61, 9.5, 9.36,
          9.22, 9.08, 8.97, 8.88, 8.83, 8.74, 8.58, 8.42, 8.34, 8.35, 8.38, 8.4,
          8.37, 8.28, 8.19, 8.13, 8.04, 7.86, 7.56, 7.17, 6.77, 6.4, 6.12, 5.95,
          5.86, 5.78, 5.67, 5.49, 5.22, 4.92, 4.68, 4.57, 4.56, 4.54, 4.51,
          4.47, 4.42, 4.39, 4.37, 4.38, 4.39, 4.43, 4.5, 4.61, 4.75, 4.91, 5.11,
          5.35, 5.59, 7.99, 8.13, 8.33, 8.52, 8.62, 8.65, 8.67, 8.68, 8.69, 8.7,
          8.66, 8.58, 8.5, 8.45, 8.4, 8.31, 8.2, 8.12, 8.11, 8.17, 8.26, 8.35,
          8.4, 8.42, 8.52, 8.64, 8.72, 8.72, 8.7, 8.69, 8.74, 8.9, 9.13, 9.36,
          9.53, 9.64, 9.67, 9.64, 9.57, 9.47, 9.36, 9.24, 9.13, 9.05, 8.99,
          8.95, 8.86, 8.69, 8.51, 8.39, 8.36, 8.36, 8.36, 8.32, 8.22, 8.13,
          8.08, 8.01, 7.85, 7.56, 7.19, 6.79, 6.42, 6.14, 5.96, 5.85, 5.76,
          5.64, 5.45, 5.18, 4.88, 4.64, 4.53, 4.52, 4.48, 4.42, 4.35, 4.29,
          4.26, 4.24, 4.25, 4.27, 4.31, 4.39, 4.52, 4.67, 4.84, 5.06, 5.31,
          5.58, 8.05, 8.19, 8.4, 8.6, 8.7, 8.73, 8.75, 8.76, 8.77, 8.77, 8.71,
          8.61, 8.51, 8.45, 8.4, 8.31, 8.2, 8.13, 8.13, 8.19, 8.29, 8.39, 8.44,
          8.47, 8.58, 8.71, 8.79, 8.8, 8.76, 8.73, 8.76, 8.9, 9.13, 9.34, 9.5,
          9.61, 9.63, 9.61, 9.55, 9.47, 9.38, 9.29, 9.21, 9.15, 9.11, 9.08,
          8.98, 8.8, 8.59, 8.44, 8.38, 8.34, 8.31, 8.26, 8.16, 8.07, 8.03, 7.97,
          7.83, 7.56, 7.21, 6.81, 6.45, 6.16, 5.97, 5.85, 5.75, 5.62, 5.42,
          5.15, 4.85, 4.61, 4.5, 4.48, 4.42, 4.35, 4.26, 4.2, 4.16, 4.14, 4.15,
          4.17, 4.22, 4.31, 4.45, 4.61, 4.79, 5.01, 5.28, 5.55, 8.1, 8.23, 8.45,
          8.65, 8.75, 8.78, 8.8, 8.81, 8.82, 8.81, 8.74, 8.64, 8.53, 8.47, 8.42,
          8.32, 8.22, 8.15, 8.14, 8.2, 8.31, 8.41, 8.47, 8.51, 8.62, 8.75, 8.84,
          8.85, 8.81, 8.77, 8.8, 8.92, 9.14, 9.34, 9.5, 9.59, 9.62, 9.6, 9.56,
          9.5, 9.42, 9.35, 9.3, 9.26, 9.23, 9.21, 9.11, 8.91, 8.68, 8.49, 8.39,
          8.32, 8.26, 8.19, 8.08, 8, 7.97, 7.93, 7.81, 7.56, 7.22, 6.84, 6.48,
          6.19, 5.99, 5.85, 5.74, 5.6, 5.4, 5.12, 4.82, 4.58, 4.47, 4.45, 4.39,
          4.3, 4.22, 4.15, 4.1, 4.08, 4.08, 4.1, 4.15, 4.25, 4.4, 4.56, 4.74,
          4.97, 5.24, 5.52, 8.13, 8.26, 8.47, 8.66, 8.76, 8.79, 8.81, 8.82,
          8.83, 8.81, 8.75, 8.64, 8.54, 8.47, 8.42, 8.33, 8.23, 8.17, 8.16,
          8.23, 8.33, 8.43, 8.5, 8.54, 8.65, 8.77, 8.85, 8.85, 8.82, 8.8, 8.84,
          8.97, 9.17, 9.35, 9.49, 9.57, 9.59, 9.58, 9.55, 9.51, 9.46, 9.41,
          9.39, 9.38, 9.37, 9.36, 9.26, 9.05, 8.8, 8.58, 8.45, 8.34, 8.25, 8.15,
          8.04, 7.95, 7.92, 7.89, 7.77, 7.54, 7.23, 6.87, 6.53, 6.24, 6.02,
          5.87, 5.74, 5.59, 5.37, 5.09, 4.79, 4.55, 4.45, 4.43, 4.37, 4.28,
          4.19, 4.12, 4.06, 4.03, 4.02, 4.04, 4.09, 4.19, 4.34, 4.51, 4.69,
          4.92, 5.19, 5.47, 8.17, 8.28, 8.46, 8.64, 8.73, 8.76, 8.79, 8.8, 8.81,
          8.79, 8.73, 8.63, 8.53, 8.47, 8.42, 8.34, 8.26, 8.21, 8.2, 8.26, 8.36,
          8.45, 8.52, 8.56, 8.65, 8.75, 8.81, 8.81, 8.79, 8.81, 8.88, 9.02,
          9.21, 9.37, 9.47, 9.53, 9.55, 9.54, 9.52, 9.5, 9.47, 9.45, 9.46, 9.49,
          9.51, 9.52, 9.42, 9.21, 8.94, 8.71, 8.54, 8.39, 8.26, 8.14, 8.02,
          7.93, 7.89, 7.84, 7.73, 7.52, 7.24, 6.92, 6.59, 6.31, 6.08, 5.9, 5.74,
          5.56, 5.34, 5.06, 4.77, 4.54, 4.44, 4.42, 4.36, 4.28, 4.19, 4.11,
          4.04, 3.99, 3.96, 3.97, 4.02, 4.12, 4.27, 4.44, 4.62, 4.85, 5.12, 5.4,
          8.2, 8.29, 8.44, 8.59, 8.67, 8.7, 8.74, 8.76, 8.76, 8.74, 8.68, 8.6,
          8.51, 8.45, 8.41, 8.35, 8.29, 8.25, 8.25, 8.3, 8.38, 8.47, 8.53, 8.57,
          8.63, 8.69, 8.73, 8.72, 8.74, 8.8, 8.92, 9.08, 9.26, 9.38, 9.45, 9.48,
          9.49, 9.49, 9.48, 9.48, 9.47, 9.47, 9.52, 9.6, 9.66, 9.67, 9.58, 9.38,
          9.11, 8.86, 8.65, 8.47, 8.31, 8.16, 8.03, 7.93, 7.87, 7.8, 7.69, 7.5,
          7.25, 6.96, 6.67, 6.39, 6.14, 5.93, 5.73, 5.53, 5.3, 5.03, 4.75, 4.53,
          4.43, 4.42, 4.37, 4.3, 4.21, 4.12, 4.03, 3.95, 3.9, 3.9, 3.95, 4.05,
          4.19, 4.36, 4.55, 4.78, 5.04, 5.31, 8.22, 8.29, 8.41, 8.52, 8.59,
          8.63, 8.66, 8.69, 8.7, 8.68, 8.63, 8.56, 8.49, 8.43, 8.39, 8.35, 8.32,
          8.3, 8.3, 8.34, 8.41, 8.48, 8.54, 8.57, 8.6, 8.62, 8.63, 8.61, 8.66,
          8.78, 8.96, 9.15, 9.31, 9.4, 9.43, 9.43, 9.42, 9.43, 9.44, 9.45, 9.46,
          9.48, 9.58, 9.7, 9.8, 9.82, 9.74, 9.55, 9.29, 9.02, 8.79, 8.57, 8.37,
          8.2, 8.06, 7.95, 7.86, 7.77, 7.64, 7.47, 7.25, 7.01, 6.75, 6.48, 6.22,
          5.97, 5.73, 5.49, 5.25, 4.99, 4.73, 4.52, 4.44, 4.42, 4.38, 4.32,
          4.24, 4.15, 4.04, 3.92, 3.84, 3.83, 3.88, 3.98, 4.11, 4.28, 4.47, 4.7,
          4.96, 5.22, 8.24, 8.29, 8.36, 8.44, 8.5, 8.54, 8.59, 8.62, 8.62, 8.6,
          8.56, 8.51, 8.46, 8.41, 8.37, 8.35, 8.34, 8.34, 8.35, 8.38, 8.43,
          8.49, 8.54, 8.57, 8.57, 8.55, 8.52, 8.49, 8.57, 8.76, 8.99, 9.21,
          9.37, 9.42, 9.4, 9.37, 9.36, 9.36, 9.38, 9.41, 9.44, 9.48, 9.61, 9.78,
          9.92, 9.96, 9.88, 9.7, 9.46, 9.19, 8.93, 8.67, 8.44, 8.24, 8.09, 7.97,
          7.86, 7.74, 7.6, 7.44, 7.26, 7.05, 6.83, 6.57, 6.29, 6, 5.72, 5.45,
          5.21, 4.95, 4.71, 4.52, 4.44, 4.43, 4.4, 4.35, 4.27, 4.18, 4.05, 3.9,
          3.79, 3.76, 3.81, 3.91, 4.04, 4.2, 4.39, 4.62, 4.88, 5.13, 8.26, 8.28,
          8.32, 8.37, 8.42, 8.46, 8.51, 8.55, 8.56, 8.54, 8.51, 8.47, 8.43,
          8.39, 8.36, 8.35, 8.37, 8.39, 8.4, 8.42, 8.45, 8.49, 8.54, 8.56, 8.53,
          8.47, 8.41, 8.38, 8.49, 8.73, 9.02, 9.27, 9.42, 9.44, 9.38, 9.32, 9.3,
          9.31, 9.34, 9.38, 9.42, 9.48, 9.64, 9.85, 10.02, 10.07, 10.01, 9.84,
          9.6, 9.33, 9.05, 8.77, 8.51, 8.29, 8.14, 8, 7.86, 7.72, 7.56, 7.41,
          7.26, 7.09, 6.9, 6.65, 6.36, 6.04, 5.72, 5.42, 5.17, 4.92, 4.69, 4.52,
          4.45, 4.44, 4.42, 4.38, 4.31, 4.21, 4.06, 3.89, 3.75, 3.71, 3.76,
          3.85, 3.98, 4.14, 4.33, 4.55, 4.8, 5.06, 8.27, 8.28, 8.29, 8.32, 8.35,
          8.4, 8.45, 8.49, 8.51, 8.48, 8.46, 8.43, 8.41, 8.37, 8.34, 8.35, 8.39,
          8.42, 8.43, 8.45, 8.47, 8.5, 8.54, 8.56, 8.51, 8.41, 8.33, 8.3, 8.43,
          8.71, 9.05, 9.32, 9.45, 9.45, 9.37, 9.28, 9.25, 9.27, 9.3, 9.35, 9.4,
          9.47, 9.66, 9.9, 10.1, 10.16, 10.1, 9.94, 9.71, 9.44, 9.14, 8.84,
          8.56, 8.33, 8.17, 8.03, 7.87, 7.7, 7.54, 7.39, 7.26, 7.12, 6.95, 6.71,
          6.41, 6.06, 5.71, 5.4, 5.14, 4.9, 4.68, 4.52, 4.46, 4.45, 4.44, 4.4,
          4.34, 4.24, 4.08, 3.88, 3.72, 3.67, 3.72, 3.81, 3.93, 4.09, 4.28, 4.5,
          4.75, 5, 8.27, 8.27, 8.27, 8.28, 8.31, 8.36, 8.42, 8.46, 8.47, 8.45,
          8.43, 8.41, 8.39, 8.36, 8.33, 8.35, 8.4, 8.44, 8.45, 8.46, 8.48, 8.5,
          8.54, 8.55, 8.49, 8.38, 8.28, 8.24, 8.39, 8.7, 9.06, 9.34, 9.47, 9.46,
          9.36, 9.25, 9.22, 9.24, 9.28, 9.33, 9.39, 9.47, 9.67, 9.93, 10.14,
          10.21, 10.15, 10, 9.78, 9.5, 9.2, 8.89, 8.6, 8.36, 8.19, 8.05, 7.87,
          7.69, 7.52, 7.38, 7.26, 7.14, 6.98, 6.75, 6.44, 6.08, 5.71, 5.38,
          5.12, 4.89, 4.68, 4.53, 4.46, 4.46, 4.45, 4.42, 4.35, 4.26, 4.09,
          3.88, 3.7, 3.64, 3.69, 3.78, 3.9, 4.06, 4.25, 4.47, 4.72, 4.96, 8.28,
          8.27, 8.27, 8.27, 8.3, 8.35, 8.41, 8.45, 8.46, 8.44, 8.42, 8.41, 8.39,
          8.35, 8.33, 8.35, 8.4, 8.44, 8.46, 8.47, 8.48, 8.5, 8.54, 8.55, 8.48,
          8.37, 8.27, 8.23, 8.38, 8.7, 9.06, 9.35, 9.48, 9.46, 9.35, 9.25, 9.21,
          9.23, 9.27, 9.33, 9.38, 9.47, 9.67, 9.94, 10.15, 10.22, 10.16, 10.02,
          9.79, 9.52, 9.21, 8.9, 8.6, 8.36, 8.2, 8.05, 7.87, 7.69, 7.52, 7.38,
          7.26, 7.15, 6.99, 6.76, 6.45, 6.08, 5.71, 5.38, 5.12, 4.88, 4.68,
          4.53, 4.46, 4.46, 4.45, 4.42, 4.36, 4.26, 4.09, 3.88, 3.7, 3.64, 3.69,
          3.78, 3.9, 4.05, 4.25, 4.47, 4.71, 4.95, 8.3, 8.29, 8.29, 8.3, 8.33,
          8.38, 8.42, 8.46, 8.47, 8.44, 8.42, 8.41, 8.39, 8.35, 8.33, 8.35, 8.4,
          8.44, 8.46, 8.47, 8.48, 8.51, 8.55, 8.57, 8.5, 8.38, 8.28, 8.24, 8.39,
          8.7, 9.06, 9.34, 9.47, 9.46, 9.35, 9.25, 9.22, 9.24, 9.27, 9.32, 9.38,
          9.46, 9.66, 9.91, 10.11, 10.18, 10.13, 9.98, 9.76, 9.49, 9.19, 8.88,
          8.6, 8.37, 8.21, 8.06, 7.88, 7.7, 7.53, 7.39, 7.27, 7.15, 6.98, 6.75,
          6.44, 6.08, 5.71, 5.38, 5.12, 4.88, 4.68, 4.54, 4.48, 4.48, 4.45,
          4.41, 4.34, 4.25, 4.08, 3.89, 3.73, 3.68, 3.73, 3.81, 3.93, 4.08,
          4.27, 4.49, 4.73, 4.98, 8.34, 8.34, 8.34, 8.36, 8.39, 8.42, 8.46,
          8.47, 8.47, 8.44, 8.42, 8.41, 8.38, 8.35, 8.33, 8.35, 8.4, 8.44, 8.45,
          8.47, 8.5, 8.54, 8.58, 8.6, 8.53, 8.41, 8.31, 8.28, 8.42, 8.71, 9.06,
          9.33, 9.45, 9.44, 9.35, 9.26, 9.23, 9.25, 9.27, 9.31, 9.36, 9.43,
          9.62, 9.85, 10.03, 10.1, 10.04, 9.9, 9.68, 9.41, 9.12, 8.83, 8.58,
          8.37, 8.22, 8.08, 7.9, 7.72, 7.55, 7.41, 7.29, 7.15, 6.97, 6.73, 6.42,
          6.07, 5.7, 5.37, 5.11, 4.89, 4.7, 4.58, 4.53, 4.51, 4.47, 4.39, 4.31,
          4.21, 4.08, 3.92, 3.8, 3.76, 3.81, 3.89, 3.99, 4.14, 4.32, 4.54, 4.79,
          5.04, 8.4, 8.41, 8.42, 8.44, 8.47, 8.5, 8.51, 8.5, 8.47, 8.45, 8.43,
          8.41, 8.38, 8.35, 8.34, 8.36, 8.4, 8.43, 8.45, 8.48, 8.52, 8.58, 8.63,
          8.64, 8.57, 8.46, 8.37, 8.33, 8.45, 8.73, 9.05, 9.3, 9.42, 9.42, 9.35,
          9.28, 9.25, 9.26, 9.27, 9.29, 9.32, 9.39, 9.55, 9.75, 9.91, 9.97,
          9.92, 9.78, 9.57, 9.3, 9.02, 8.77, 8.56, 8.38, 8.24, 8.1, 7.93, 7.75,
          7.59, 7.45, 7.31, 7.15, 6.96, 6.71, 6.4, 6.05, 5.69, 5.37, 5.1, 4.89,
          4.73, 4.63, 4.59, 4.56, 4.48, 4.37, 4.26, 4.17, 4.07, 3.97, 3.9, 3.89,
          3.94, 4, 4.09, 4.22, 4.4, 4.62, 4.87, 5.13, 8.49, 8.5, 8.52, 8.55,
          8.58, 8.59, 8.57, 8.53, 8.48, 8.46, 8.43, 8.41, 8.39, 8.36, 8.35,
          8.37, 8.4, 8.43, 8.45, 8.49, 8.56, 8.63, 8.69, 8.7, 8.64, 8.53, 8.43,
          8.39, 8.5, 8.76, 9.05, 9.28, 9.38, 9.39, 9.34, 9.29, 9.27, 9.26, 9.26,
          9.26, 9.28, 9.34, 9.47, 9.63, 9.76, 9.81, 9.76, 9.63, 9.42, 9.17, 8.9,
          8.69, 8.52, 8.39, 8.27, 8.13, 7.96, 7.79, 7.63, 7.5, 7.35, 7.16, 6.94,
          6.68, 6.38, 6.04, 5.69, 5.36, 5.09, 4.89, 4.76, 4.69, 4.66, 4.62, 4.5,
          4.34, 4.19, 4.11, 4.06, 4.03, 4.03, 4.05, 4.1, 4.15, 4.22, 4.33, 4.5,
          4.72, 4.98, 5.24, 8.59, 8.61, 8.64, 8.67, 8.7, 8.7, 8.64, 8.57, 8.5,
          8.47, 8.44, 8.42, 8.4, 8.38, 8.37, 8.39, 8.42, 8.45, 8.47, 8.52, 8.61,
          8.71, 8.77, 8.78, 8.71, 8.61, 8.51, 8.47, 8.56, 8.79, 9.05, 9.25,
          9.34, 9.36, 9.33, 9.29, 9.27, 9.26, 9.23, 9.21, 9.22, 9.27, 9.37,
          9.49, 9.6, 9.63, 9.59, 9.46, 9.26, 9.02, 8.77, 8.6, 8.49, 8.4, 8.3,
          8.16, 7.99, 7.82, 7.68, 7.55, 7.38, 7.18, 6.93, 6.66, 6.36, 6.02,
          5.68, 5.36, 5.08, 4.89, 4.79, 4.74, 4.73, 4.68, 4.52, 4.3, 4.13, 4.06,
          4.06, 4.1, 4.17, 4.23, 4.27, 4.31, 4.36, 4.45, 4.62, 4.84, 5.09, 5.36,
          8.7, 8.72, 8.76, 8.8, 8.83, 8.81, 8.72, 8.61, 8.53, 8.49, 8.47, 8.44,
          8.42, 8.41, 8.4, 8.43, 8.46, 8.49, 8.51, 8.57, 8.68, 8.79, 8.86, 8.86,
          8.8, 8.69, 8.59, 8.55, 8.63, 8.82, 9.05, 9.22, 9.3, 9.32, 9.3, 9.27,
          9.26, 9.24, 9.2, 9.16, 9.15, 9.18, 9.26, 9.35, 9.42, 9.45, 9.41, 9.29,
          9.1, 8.87, 8.64, 8.51, 8.45, 8.41, 8.32, 8.18, 8.02, 7.86, 7.72, 7.6,
          7.43, 7.19, 6.93, 6.64, 6.34, 6.02, 5.68, 5.36, 5.07, 4.89, 4.81,
          4.79, 4.79, 4.73, 4.52, 4.27, 4.07, 4.01, 4.06, 4.18, 4.31, 4.41,
          4.45, 4.48, 4.51, 4.58, 4.73, 4.95, 5.21, 5.48, 8.82, 8.84, 8.89,
          8.93, 8.95, 8.91, 8.8, 8.66, 8.56, 8.52, 8.5, 8.48, 8.46, 8.45, 8.46,
          8.48, 8.52, 8.54, 8.57, 8.64, 8.77, 8.89, 8.96, 8.96, 8.89, 8.78,
          8.68, 8.63, 8.69, 8.86, 9.05, 9.19, 9.25, 9.27, 9.26, 9.24, 9.23, 9.2,
          9.14, 9.08, 9.06, 9.09, 9.14, 9.19, 9.24, 9.27, 9.23, 9.12, 8.95,
          8.73, 8.52, 8.43, 8.42, 8.41, 8.34, 8.2, 8.05, 7.89, 7.76, 7.65, 7.47,
          7.22, 6.94, 6.65, 6.35, 6.02, 5.69, 5.36, 5.06, 4.88, 4.82, 4.82,
          4.83, 4.75, 4.53, 4.24, 4.03, 3.98, 4.08, 4.26, 4.45, 4.58, 4.62,
          4.63, 4.65, 4.71, 4.85, 5.06, 5.32, 5.59, 8.93, 8.96, 9, 9.04, 9.06,
          9.01, 8.88, 8.72, 8.61, 8.57, 8.55, 8.53, 8.52, 8.52, 8.53, 8.57, 8.6,
          8.63, 8.65, 8.74, 8.87, 9, 9.07, 9.06, 8.98, 8.87, 8.77, 8.71, 8.76,
          8.9, 9.06, 9.17, 9.21, 9.21, 9.2, 9.18, 9.18, 9.14, 9.07, 9, 8.96,
          8.98, 9.01, 9.05, 9.08, 9.1, 9.08, 8.97, 8.81, 8.61, 8.42, 8.36, 8.39,
          8.41, 8.35, 8.21, 8.07, 7.92, 7.8, 7.69, 7.51, 7.26, 6.96, 6.67, 6.37,
          6.04, 5.7, 5.36, 5.05, 4.87, 4.81, 4.82, 4.83, 4.76, 4.51, 4.22, 4,
          3.98, 4.11, 4.35, 4.58, 4.73, 4.77, 4.78, 4.77, 4.82, 4.95, 5.16,
          5.42, 5.69, 9.04, 9.07, 9.11, 9.14, 9.15, 9.09, 8.95, 8.78, 8.66,
          8.62, 8.6, 8.59, 8.59, 8.6, 8.63, 8.67, 8.71, 8.75, 8.77, 8.85, 8.99,
          9.11, 9.18, 9.16, 9.08, 8.96, 8.85, 8.78, 8.82, 8.94, 9.07, 9.16,
          9.16, 9.15, 9.12, 9.1, 9.09, 9.05, 8.97, 8.89, 8.85, 8.86, 8.88, 8.91,
          8.94, 8.96, 8.94, 8.85, 8.71, 8.53, 8.35, 8.31, 8.36, 8.4, 8.34, 8.21,
          8.07, 7.93, 7.82, 7.73, 7.55, 7.3, 7, 6.71, 6.41, 6.07, 5.72, 5.37,
          5.04, 4.85, 4.79, 4.79, 4.81, 4.73, 4.49, 4.2, 4, 4, 4.16, 4.42, 4.69,
          4.85, 4.89, 4.89, 4.88, 4.92, 5.04, 5.24, 5.49, 5.76, 9.16, 9.18,
          9.21, 9.22, 9.22, 9.15, 9.01, 8.85, 8.73, 8.7, 8.68, 8.68, 8.68, 8.71,
          8.74, 8.79, 8.85, 8.89, 8.91, 8.99, 9.12, 9.24, 9.29, 9.27, 9.17,
          9.04, 8.92, 8.85, 8.87, 8.97, 9.09, 9.14, 9.12, 9.08, 9.04, 9, 8.99,
          8.95, 8.87, 8.79, 8.75, 8.75, 8.76, 8.78, 8.8, 8.83, 8.82, 8.75, 8.63,
          8.47, 8.31, 8.29, 8.34, 8.39, 8.33, 8.2, 8.06, 7.93, 7.83, 7.74, 7.58,
          7.35, 7.06, 6.77, 6.46, 6.12, 5.75, 5.38, 5.04, 4.83, 4.75, 4.74,
          4.75, 4.68, 4.45, 4.18, 4.01, 4.03, 4.22, 4.5, 4.78, 4.95, 5, 4.99,
          4.98, 5.01, 5.12, 5.31, 5.56, 5.82, 9.31, 9.31, 9.3, 9.28, 9.26, 9.19,
          9.07, 8.93, 8.84, 8.81, 8.79, 8.78, 8.79, 8.82, 8.87, 8.94, 9.01,
          9.05, 9.08, 9.16, 9.27, 9.37, 9.41, 9.37, 9.26, 9.11, 8.98, 8.9, 8.91,
          9.01, 9.1, 9.14, 9.09, 9.02, 8.95, 8.9, 8.88, 8.85, 8.78, 8.71, 8.67,
          8.67, 8.66, 8.65, 8.66, 8.68, 8.69, 8.65, 8.56, 8.44, 8.3, 8.28, 8.33,
          8.36, 8.31, 8.18, 8.04, 7.91, 7.81, 7.74, 7.6, 7.4, 7.14, 6.86, 6.54,
          6.18, 5.78, 5.38, 5.02, 4.79, 4.69, 4.66, 4.66, 4.6, 4.4, 4.16, 4.02,
          4.07, 4.28, 4.58, 4.87, 5.04, 5.09, 5.09, 5.08, 5.1, 5.21, 5.39, 5.63,
          5.89, 9.47, 9.44, 9.38, 9.31, 9.26, 9.21, 9.12, 9.03, 8.96, 8.94,
          8.92, 8.91, 8.91, 8.95, 9.01, 9.1, 9.18, 9.24, 9.27, 9.33, 9.42, 9.49,
          9.52, 9.47, 9.34, 9.18, 9.03, 8.94, 8.94, 9.03, 9.12, 9.13, 9.06,
          8.96, 8.86, 8.79, 8.77, 8.75, 8.7, 8.65, 8.62, 8.61, 8.57, 8.53, 8.51,
          8.53, 8.56, 8.56, 8.52, 8.43, 8.31, 8.28, 8.32, 8.34, 8.28, 8.15, 8,
          7.87, 7.78, 7.71, 7.61, 7.45, 7.23, 6.96, 6.63, 6.24, 5.81, 5.38, 5,
          4.74, 4.62, 4.57, 4.56, 4.5, 4.33, 4.14, 4.04, 4.11, 4.34, 4.65, 4.95,
          5.13, 5.18, 5.19, 5.18, 5.2, 5.3, 5.48, 5.71, 5.97, 9.64, 9.56, 9.44,
          9.32, 9.25, 9.2, 9.16, 9.12, 9.09, 9.08, 9.06, 9.04, 9.04, 9.08, 9.16,
          9.26, 9.35, 9.43, 9.46, 9.51, 9.57, 9.62, 9.62, 9.56, 9.42, 9.23,
          9.06, 8.96, 8.96, 9.05, 9.13, 9.13, 9.02, 8.9, 8.77, 8.68, 8.66, 8.65,
          8.63, 8.61, 8.59, 8.57, 8.5, 8.42, 8.36, 8.38, 8.43, 8.48, 8.49, 8.44,
          8.34, 8.3, 8.31, 8.31, 8.24, 8.11, 7.96, 7.82, 7.72, 7.68, 7.61, 7.49,
          7.32, 7.07, 6.73, 6.31, 5.84, 5.37, 4.97, 4.69, 4.54, 4.46, 4.44, 4.4,
          4.26, 4.11, 4.06, 4.16, 4.4, 4.72, 5.02, 5.21, 5.27, 5.28, 5.27, 5.3,
          5.39, 5.56, 5.8, 6.06, 9.8, 9.68, 9.5, 9.32, 9.21, 9.18, 9.19, 9.21,
          9.22, 9.22, 9.19, 9.16, 9.16, 9.2, 9.29, 9.41, 9.52, 9.61, 9.65, 9.68,
          9.71, 9.73, 9.72, 9.64, 9.48, 9.27, 9.08, 8.97, 8.97, 9.05, 9.13,
          9.12, 8.99, 8.83, 8.68, 8.58, 8.55, 8.55, 8.56, 8.57, 8.57, 8.54,
          8.44, 8.31, 8.22, 8.23, 8.31, 8.4, 8.47, 8.46, 8.37, 8.33, 8.31, 8.28,
          8.2, 8.07, 7.91, 7.77, 7.67, 7.63, 7.6, 7.54, 7.41, 7.18, 6.83, 6.37,
          5.86, 5.37, 4.95, 4.64, 4.45, 4.36, 4.32, 4.29, 4.19, 4.09, 4.07, 4.2,
          4.45, 4.78, 5.09, 5.28, 5.34, 5.36, 5.36, 5.38, 5.47, 5.64, 5.88,
          6.14, 9.93, 9.78, 9.53, 9.3, 9.17, 9.15, 9.2, 9.28, 9.34, 9.34, 9.31,
          9.28, 9.26, 9.31, 9.41, 9.54, 9.67, 9.77, 9.81, 9.83, 9.84, 9.83,
          9.79, 9.71, 9.52, 9.29, 9.09, 8.96, 8.96, 9.05, 9.12, 9.1, 8.95, 8.77,
          8.59, 8.47, 8.44, 8.46, 8.49, 8.53, 8.54, 8.51, 8.38, 8.21, 8.09,
          8.09, 8.19, 8.34, 8.46, 8.49, 8.41, 8.35, 8.31, 8.26, 8.17, 8.03,
          7.87, 7.71, 7.61, 7.58, 7.59, 7.58, 7.49, 7.28, 6.92, 6.43, 5.88,
          5.35, 4.92, 4.6, 4.38, 4.26, 4.21, 4.19, 4.12, 4.06, 4.09, 4.23, 4.5,
          4.84, 5.14, 5.34, 5.4, 5.43, 5.43, 5.46, 5.55, 5.72, 5.96, 6.22,
          10.03, 9.84, 9.55, 9.27, 9.11, 9.11, 9.21, 9.34, 9.43, 9.44, 9.41,
          9.36, 9.34, 9.39, 9.5, 9.65, 9.79, 9.9, 9.95, 9.95, 9.94, 9.9, 9.85,
          9.76, 9.56, 9.31, 9.08, 8.95, 8.94, 9.03, 9.1, 9.07, 8.9, 8.7, 8.5,
          8.37, 8.33, 8.36, 8.42, 8.48, 8.51, 8.48, 8.32, 8.12, 7.97, 7.97, 8.1,
          8.28, 8.45, 8.51, 8.44, 8.37, 8.31, 8.24, 8.14, 8, 7.83, 7.67, 7.56,
          7.54, 7.58, 7.61, 7.56, 7.36, 6.99, 6.47, 5.89, 5.34, 4.9, 4.55, 4.31,
          4.17, 4.12, 4.1, 4.06, 4.04, 4.1, 4.26, 4.54, 4.88, 5.19, 5.38, 5.46,
          5.48, 5.5, 5.53, 5.62, 5.78, 6.02, 6.29, 10.09, 9.88, 9.54, 9.23,
          9.07, 9.07, 9.2, 9.37, 9.48, 9.5, 9.46, 9.41, 9.39, 9.44, 9.56, 9.72,
          9.87, 9.99, 10.04, 10.04, 10, 9.95, 9.89, 9.79, 9.57, 9.31, 9.07,
          8.92, 8.91, 8.99, 9.06, 9.02, 8.84, 8.62, 8.41, 8.27, 8.23, 8.27,
          8.35, 8.43, 8.47, 8.43, 8.26, 8.04, 7.87, 7.87, 8.02, 8.23, 8.43,
          8.51, 8.46, 8.38, 8.31, 8.22, 8.12, 7.98, 7.8, 7.64, 7.53, 7.51, 7.57,
          7.63, 7.61, 7.42, 7.04, 6.51, 5.9, 5.33, 4.88, 4.52, 4.27, 4.11, 4.05,
          4.04, 4.02, 4.03, 4.11, 4.28, 4.56, 4.91, 5.22, 5.42, 5.5, 5.53, 5.55,
          5.59, 5.67, 5.84, 6.08, 6.34, 10.09, 9.87, 9.52, 9.19, 9.02, 9.04,
          9.18, 9.36, 9.49, 9.51, 9.48, 9.43, 9.41, 9.46, 9.58, 9.74, 9.91,
          10.03, 10.08, 10.08, 10.03, 9.97, 9.91, 9.79, 9.57, 9.29, 9.04, 8.89,
          8.87, 8.95, 9.01, 8.96, 8.77, 8.54, 8.32, 8.17, 8.13, 8.17, 8.26,
          8.35, 8.4, 8.37, 8.19, 7.96, 7.8, 7.8, 7.96, 8.19, 8.41, 8.51, 8.46,
          8.38, 8.3, 8.21, 8.11, 7.97, 7.8, 7.63, 7.52, 7.5, 7.57, 7.64, 7.63,
          7.44, 7.06, 6.52, 5.9, 5.33, 4.87, 4.51, 4.24, 4.08, 4.02, 4.01, 4,
          4.02, 4.11, 4.29, 4.58, 4.93, 5.24, 5.44, 5.52, 5.56, 5.58, 5.62,
          5.71, 5.87, 6.12, 6.38, 10.04, 9.82, 9.48, 9.16, 8.99, 9, 9.14, 9.33,
          9.47, 9.49, 9.46, 9.41, 9.4, 9.45, 9.57, 9.74, 9.91, 10.03, 10.09,
          10.08, 10.04, 9.98, 9.9, 9.79, 9.56, 9.27, 9.02, 8.85, 8.82, 8.89,
          8.94, 8.88, 8.68, 8.45, 8.23, 8.08, 8.04, 8.09, 8.17, 8.27, 8.32,
          8.29, 8.12, 7.91, 7.76, 7.77, 7.93, 8.16, 8.37, 8.48, 8.43, 8.37,
          8.29, 8.2, 8.11, 7.97, 7.8, 7.63, 7.53, 7.51, 7.57, 7.64, 7.62, 7.44,
          7.05, 6.51, 5.9, 5.33, 4.87, 4.51, 4.25, 4.09, 4.02, 4.02, 4, 4.02,
          4.11, 4.29, 4.58, 4.93, 5.25, 5.45, 5.53, 5.58, 5.6, 5.65, 5.73, 5.9,
          6.14, 6.4, 9.96, 9.75, 9.42, 9.12, 8.96, 8.97, 9.12, 9.3, 9.44, 9.47,
          9.44, 9.4, 9.39, 9.44, 9.57, 9.74, 9.91, 10.04, 10.09, 10.09, 10.05,
          9.98, 9.9, 9.78, 9.55, 9.26, 9, 8.83, 8.79, 8.82, 8.85, 8.78, 8.58,
          8.36, 8.15, 8.01, 7.97, 8.01, 8.09, 8.17, 8.22, 8.19, 8.06, 7.88,
          7.76, 7.79, 7.94, 8.14, 8.33, 8.41, 8.37, 8.32, 8.25, 8.18, 8.09,
          7.96, 7.8, 7.64, 7.55, 7.53, 7.58, 7.62, 7.58, 7.39, 7.01, 6.49, 5.91,
          5.36, 4.9, 4.55, 4.29, 4.13, 4.07, 4.06, 4.04, 4.04, 4.11, 4.29, 4.57,
          4.92, 5.23, 5.43, 5.52, 5.57, 5.61, 5.66, 5.75, 5.91, 6.15, 6.4, 9.86,
          9.66, 9.36, 9.08, 8.93, 8.95, 9.09, 9.28, 9.41, 9.44, 9.42, 9.38,
          9.38, 9.43, 9.56, 9.74, 9.92, 10.05, 10.11, 10.1, 10.06, 9.98, 9.9,
          9.78, 9.55, 9.26, 9.01, 8.83, 8.76, 8.76, 8.75, 8.65, 8.46, 8.26,
          8.07, 7.95, 7.92, 7.95, 8.01, 8.07, 8.1, 8.09, 7.99, 7.87, 7.8, 7.85,
          7.99, 8.14, 8.27, 8.32, 8.29, 8.24, 8.2, 8.14, 8.05, 7.94, 7.79, 7.66,
          7.58, 7.56, 7.58, 7.59, 7.52, 7.31, 6.94, 6.46, 5.92, 5.4, 4.96, 4.62,
          4.36, 4.21, 4.16, 4.14, 4.1, 4.08, 4.13, 4.29, 4.56, 4.89, 5.19, 5.39,
          5.49, 5.55, 5.6, 5.66, 5.75, 5.92, 6.14, 6.39, 9.73, 9.56, 9.29, 9.04,
          8.91, 8.93, 9.07, 9.25, 9.38, 9.41, 9.4, 9.37, 9.37, 9.43, 9.56, 9.73,
          9.92, 10.06, 10.12, 10.12, 10.07, 9.99, 9.9, 9.77, 9.55, 9.27, 9.02,
          8.83, 8.73, 8.69, 8.64, 8.52, 8.34, 8.16, 8, 7.91, 7.88, 7.9, 7.93,
          7.96, 7.98, 7.98, 7.94, 7.89, 7.88, 7.96, 8.06, 8.15, 8.21, 8.21,
          8.18, 8.15, 8.13, 8.09, 8.01, 7.91, 7.79, 7.68, 7.62, 7.6, 7.59, 7.55,
          7.44, 7.2, 6.86, 6.43, 5.95, 5.47, 5.05, 4.71, 4.47, 4.33, 4.28, 4.25,
          4.19, 4.13, 4.15, 4.3, 4.55, 4.85, 5.14, 5.33, 5.43, 5.51, 5.58, 5.65,
          5.75, 5.91, 6.13, 6.37, 9.6, 9.45, 9.22, 9, 8.88, 8.91, 9.05, 9.22,
          9.36, 9.39, 9.38, 9.36, 9.37, 9.42, 9.55, 9.73, 9.92, 10.07, 10.13,
          10.13, 10.07, 9.98, 9.89, 9.76, 9.54, 9.28, 9.03, 8.84, 8.71, 8.61,
          8.52, 8.38, 8.21, 8.06, 7.94, 7.87, 7.85, 7.86, 7.86, 7.86, 7.87,
          7.87, 7.89, 7.91, 7.98, 8.08, 8.15, 8.17, 8.14, 8.1, 8.06, 8.05, 8.05,
          8.03, 7.97, 7.87, 7.78, 7.71, 7.66, 7.64, 7.6, 7.51, 7.34, 7.09, 6.76,
          6.39, 5.98, 5.55, 5.15, 4.82, 4.6, 4.47, 4.42, 4.39, 4.29, 4.2, 4.18,
          4.3, 4.53, 4.81, 5.08, 5.26, 5.37, 5.46, 5.54, 5.63, 5.74, 5.9, 6.11,
          6.33, 9.46, 9.34, 9.14, 8.96, 8.86, 8.89, 9.02, 9.2, 9.33, 9.37, 9.36,
          9.35, 9.36, 9.41, 9.54, 9.72, 9.92, 10.07, 10.14, 10.13, 10.07, 9.98,
          9.88, 9.75, 9.54, 9.28, 9.04, 8.84, 8.68, 8.54, 8.4, 8.25, 8.09, 7.97,
          7.89, 7.85, 7.84, 7.83, 7.8, 7.77, 7.76, 7.77, 7.84, 7.95, 8.08, 8.2,
          8.25, 8.19, 8.08, 7.98, 7.95, 7.95, 7.98, 7.98, 7.93, 7.84, 7.78,
          7.73, 7.71, 7.69, 7.62, 7.47, 7.26, 6.98, 6.68, 6.35, 6.01, 5.64,
          5.26, 4.95, 4.74, 4.63, 4.58, 4.54, 4.41, 4.28, 4.22, 4.31, 4.51,
          4.76, 5.01, 5.18, 5.29, 5.4, 5.5, 5.61, 5.72, 5.87, 6.08, 6.29, 9.34,
          9.23, 9.07, 8.91, 8.83, 8.86, 9, 9.17, 9.3, 9.34, 9.34, 9.34, 9.35,
          9.4, 9.52, 9.7, 9.9, 10.06, 10.13, 10.12, 10.06, 9.96, 9.86, 9.73,
          9.52, 9.27, 9.03, 8.83, 8.65, 8.47, 8.3, 8.13, 7.98, 7.89, 7.85, 7.83,
          7.83, 7.81, 7.75, 7.7, 7.67, 7.69, 7.8, 7.98, 8.16, 8.31, 8.34, 8.21,
          8.03, 7.89, 7.85, 7.87, 7.92, 7.94, 7.89, 7.82, 7.78, 7.76, 7.76,
          7.74, 7.63, 7.44, 7.19, 6.9, 6.61, 6.33, 6.05, 5.73, 5.37, 5.08, 4.89,
          4.79, 4.75, 4.7, 4.54, 4.36, 4.27, 4.33, 4.49, 4.71, 4.93, 5.1, 5.21,
          5.33, 5.46, 5.58, 5.69, 5.85, 6.04, 6.25, 9.22, 9.13, 8.99, 8.86, 8.8,
          8.84, 8.97, 9.15, 9.28, 9.32, 9.33, 9.32, 9.33, 9.38, 9.49, 9.68,
          9.88, 10.04, 10.11, 10.1, 10.04, 9.94, 9.83, 9.7, 9.49, 9.25, 9.01,
          8.8, 8.6, 8.4, 8.2, 8.03, 7.9, 7.83, 7.82, 7.82, 7.83, 7.79, 7.72,
          7.65, 7.6, 7.63, 7.77, 7.99, 8.22, 8.39, 8.4, 8.23, 7.99, 7.82, 7.78,
          7.81, 7.88, 7.91, 7.87, 7.81, 7.78, 7.79, 7.8, 7.78, 7.65, 7.43, 7.15,
          6.84, 6.56, 6.33, 6.1, 5.82, 5.48, 5.21, 5.04, 4.95, 4.91, 4.86, 4.67,
          4.46, 4.32, 4.35, 4.48, 4.67, 4.87, 5.02, 5.14, 5.27, 5.41, 5.54,
          5.66, 5.81, 6, 6.2, 9.13, 9.05, 8.93, 8.81, 8.76, 8.8, 8.95, 9.12,
          9.26, 9.3, 9.31, 9.3, 9.31, 9.35, 9.46, 9.64, 9.84, 10, 10.08, 10.07,
          10, 9.9, 9.79, 9.66, 9.45, 9.21, 8.97, 8.75, 8.54, 8.33, 8.13, 7.96,
          7.84, 7.79, 7.8, 7.82, 7.83, 7.79, 7.7, 7.61, 7.56, 7.58, 7.75, 8,
          8.25, 8.43, 8.43, 8.23, 7.97, 7.78, 7.75, 7.79, 7.86, 7.9, 7.86, 7.81,
          7.8, 7.81, 7.83, 7.81, 7.68, 7.44, 7.14, 6.83, 6.56, 6.35, 6.15, 5.9,
          5.59, 5.33, 5.18, 5.09, 5.07, 5, 4.8, 4.55, 4.38, 4.37, 4.47, 4.63,
          4.81, 4.96, 5.08, 5.21, 5.36, 5.5, 5.62, 5.78, 5.97, 6.16, 9.06, 8.99,
          8.87, 8.76, 8.71, 8.76, 8.91, 9.09, 9.23, 9.28, 9.29, 9.28, 9.28,
          9.32, 9.42, 9.59, 9.79, 9.95, 10.03, 10.02, 9.96, 9.86, 9.74, 9.61,
          9.4, 9.15, 8.91, 8.69, 8.48, 8.26, 8.07, 7.91, 7.8, 7.77, 7.78, 7.81,
          7.82, 7.78, 7.69, 7.6, 7.55, 7.57, 7.73, 7.98, 8.24, 8.42, 8.43, 8.23,
          7.97, 7.79, 7.75, 7.79, 7.86, 7.91, 7.87, 7.82, 7.81, 7.84, 7.86,
          7.84, 7.71, 7.47, 7.16, 6.85, 6.58, 6.39, 6.21, 5.98, 5.68, 5.44, 5.3,
          5.23, 5.2, 5.13, 4.92, 4.64, 4.44, 4.4, 4.47, 4.6, 4.76, 4.9, 5.02,
          5.16, 5.31, 5.46, 5.59, 5.74, 5.93, 6.12, 9.02, 8.94, 8.81, 8.7, 8.66,
          8.72, 8.87, 9.06, 9.2, 9.25, 9.26, 9.25, 9.25, 9.29, 9.38, 9.54, 9.73,
          9.89, 9.97, 9.97, 9.91, 9.81, 9.69, 9.56, 9.35, 9.11, 8.86, 8.64,
          8.43, 8.22, 8.03, 7.87, 7.78, 7.75, 7.76, 7.79, 7.79, 7.76, 7.68,
          7.61, 7.55, 7.57, 7.72, 7.94, 8.18, 8.37, 8.39, 8.21, 7.97, 7.79,
          7.76, 7.8, 7.87, 7.91, 7.87, 7.83, 7.84, 7.88, 7.91, 7.9, 7.76, 7.51,
          7.2, 6.88, 6.62, 6.44, 6.28, 6.07, 5.79, 5.56, 5.41, 5.34, 5.31, 5.24,
          5.02, 4.75, 4.53, 4.46, 4.49, 4.58, 4.71, 4.83, 4.96, 5.11, 5.27,
          5.42, 5.56, 5.71, 5.89, 6.08, 8.99, 8.9, 8.77, 8.65, 8.6, 8.67, 8.82,
          9.01, 9.15, 9.2, 9.22, 9.22, 9.22, 9.25, 9.34, 9.49, 9.67, 9.82, 9.9,
          9.91, 9.85, 9.76, 9.65, 9.51, 9.31, 9.08, 8.84, 8.62, 8.4, 8.18, 8,
          7.85, 7.76, 7.73, 7.73, 7.74, 7.74, 7.72, 7.67, 7.62, 7.58, 7.59, 7.7,
          7.89, 8.1, 8.28, 8.31, 8.17, 7.96, 7.81, 7.77, 7.81, 7.87, 7.9, 7.86,
          7.83, 7.87, 7.93, 7.99, 7.98, 7.83, 7.56, 7.24, 6.92, 6.66, 6.5, 6.36,
          6.18, 5.91, 5.68, 5.52, 5.43, 5.39, 5.33, 5.12, 4.86, 4.64, 4.55,
          4.53, 4.57, 4.65, 4.76, 4.89, 5.05, 5.23, 5.4, 5.54, 5.69, 5.86, 6.03,
          8.97, 8.87, 8.72, 8.59, 8.55, 8.61, 8.77, 8.95, 9.08, 9.14, 9.17,
          9.18, 9.19, 9.22, 9.3, 9.44, 9.6, 9.75, 9.83, 9.84, 9.8, 9.71, 9.6,
          9.47, 9.28, 9.06, 8.83, 8.61, 8.39, 8.17, 7.98, 7.84, 7.76, 7.71,
          7.68, 7.67, 7.67, 7.67, 7.65, 7.63, 7.61, 7.62, 7.69, 7.83, 8, 8.17,
          8.22, 8.12, 7.95, 7.82, 7.79, 7.82, 7.86, 7.88, 7.85, 7.83, 7.9, 8,
          8.08, 8.08, 7.92, 7.63, 7.29, 6.96, 6.71, 6.56, 6.45, 6.29, 6.04,
          5.81, 5.62, 5.5, 5.45, 5.39, 5.21, 4.98, 4.77, 4.65, 4.59, 4.57, 4.6,
          4.68, 4.81, 4.99, 5.2, 5.39, 5.53, 5.68, 5.83, 5.98,
        ];
      },
      9662: (t, r, e) => {
        var n = e(7854),
          o = e(614),
          i = e(6330),
          a = n.TypeError;
        t.exports = function (t) {
          if (o(t)) return t;
          throw a(i(t) + " is not a function");
        };
      },
      9483: (t, r, e) => {
        var n = e(7854),
          o = e(4411),
          i = e(6330),
          a = n.TypeError;
        t.exports = function (t) {
          if (o(t)) return t;
          throw a(i(t) + " is not a constructor");
        };
      },
      6077: (t, r, e) => {
        var n = e(7854),
          o = e(614),
          i = n.String,
          a = n.TypeError;
        t.exports = function (t) {
          if ("object" == typeof t || o(t)) return t;
          throw a("Can't set " + i(t) + " as a prototype");
        };
      },
      1223: (t, r, e) => {
        var n = e(5112),
          o = e(30),
          i = e(3070),
          a = n("unscopables"),
          u = Array.prototype;
        null == u[a] && i.f(u, a, { configurable: !0, value: o(null) }),
          (t.exports = function (t) {
            u[a][t] = !0;
          });
      },
      5787: (t, r, e) => {
        var n = e(7854),
          o = e(7976),
          i = n.TypeError;
        t.exports = function (t, r) {
          if (o(r, t)) return t;
          throw i("Incorrect invocation");
        };
      },
      9670: (t, r, e) => {
        var n = e(7854),
          o = e(111),
          i = n.String,
          a = n.TypeError;
        t.exports = function (t) {
          if (o(t)) return t;
          throw a(i(t) + " is not an object");
        };
      },
      4019: (t) => {
        t.exports =
          "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView;
      },
      260: (t, r, e) => {
        "use strict";
        var n,
          o,
          i,
          a = e(4019),
          u = e(9781),
          c = e(7854),
          s = e(614),
          f = e(111),
          l = e(2597),
          p = e(648),
          v = e(6330),
          y = e(8880),
          d = e(1320),
          h = e(3070).f,
          g = e(7976),
          m = e(9518),
          b = e(7674),
          x = e(5112),
          w = e(9711),
          A = c.Int8Array,
          T = A && A.prototype,
          S = c.Uint8ClampedArray,
          E = S && S.prototype,
          O = A && m(A),
          R = T && m(T),
          L = Object.prototype,
          M = c.TypeError,
          P = x("toStringTag"),
          I = w("TYPED_ARRAY_TAG"),
          _ = w("TYPED_ARRAY_CONSTRUCTOR"),
          j = a && !!b && "Opera" !== p(c.opera),
          F = !1,
          C = {
            Int8Array: 1,
            Uint8Array: 1,
            Uint8ClampedArray: 1,
            Int16Array: 2,
            Uint16Array: 2,
            Int32Array: 4,
            Uint32Array: 4,
            Float32Array: 4,
            Float64Array: 8,
          },
          B = { BigInt64Array: 8, BigUint64Array: 8 },
          U = function (t) {
            if (!f(t)) return !1;
            var r = p(t);
            return l(C, r) || l(B, r);
          };
        for (n in C) (i = (o = c[n]) && o.prototype) ? y(i, _, o) : (j = !1);
        for (n in B) (i = (o = c[n]) && o.prototype) && y(i, _, o);
        if (
          (!j || !s(O) || O === Function.prototype) &&
          ((O = function () {
            throw M("Incorrect invocation");
          }),
          j)
        )
          for (n in C) c[n] && b(c[n], O);
        if ((!j || !R || R === L) && ((R = O.prototype), j))
          for (n in C) c[n] && b(c[n].prototype, R);
        if ((j && m(E) !== R && b(E, R), u && !l(R, P)))
          for (n in ((F = !0),
          h(R, P, {
            get: function () {
              return f(this) ? this[I] : void 0;
            },
          }),
          C))
            c[n] && y(c[n], I, n);
        t.exports = {
          NATIVE_ARRAY_BUFFER_VIEWS: j,
          TYPED_ARRAY_CONSTRUCTOR: _,
          TYPED_ARRAY_TAG: F && I,
          aTypedArray: function (t) {
            if (U(t)) return t;
            throw M("Target is not a typed array");
          },
          aTypedArrayConstructor: function (t) {
            if (s(t) && (!b || g(O, t))) return t;
            throw M(v(t) + " is not a typed array constructor");
          },
          exportTypedArrayMethod: function (t, r, e, n) {
            if (u) {
              if (e)
                for (var o in C) {
                  var i = c[o];
                  if (i && l(i.prototype, t))
                    try {
                      delete i.prototype[t];
                    } catch (e) {
                      try {
                        i.prototype[t] = r;
                      } catch (t) {}
                    }
                }
              (R[t] && !e) || d(R, t, e ? r : (j && T[t]) || r, n);
            }
          },
          exportTypedArrayStaticMethod: function (t, r, e) {
            var n, o;
            if (u) {
              if (b) {
                if (e)
                  for (n in C)
                    if ((o = c[n]) && l(o, t))
                      try {
                        delete o[t];
                      } catch (t) {}
                if (O[t] && !e) return;
                try {
                  return d(O, t, e ? r : (j && O[t]) || r);
                } catch (t) {}
              }
              for (n in C) !(o = c[n]) || (o[t] && !e) || d(o, t, r);
            }
          },
          isView: function (t) {
            if (!f(t)) return !1;
            var r = p(t);
            return "DataView" === r || l(C, r) || l(B, r);
          },
          isTypedArray: U,
          TypedArray: O,
          TypedArrayPrototype: R,
        };
      },
      3331: (t, r, e) => {
        "use strict";
        var n = e(7854),
          o = e(1702),
          i = e(9781),
          a = e(4019),
          u = e(6530),
          c = e(8880),
          s = e(2248),
          f = e(7293),
          l = e(5787),
          p = e(9303),
          v = e(7466),
          y = e(7067),
          d = e(1179),
          h = e(9518),
          g = e(7674),
          m = e(8006).f,
          b = e(3070).f,
          x = e(1285),
          w = e(1589),
          A = e(8003),
          T = e(9909),
          S = u.PROPER,
          E = u.CONFIGURABLE,
          O = T.get,
          R = T.set,
          L = "ArrayBuffer",
          M = "Wrong index",
          P = n.ArrayBuffer,
          I = P,
          _ = I && I.prototype,
          j = n.DataView,
          F = j && j.prototype,
          C = Object.prototype,
          B = n.Array,
          U = n.RangeError,
          Y = o(x),
          k = o([].reverse),
          D = d.pack,
          N = d.unpack,
          V = function (t) {
            return [255 & t];
          },
          q = function (t) {
            return [255 & t, (t >> 8) & 255];
          },
          G = function (t) {
            return [255 & t, (t >> 8) & 255, (t >> 16) & 255, (t >> 24) & 255];
          },
          W = function (t) {
            return (t[3] << 24) | (t[2] << 16) | (t[1] << 8) | t[0];
          },
          H = function (t) {
            return D(t, 23, 4);
          },
          X = function (t) {
            return D(t, 52, 8);
          },
          z = function (t, r) {
            b(t.prototype, r, {
              get: function () {
                return O(this)[r];
              },
            });
          },
          K = function (t, r, e, n) {
            var o = y(e),
              i = O(t);
            if (o + r > i.byteLength) throw U(M);
            var a = O(i.buffer).bytes,
              u = o + i.byteOffset,
              c = w(a, u, u + r);
            return n ? c : k(c);
          },
          $ = function (t, r, e, n, o, i) {
            var a = y(e),
              u = O(t);
            if (a + r > u.byteLength) throw U(M);
            for (
              var c = O(u.buffer).bytes, s = a + u.byteOffset, f = n(+o), l = 0;
              l < r;
              l++
            )
              c[s + l] = f[i ? l : r - l - 1];
          };
        if (a) {
          var Z = S && P.name !== L;
          if (
            f(function () {
              P(1);
            }) &&
            f(function () {
              new P(-1);
            }) &&
            !f(function () {
              return new P(), new P(1.5), new P(NaN), Z && !E;
            })
          )
            Z && E && c(P, "name", L);
          else {
            (I = function (t) {
              return l(this, _), new P(y(t));
            }).prototype = _;
            for (var J, Q = m(P), tt = 0; Q.length > tt; )
              (J = Q[tt++]) in I || c(I, J, P[J]);
            _.constructor = I;
          }
          g && h(F) !== C && g(F, C);
          var rt = new j(new I(2)),
            et = o(F.setInt8);
          rt.setInt8(0, 2147483648),
            rt.setInt8(1, 2147483649),
            (!rt.getInt8(0) && rt.getInt8(1)) ||
              s(
                F,
                {
                  setInt8: function (t, r) {
                    et(this, t, (r << 24) >> 24);
                  },
                  setUint8: function (t, r) {
                    et(this, t, (r << 24) >> 24);
                  },
                },
                { unsafe: !0 }
              );
        } else
          (_ = (I = function (t) {
            l(this, _);
            var r = y(t);
            R(this, { bytes: Y(B(r), 0), byteLength: r }),
              i || (this.byteLength = r);
          }).prototype),
            (F = (j = function (t, r, e) {
              l(this, F), l(t, _);
              var n = O(t).byteLength,
                o = p(r);
              if (o < 0 || o > n) throw U("Wrong offset");
              if (o + (e = void 0 === e ? n - o : v(e)) > n)
                throw U("Wrong length");
              R(this, { buffer: t, byteLength: e, byteOffset: o }),
                i ||
                  ((this.buffer = t),
                  (this.byteLength = e),
                  (this.byteOffset = o));
            }).prototype),
            i &&
              (z(I, "byteLength"),
              z(j, "buffer"),
              z(j, "byteLength"),
              z(j, "byteOffset")),
            s(F, {
              getInt8: function (t) {
                return (K(this, 1, t)[0] << 24) >> 24;
              },
              getUint8: function (t) {
                return K(this, 1, t)[0];
              },
              getInt16: function (t) {
                var r = K(
                  this,
                  2,
                  t,
                  arguments.length > 1 ? arguments[1] : void 0
                );
                return (((r[1] << 8) | r[0]) << 16) >> 16;
              },
              getUint16: function (t) {
                var r = K(
                  this,
                  2,
                  t,
                  arguments.length > 1 ? arguments[1] : void 0
                );
                return (r[1] << 8) | r[0];
              },
              getInt32: function (t) {
                return W(
                  K(this, 4, t, arguments.length > 1 ? arguments[1] : void 0)
                );
              },
              getUint32: function (t) {
                return (
                  W(
                    K(this, 4, t, arguments.length > 1 ? arguments[1] : void 0)
                  ) >>> 0
                );
              },
              getFloat32: function (t) {
                return N(
                  K(this, 4, t, arguments.length > 1 ? arguments[1] : void 0),
                  23
                );
              },
              getFloat64: function (t) {
                return N(
                  K(this, 8, t, arguments.length > 1 ? arguments[1] : void 0),
                  52
                );
              },
              setInt8: function (t, r) {
                $(this, 1, t, V, r);
              },
              setUint8: function (t, r) {
                $(this, 1, t, V, r);
              },
              setInt16: function (t, r) {
                $(
                  this,
                  2,
                  t,
                  q,
                  r,
                  arguments.length > 2 ? arguments[2] : void 0
                );
              },
              setUint16: function (t, r) {
                $(
                  this,
                  2,
                  t,
                  q,
                  r,
                  arguments.length > 2 ? arguments[2] : void 0
                );
              },
              setInt32: function (t, r) {
                $(
                  this,
                  4,
                  t,
                  G,
                  r,
                  arguments.length > 2 ? arguments[2] : void 0
                );
              },
              setUint32: function (t, r) {
                $(
                  this,
                  4,
                  t,
                  G,
                  r,
                  arguments.length > 2 ? arguments[2] : void 0
                );
              },
              setFloat32: function (t, r) {
                $(
                  this,
                  4,
                  t,
                  H,
                  r,
                  arguments.length > 2 ? arguments[2] : void 0
                );
              },
              setFloat64: function (t, r) {
                $(
                  this,
                  8,
                  t,
                  X,
                  r,
                  arguments.length > 2 ? arguments[2] : void 0
                );
              },
            });
        A(I, L),
          A(j, "DataView"),
          (t.exports = { ArrayBuffer: I, DataView: j });
      },
      1048: (t, r, e) => {
        "use strict";
        var n = e(7908),
          o = e(1400),
          i = e(6244),
          a = Math.min;
        t.exports =
          [].copyWithin ||
          function (t, r) {
            var e = n(this),
              u = i(e),
              c = o(t, u),
              s = o(r, u),
              f = arguments.length > 2 ? arguments[2] : void 0,
              l = a((void 0 === f ? u : o(f, u)) - s, u - c),
              p = 1;
            for (
              s < c && c < s + l && ((p = -1), (s += l - 1), (c += l - 1));
              l-- > 0;

            )
              s in e ? (e[c] = e[s]) : delete e[c], (c += p), (s += p);
            return e;
          };
      },
      1285: (t, r, e) => {
        "use strict";
        var n = e(7908),
          o = e(1400),
          i = e(6244);
        t.exports = function (t) {
          for (
            var r = n(this),
              e = i(r),
              a = arguments.length,
              u = o(a > 1 ? arguments[1] : void 0, e),
              c = a > 2 ? arguments[2] : void 0,
              s = void 0 === c ? e : o(c, e);
            s > u;

          )
            r[u++] = t;
          return r;
        };
      },
      8533: (t, r, e) => {
        "use strict";
        var n = e(2092).forEach,
          o = e(9341)("forEach");
        t.exports = o
          ? [].forEach
          : function (t) {
              return n(this, t, arguments.length > 1 ? arguments[1] : void 0);
            };
      },
      7745: (t, r, e) => {
        var n = e(6244);
        t.exports = function (t, r) {
          for (var e = 0, o = n(r), i = new t(o); o > e; ) i[e] = r[e++];
          return i;
        };
      },
      8457: (t, r, e) => {
        "use strict";
        var n = e(7854),
          o = e(9974),
          i = e(6916),
          a = e(7908),
          u = e(3411),
          c = e(7659),
          s = e(4411),
          f = e(6244),
          l = e(6135),
          p = e(8554),
          v = e(1246),
          y = n.Array;
        t.exports = function (t) {
          var r = a(t),
            e = s(this),
            n = arguments.length,
            d = n > 1 ? arguments[1] : void 0,
            h = void 0 !== d;
          h && (d = o(d, n > 2 ? arguments[2] : void 0));
          var g,
            m,
            b,
            x,
            w,
            A,
            T = v(r),
            S = 0;
          if (!T || (this == y && c(T)))
            for (g = f(r), m = e ? new this(g) : y(g); g > S; S++)
              (A = h ? d(r[S], S) : r[S]), l(m, S, A);
          else
            for (
              w = (x = p(r, T)).next, m = e ? new this() : [];
              !(b = i(w, x)).done;
              S++
            )
              (A = h ? u(x, d, [b.value, S], !0) : b.value), l(m, S, A);
          return (m.length = S), m;
        };
      },
      1318: (t, r, e) => {
        var n = e(5656),
          o = e(1400),
          i = e(6244),
          a = function (t) {
            return function (r, e, a) {
              var u,
                c = n(r),
                s = i(c),
                f = o(a, s);
              if (t && e != e) {
                for (; s > f; ) if ((u = c[f++]) != u) return !0;
              } else
                for (; s > f; f++)
                  if ((t || f in c) && c[f] === e) return t || f || 0;
              return !t && -1;
            };
          };
        t.exports = { includes: a(!0), indexOf: a(!1) };
      },
      2092: (t, r, e) => {
        var n = e(9974),
          o = e(1702),
          i = e(8361),
          a = e(7908),
          u = e(6244),
          c = e(5417),
          s = o([].push),
          f = function (t) {
            var r = 1 == t,
              e = 2 == t,
              o = 3 == t,
              f = 4 == t,
              l = 6 == t,
              p = 7 == t,
              v = 5 == t || l;
            return function (y, d, h, g) {
              for (
                var m,
                  b,
                  x = a(y),
                  w = i(x),
                  A = n(d, h),
                  T = u(w),
                  S = 0,
                  E = g || c,
                  O = r ? E(y, T) : e || p ? E(y, 0) : void 0;
                T > S;
                S++
              )
                if ((v || S in w) && ((b = A((m = w[S]), S, x)), t))
                  if (r) O[S] = b;
                  else if (b)
                    switch (t) {
                      case 3:
                        return !0;
                      case 5:
                        return m;
                      case 6:
                        return S;
                      case 2:
                        s(O, m);
                    }
                  else
                    switch (t) {
                      case 4:
                        return !1;
                      case 7:
                        s(O, m);
                    }
              return l ? -1 : o || f ? f : O;
            };
          };
        t.exports = {
          forEach: f(0),
          map: f(1),
          filter: f(2),
          some: f(3),
          every: f(4),
          find: f(5),
          findIndex: f(6),
          filterReject: f(7),
        };
      },
      6583: (t, r, e) => {
        "use strict";
        var n = e(2104),
          o = e(5656),
          i = e(9303),
          a = e(6244),
          u = e(9341),
          c = Math.min,
          s = [].lastIndexOf,
          f = !!s && 1 / [1].lastIndexOf(1, -0) < 0,
          l = u("lastIndexOf"),
          p = f || !l;
        t.exports = p
          ? function (t) {
              if (f) return n(s, this, arguments) || 0;
              var r = o(this),
                e = a(r),
                u = e - 1;
              for (
                arguments.length > 1 && (u = c(u, i(arguments[1]))),
                  u < 0 && (u = e + u);
                u >= 0;
                u--
              )
                if (u in r && r[u] === t) return u || 0;
              return -1;
            }
          : s;
      },
      9341: (t, r, e) => {
        "use strict";
        var n = e(7293);
        t.exports = function (t, r) {
          var e = [][t];
          return (
            !!e &&
            n(function () {
              e.call(
                null,
                r ||
                  function () {
                    throw 1;
                  },
                1
              );
            })
          );
        };
      },
      3671: (t, r, e) => {
        var n = e(7854),
          o = e(9662),
          i = e(7908),
          a = e(8361),
          u = e(6244),
          c = n.TypeError,
          s = function (t) {
            return function (r, e, n, s) {
              o(e);
              var f = i(r),
                l = a(f),
                p = u(f),
                v = t ? p - 1 : 0,
                y = t ? -1 : 1;
              if (n < 2)
                for (;;) {
                  if (v in l) {
                    (s = l[v]), (v += y);
                    break;
                  }
                  if (((v += y), t ? v < 0 : p <= v))
                    throw c("Reduce of empty array with no initial value");
                }
              for (; t ? v >= 0 : p > v; v += y)
                v in l && (s = e(s, l[v], v, f));
              return s;
            };
          };
        t.exports = { left: s(!1), right: s(!0) };
      },
      1589: (t, r, e) => {
        var n = e(7854),
          o = e(1400),
          i = e(6244),
          a = e(6135),
          u = n.Array,
          c = Math.max;
        t.exports = function (t, r, e) {
          for (
            var n = i(t),
              s = o(r, n),
              f = o(void 0 === e ? n : e, n),
              l = u(c(f - s, 0)),
              p = 0;
            s < f;
            s++, p++
          )
            a(l, p, t[s]);
          return (l.length = p), l;
        };
      },
      206: (t, r, e) => {
        var n = e(1702);
        t.exports = n([].slice);
      },
      4362: (t, r, e) => {
        var n = e(1589),
          o = Math.floor,
          i = function (t, r) {
            var e = t.length,
              c = o(e / 2);
            return e < 8 ? a(t, r) : u(t, i(n(t, 0, c), r), i(n(t, c), r), r);
          },
          a = function (t, r) {
            for (var e, n, o = t.length, i = 1; i < o; ) {
              for (n = i, e = t[i]; n && r(t[n - 1], e) > 0; ) t[n] = t[--n];
              n !== i++ && (t[n] = e);
            }
            return t;
          },
          u = function (t, r, e, n) {
            for (var o = r.length, i = e.length, a = 0, u = 0; a < o || u < i; )
              t[a + u] =
                a < o && u < i
                  ? n(r[a], e[u]) <= 0
                    ? r[a++]
                    : e[u++]
                  : a < o
                  ? r[a++]
                  : e[u++];
            return t;
          };
        t.exports = i;
      },
      7475: (t, r, e) => {
        var n = e(7854),
          o = e(3157),
          i = e(4411),
          a = e(111),
          u = e(5112)("species"),
          c = n.Array;
        t.exports = function (t) {
          var r;
          return (
            o(t) &&
              ((r = t.constructor),
              ((i(r) && (r === c || o(r.prototype))) ||
                (a(r) && null === (r = r[u]))) &&
                (r = void 0)),
            void 0 === r ? c : r
          );
        };
      },
      5417: (t, r, e) => {
        var n = e(7475);
        t.exports = function (t, r) {
          return new (n(t))(0 === r ? 0 : r);
        };
      },
      3411: (t, r, e) => {
        var n = e(9670),
          o = e(9212);
        t.exports = function (t, r, e, i) {
          try {
            return i ? r(n(e)[0], e[1]) : r(e);
          } catch (r) {
            o(t, "throw", r);
          }
        };
      },
      7072: (t, r, e) => {
        var n = e(5112)("iterator"),
          o = !1;
        try {
          var i = 0,
            a = {
              next: function () {
                return { done: !!i++ };
              },
              return: function () {
                o = !0;
              },
            };
          (a[n] = function () {
            return this;
          }),
            Array.from(a, function () {
              throw 2;
            });
        } catch (t) {}
        t.exports = function (t, r) {
          if (!r && !o) return !1;
          var e = !1;
          try {
            var i = {};
            (i[n] = function () {
              return {
                next: function () {
                  return { done: (e = !0) };
                },
              };
            }),
              t(i);
          } catch (t) {}
          return e;
        };
      },
      4326: (t, r, e) => {
        var n = e(1702),
          o = n({}.toString),
          i = n("".slice);
        t.exports = function (t) {
          return i(o(t), 8, -1);
        };
      },
      648: (t, r, e) => {
        var n = e(7854),
          o = e(1694),
          i = e(614),
          a = e(4326),
          u = e(5112)("toStringTag"),
          c = n.Object,
          s =
            "Arguments" ==
            a(
              (function () {
                return arguments;
              })()
            );
        t.exports = o
          ? a
          : function (t) {
              var r, e, n;
              return void 0 === t
                ? "Undefined"
                : null === t
                ? "Null"
                : "string" ==
                  typeof (e = (function (t, r) {
                    try {
                      return t[r];
                    } catch (t) {}
                  })((r = c(t)), u))
                ? e
                : s
                ? a(r)
                : "Object" == (n = a(r)) && i(r.callee)
                ? "Arguments"
                : n;
            };
      },
      9920: (t, r, e) => {
        var n = e(2597),
          o = e(3887),
          i = e(1236),
          a = e(3070);
        t.exports = function (t, r, e) {
          for (var u = o(r), c = a.f, s = i.f, f = 0; f < u.length; f++) {
            var l = u[f];
            n(t, l) || (e && n(e, l)) || c(t, l, s(r, l));
          }
        };
      },
      8544: (t, r, e) => {
        var n = e(7293);
        t.exports = !n(function () {
          function t() {}
          return (
            (t.prototype.constructor = null),
            Object.getPrototypeOf(new t()) !== t.prototype
          );
        });
      },
      4994: (t, r, e) => {
        "use strict";
        var n = e(3383).IteratorPrototype,
          o = e(30),
          i = e(9114),
          a = e(8003),
          u = e(7497),
          c = function () {
            return this;
          };
        t.exports = function (t, r, e, s) {
          var f = r + " Iterator";
          return (
            (t.prototype = o(n, { next: i(+!s, e) })),
            a(t, f, !1, !0),
            (u[f] = c),
            t
          );
        };
      },
      8880: (t, r, e) => {
        var n = e(9781),
          o = e(3070),
          i = e(9114);
        t.exports = n
          ? function (t, r, e) {
              return o.f(t, r, i(1, e));
            }
          : function (t, r, e) {
              return (t[r] = e), t;
            };
      },
      9114: (t) => {
        t.exports = function (t, r) {
          return {
            enumerable: !(1 & t),
            configurable: !(2 & t),
            writable: !(4 & t),
            value: r,
          };
        };
      },
      6135: (t, r, e) => {
        "use strict";
        var n = e(4948),
          o = e(3070),
          i = e(9114);
        t.exports = function (t, r, e) {
          var a = n(r);
          a in t ? o.f(t, a, i(0, e)) : (t[a] = e);
        };
      },
      654: (t, r, e) => {
        "use strict";
        var n = e(2109),
          o = e(6916),
          i = e(1913),
          a = e(6530),
          u = e(614),
          c = e(4994),
          s = e(9518),
          f = e(7674),
          l = e(8003),
          p = e(8880),
          v = e(1320),
          y = e(5112),
          d = e(7497),
          h = e(3383),
          g = a.PROPER,
          m = a.CONFIGURABLE,
          b = h.IteratorPrototype,
          x = h.BUGGY_SAFARI_ITERATORS,
          w = y("iterator"),
          A = "keys",
          T = "values",
          S = "entries",
          E = function () {
            return this;
          };
        t.exports = function (t, r, e, a, y, h, O) {
          c(e, r, a);
          var R,
            L,
            M,
            P = function (t) {
              if (t === y && C) return C;
              if (!x && t in j) return j[t];
              switch (t) {
                case A:
                case T:
                case S:
                  return function () {
                    return new e(this, t);
                  };
              }
              return function () {
                return new e(this);
              };
            },
            I = r + " Iterator",
            _ = !1,
            j = t.prototype,
            F = j[w] || j["@@iterator"] || (y && j[y]),
            C = (!x && F) || P(y),
            B = ("Array" == r && j.entries) || F;
          if (
            (B &&
              (R = s(B.call(new t()))) !== Object.prototype &&
              R.next &&
              (i || s(R) === b || (f ? f(R, b) : u(R[w]) || v(R, w, E)),
              l(R, I, !0, !0),
              i && (d[I] = E)),
            g &&
              y == T &&
              F &&
              F.name !== T &&
              (!i && m
                ? p(j, "name", T)
                : ((_ = !0),
                  (C = function () {
                    return o(F, this);
                  }))),
            y)
          )
            if (((L = { values: P(T), keys: h ? C : P(A), entries: P(S) }), O))
              for (M in L) (x || _ || !(M in j)) && v(j, M, L[M]);
            else n({ target: r, proto: !0, forced: x || _ }, L);
          return (
            (i && !O) || j[w] === C || v(j, w, C, { name: y }), (d[r] = C), L
          );
        };
      },
      9781: (t, r, e) => {
        var n = e(7293);
        t.exports = !n(function () {
          return (
            7 !=
            Object.defineProperty({}, 1, {
              get: function () {
                return 7;
              },
            })[1]
          );
        });
      },
      317: (t, r, e) => {
        var n = e(7854),
          o = e(111),
          i = n.document,
          a = o(i) && o(i.createElement);
        t.exports = function (t) {
          return a ? i.createElement(t) : {};
        };
      },
      8324: (t) => {
        t.exports = {
          CSSRuleList: 0,
          CSSStyleDeclaration: 0,
          CSSValueList: 0,
          ClientRectList: 0,
          DOMRectList: 0,
          DOMStringList: 0,
          DOMTokenList: 1,
          DataTransferItemList: 0,
          FileList: 0,
          HTMLAllCollection: 0,
          HTMLCollection: 0,
          HTMLFormElement: 0,
          HTMLSelectElement: 0,
          MediaList: 0,
          MimeTypeArray: 0,
          NamedNodeMap: 0,
          NodeList: 1,
          PaintRequestList: 0,
          Plugin: 0,
          PluginArray: 0,
          SVGLengthList: 0,
          SVGNumberList: 0,
          SVGPathSegList: 0,
          SVGPointList: 0,
          SVGStringList: 0,
          SVGTransformList: 0,
          SourceBufferList: 0,
          StyleSheetList: 0,
          TextTrackCueList: 0,
          TextTrackList: 0,
          TouchList: 0,
        };
      },
      8509: (t, r, e) => {
        var n = e(317)("span").classList,
          o = n && n.constructor && n.constructor.prototype;
        t.exports = o === Object.prototype ? void 0 : o;
      },
      8886: (t, r, e) => {
        var n = e(8113).match(/firefox\/(\d+)/i);
        t.exports = !!n && +n[1];
      },
      256: (t, r, e) => {
        var n = e(8113);
        t.exports = /MSIE|Trident/.test(n);
      },
      8113: (t, r, e) => {
        var n = e(5005);
        t.exports = n("navigator", "userAgent") || "";
      },
      7392: (t, r, e) => {
        var n,
          o,
          i = e(7854),
          a = e(8113),
          u = i.process,
          c = i.Deno,
          s = (u && u.versions) || (c && c.version),
          f = s && s.v8;
        f && (o = (n = f.split("."))[0] > 0 && n[0] < 4 ? 1 : +(n[0] + n[1])),
          !o &&
            a &&
            (!(n = a.match(/Edge\/(\d+)/)) || n[1] >= 74) &&
            (n = a.match(/Chrome\/(\d+)/)) &&
            (o = +n[1]),
          (t.exports = o);
      },
      8008: (t, r, e) => {
        var n = e(8113).match(/AppleWebKit\/(\d+)\./);
        t.exports = !!n && +n[1];
      },
      748: (t) => {
        t.exports = [
          "constructor",
          "hasOwnProperty",
          "isPrototypeOf",
          "propertyIsEnumerable",
          "toLocaleString",
          "toString",
          "valueOf",
        ];
      },
      2109: (t, r, e) => {
        var n = e(7854),
          o = e(1236).f,
          i = e(8880),
          a = e(1320),
          u = e(3505),
          c = e(9920),
          s = e(4705);
        t.exports = function (t, r) {
          var e,
            f,
            l,
            p,
            v,
            y = t.target,
            d = t.global,
            h = t.stat;
          if ((e = d ? n : h ? n[y] || u(y, {}) : (n[y] || {}).prototype))
            for (f in r) {
              if (
                ((p = r[f]),
                (l = t.noTargetGet ? (v = o(e, f)) && v.value : e[f]),
                !s(d ? f : y + (h ? "." : "#") + f, t.forced) && void 0 !== l)
              ) {
                if (typeof p == typeof l) continue;
                c(p, l);
              }
              (t.sham || (l && l.sham)) && i(p, "sham", !0), a(e, f, p, t);
            }
        };
      },
      7293: (t) => {
        t.exports = function (t) {
          try {
            return !!t();
          } catch (t) {
            return !0;
          }
        };
      },
      2104: (t, r, e) => {
        var n = e(4374),
          o = Function.prototype,
          i = o.apply,
          a = o.call;
        t.exports =
          ("object" == typeof Reflect && Reflect.apply) ||
          (n
            ? a.bind(i)
            : function () {
                return a.apply(i, arguments);
              });
      },
      9974: (t, r, e) => {
        var n = e(1702),
          o = e(9662),
          i = e(4374),
          a = n(n.bind);
        t.exports = function (t, r) {
          return (
            o(t),
            void 0 === r
              ? t
              : i
              ? a(t, r)
              : function () {
                  return t.apply(r, arguments);
                }
          );
        };
      },
      4374: (t, r, e) => {
        var n = e(7293);
        t.exports = !n(function () {
          var t = function () {}.bind();
          return "function" != typeof t || t.hasOwnProperty("prototype");
        });
      },
      6916: (t, r, e) => {
        var n = e(4374),
          o = Function.prototype.call;
        t.exports = n
          ? o.bind(o)
          : function () {
              return o.apply(o, arguments);
            };
      },
      6530: (t, r, e) => {
        var n = e(9781),
          o = e(2597),
          i = Function.prototype,
          a = n && Object.getOwnPropertyDescriptor,
          u = o(i, "name"),
          c = u && "something" === function () {}.name,
          s = u && (!n || (n && a(i, "name").configurable));
        t.exports = { EXISTS: u, PROPER: c, CONFIGURABLE: s };
      },
      1702: (t, r, e) => {
        var n = e(4374),
          o = Function.prototype,
          i = o.bind,
          a = o.call,
          u = n && i.bind(a, a);
        t.exports = n
          ? function (t) {
              return t && u(t);
            }
          : function (t) {
              return (
                t &&
                function () {
                  return a.apply(t, arguments);
                }
              );
            };
      },
      5005: (t, r, e) => {
        var n = e(7854),
          o = e(614),
          i = function (t) {
            return o(t) ? t : void 0;
          };
        t.exports = function (t, r) {
          return arguments.length < 2 ? i(n[t]) : n[t] && n[t][r];
        };
      },
      1246: (t, r, e) => {
        var n = e(648),
          o = e(8173),
          i = e(7497),
          a = e(5112)("iterator");
        t.exports = function (t) {
          if (null != t) return o(t, a) || o(t, "@@iterator") || i[n(t)];
        };
      },
      8554: (t, r, e) => {
        var n = e(7854),
          o = e(6916),
          i = e(9662),
          a = e(9670),
          u = e(6330),
          c = e(1246),
          s = n.TypeError;
        t.exports = function (t, r) {
          var e = arguments.length < 2 ? c(t) : r;
          if (i(e)) return a(o(e, t));
          throw s(u(t) + " is not iterable");
        };
      },
      8173: (t, r, e) => {
        var n = e(9662);
        t.exports = function (t, r) {
          var e = t[r];
          return null == e ? void 0 : n(e);
        };
      },
      7854: (t, r, e) => {
        var n = function (t) {
          return t && t.Math == Math && t;
        };
        t.exports =
          n("object" == typeof globalThis && globalThis) ||
          n("object" == typeof window && window) ||
          n("object" == typeof self && self) ||
          n("object" == typeof e.g && e.g) ||
          (function () {
            return this;
          })() ||
          Function("return this")();
      },
      2597: (t, r, e) => {
        var n = e(1702),
          o = e(7908),
          i = n({}.hasOwnProperty);
        t.exports =
          Object.hasOwn ||
          function (t, r) {
            return i(o(t), r);
          };
      },
      3501: (t) => {
        t.exports = {};
      },
      490: (t, r, e) => {
        var n = e(5005);
        t.exports = n("document", "documentElement");
      },
      4664: (t, r, e) => {
        var n = e(9781),
          o = e(7293),
          i = e(317);
        t.exports =
          !n &&
          !o(function () {
            return (
              7 !=
              Object.defineProperty(i("div"), "a", {
                get: function () {
                  return 7;
                },
              }).a
            );
          });
      },
      1179: (t, r, e) => {
        var n = e(7854).Array,
          o = Math.abs,
          i = Math.pow,
          a = Math.floor,
          u = Math.log,
          c = Math.LN2;
        t.exports = {
          pack: function (t, r, e) {
            var s,
              f,
              l,
              p = n(e),
              v = 8 * e - r - 1,
              y = (1 << v) - 1,
              d = y >> 1,
              h = 23 === r ? i(2, -24) - i(2, -77) : 0,
              g = t < 0 || (0 === t && 1 / t < 0) ? 1 : 0,
              m = 0;
            for (
              (t = o(t)) != t || t === 1 / 0
                ? ((f = t != t ? 1 : 0), (s = y))
                : ((s = a(u(t) / c)),
                  t * (l = i(2, -s)) < 1 && (s--, (l *= 2)),
                  (t += s + d >= 1 ? h / l : h * i(2, 1 - d)) * l >= 2 &&
                    (s++, (l /= 2)),
                  s + d >= y
                    ? ((f = 0), (s = y))
                    : s + d >= 1
                    ? ((f = (t * l - 1) * i(2, r)), (s += d))
                    : ((f = t * i(2, d - 1) * i(2, r)), (s = 0)));
              r >= 8;

            )
              (p[m++] = 255 & f), (f /= 256), (r -= 8);
            for (s = (s << r) | f, v += r; v > 0; )
              (p[m++] = 255 & s), (s /= 256), (v -= 8);
            return (p[--m] |= 128 * g), p;
          },
          unpack: function (t, r) {
            var e,
              n = t.length,
              o = 8 * n - r - 1,
              a = (1 << o) - 1,
              u = a >> 1,
              c = o - 7,
              s = n - 1,
              f = t[s--],
              l = 127 & f;
            for (f >>= 7; c > 0; ) (l = 256 * l + t[s--]), (c -= 8);
            for (e = l & ((1 << -c) - 1), l >>= -c, c += r; c > 0; )
              (e = 256 * e + t[s--]), (c -= 8);
            if (0 === l) l = 1 - u;
            else {
              if (l === a) return e ? NaN : f ? -1 / 0 : 1 / 0;
              (e += i(2, r)), (l -= u);
            }
            return (f ? -1 : 1) * e * i(2, l - r);
          },
        };
      },
      8361: (t, r, e) => {
        var n = e(7854),
          o = e(1702),
          i = e(7293),
          a = e(4326),
          u = n.Object,
          c = o("".split);
        t.exports = i(function () {
          return !u("z").propertyIsEnumerable(0);
        })
          ? function (t) {
              return "String" == a(t) ? c(t, "") : u(t);
            }
          : u;
      },
      9587: (t, r, e) => {
        var n = e(614),
          o = e(111),
          i = e(7674);
        t.exports = function (t, r, e) {
          var a, u;
          return (
            i &&
              n((a = r.constructor)) &&
              a !== e &&
              o((u = a.prototype)) &&
              u !== e.prototype &&
              i(t, u),
            t
          );
        };
      },
      2788: (t, r, e) => {
        var n = e(1702),
          o = e(614),
          i = e(5465),
          a = n(Function.toString);
        o(i.inspectSource) ||
          (i.inspectSource = function (t) {
            return a(t);
          }),
          (t.exports = i.inspectSource);
      },
      9909: (t, r, e) => {
        var n,
          o,
          i,
          a = e(8536),
          u = e(7854),
          c = e(1702),
          s = e(111),
          f = e(8880),
          l = e(2597),
          p = e(5465),
          v = e(6200),
          y = e(3501),
          d = "Object already initialized",
          h = u.TypeError,
          g = u.WeakMap;
        if (a || p.state) {
          var m = p.state || (p.state = new g()),
            b = c(m.get),
            x = c(m.has),
            w = c(m.set);
          (n = function (t, r) {
            if (x(m, t)) throw new h(d);
            return (r.facade = t), w(m, t, r), r;
          }),
            (o = function (t) {
              return b(m, t) || {};
            }),
            (i = function (t) {
              return x(m, t);
            });
        } else {
          var A = v("state");
          (y[A] = !0),
            (n = function (t, r) {
              if (l(t, A)) throw new h(d);
              return (r.facade = t), f(t, A, r), r;
            }),
            (o = function (t) {
              return l(t, A) ? t[A] : {};
            }),
            (i = function (t) {
              return l(t, A);
            });
        }
        t.exports = {
          set: n,
          get: o,
          has: i,
          enforce: function (t) {
            return i(t) ? o(t) : n(t, {});
          },
          getterFor: function (t) {
            return function (r) {
              var e;
              if (!s(r) || (e = o(r)).type !== t)
                throw h("Incompatible receiver, " + t + " required");
              return e;
            };
          },
        };
      },
      7659: (t, r, e) => {
        var n = e(5112),
          o = e(7497),
          i = n("iterator"),
          a = Array.prototype;
        t.exports = function (t) {
          return void 0 !== t && (o.Array === t || a[i] === t);
        };
      },
      3157: (t, r, e) => {
        var n = e(4326);
        t.exports =
          Array.isArray ||
          function (t) {
            return "Array" == n(t);
          };
      },
      614: (t) => {
        t.exports = function (t) {
          return "function" == typeof t;
        };
      },
      4411: (t, r, e) => {
        var n = e(1702),
          o = e(7293),
          i = e(614),
          a = e(648),
          u = e(5005),
          c = e(2788),
          s = function () {},
          f = [],
          l = u("Reflect", "construct"),
          p = /^\s*(?:class|function)\b/,
          v = n(p.exec),
          y = !p.exec(s),
          d = function (t) {
            if (!i(t)) return !1;
            try {
              return l(s, f, t), !0;
            } catch (t) {
              return !1;
            }
          },
          h = function (t) {
            if (!i(t)) return !1;
            switch (a(t)) {
              case "AsyncFunction":
              case "GeneratorFunction":
              case "AsyncGeneratorFunction":
                return !1;
            }
            try {
              return y || !!v(p, c(t));
            } catch (t) {
              return !0;
            }
          };
        (h.sham = !0),
          (t.exports =
            !l ||
            o(function () {
              var t;
              return (
                d(d.call) ||
                !d(Object) ||
                !d(function () {
                  t = !0;
                }) ||
                t
              );
            })
              ? h
              : d);
      },
      4705: (t, r, e) => {
        var n = e(7293),
          o = e(614),
          i = /#|\.prototype\./,
          a = function (t, r) {
            var e = c[u(t)];
            return e == f || (e != s && (o(r) ? n(r) : !!r));
          },
          u = (a.normalize = function (t) {
            return String(t).replace(i, ".").toLowerCase();
          }),
          c = (a.data = {}),
          s = (a.NATIVE = "N"),
          f = (a.POLYFILL = "P");
        t.exports = a;
      },
      5988: (t, r, e) => {
        var n = e(111),
          o = Math.floor;
        t.exports =
          Number.isInteger ||
          function (t) {
            return !n(t) && isFinite(t) && o(t) === t;
          };
      },
      111: (t, r, e) => {
        var n = e(614);
        t.exports = function (t) {
          return "object" == typeof t ? null !== t : n(t);
        };
      },
      1913: (t) => {
        t.exports = !1;
      },
      2190: (t, r, e) => {
        var n = e(7854),
          o = e(5005),
          i = e(614),
          a = e(7976),
          u = e(3307),
          c = n.Object;
        t.exports = u
          ? function (t) {
              return "symbol" == typeof t;
            }
          : function (t) {
              var r = o("Symbol");
              return i(r) && a(r.prototype, c(t));
            };
      },
      9212: (t, r, e) => {
        var n = e(6916),
          o = e(9670),
          i = e(8173);
        t.exports = function (t, r, e) {
          var a, u;
          o(t);
          try {
            if (!(a = i(t, "return"))) {
              if ("throw" === r) throw e;
              return e;
            }
            a = n(a, t);
          } catch (t) {
            (u = !0), (a = t);
          }
          if ("throw" === r) throw e;
          if (u) throw a;
          return o(a), e;
        };
      },
      3383: (t, r, e) => {
        "use strict";
        var n,
          o,
          i,
          a = e(7293),
          u = e(614),
          c = e(30),
          s = e(9518),
          f = e(1320),
          l = e(5112),
          p = e(1913),
          v = l("iterator"),
          y = !1;
        [].keys &&
          ("next" in (i = [].keys())
            ? (o = s(s(i))) !== Object.prototype && (n = o)
            : (y = !0)),
          null == n ||
          a(function () {
            var t = {};
            return n[v].call(t) !== t;
          })
            ? (n = {})
            : p && (n = c(n)),
          u(n[v]) ||
            f(n, v, function () {
              return this;
            }),
          (t.exports = { IteratorPrototype: n, BUGGY_SAFARI_ITERATORS: y });
      },
      7497: (t) => {
        t.exports = {};
      },
      6244: (t, r, e) => {
        var n = e(7466);
        t.exports = function (t) {
          return n(t.length);
        };
      },
      133: (t, r, e) => {
        var n = e(7392),
          o = e(7293);
        t.exports =
          !!Object.getOwnPropertySymbols &&
          !o(function () {
            var t = Symbol();
            return (
              !String(t) ||
              !(Object(t) instanceof Symbol) ||
              (!Symbol.sham && n && n < 41)
            );
          });
      },
      8536: (t, r, e) => {
        var n = e(7854),
          o = e(614),
          i = e(2788),
          a = n.WeakMap;
        t.exports = o(a) && /native code/.test(i(a));
      },
      3009: (t, r, e) => {
        var n = e(7854),
          o = e(7293),
          i = e(1702),
          a = e(1340),
          u = e(3111).trim,
          c = e(1361),
          s = n.parseInt,
          f = n.Symbol,
          l = f && f.iterator,
          p = /^[+-]?0x/i,
          v = i(p.exec),
          y =
            8 !== s(c + "08") ||
            22 !== s(c + "0x16") ||
            (l &&
              !o(function () {
                s(Object(l));
              }));
        t.exports = y
          ? function (t, r) {
              var e = u(a(t));
              return s(e, r >>> 0 || (v(p, e) ? 16 : 10));
            }
          : s;
      },
      30: (t, r, e) => {
        var n,
          o = e(9670),
          i = e(6048),
          a = e(748),
          u = e(3501),
          c = e(490),
          s = e(317),
          f = e(6200)("IE_PROTO"),
          l = function () {},
          p = function (t) {
            return "<script>" + t + "</script>";
          },
          v = function (t) {
            t.write(p("")), t.close();
            var r = t.parentWindow.Object;
            return (t = null), r;
          },
          y = function () {
            try {
              n = new ActiveXObject("htmlfile");
            } catch (t) {}
            var t, r;
            y =
              "undefined" != typeof document
                ? document.domain && n
                  ? v(n)
                  : (((r = s("iframe")).style.display = "none"),
                    c.appendChild(r),
                    (r.src = String("javascript:")),
                    (t = r.contentWindow.document).open(),
                    t.write(p("document.F=Object")),
                    t.close(),
                    t.F)
                : v(n);
            for (var e = a.length; e--; ) delete y.prototype[a[e]];
            return y();
          };
        (u[f] = !0),
          (t.exports =
            Object.create ||
            function (t, r) {
              var e;
              return (
                null !== t
                  ? ((l.prototype = o(t)),
                    (e = new l()),
                    (l.prototype = null),
                    (e[f] = t))
                  : (e = y()),
                void 0 === r ? e : i.f(e, r)
              );
            });
      },
      6048: (t, r, e) => {
        var n = e(9781),
          o = e(3353),
          i = e(3070),
          a = e(9670),
          u = e(5656),
          c = e(1956);
        r.f =
          n && !o
            ? Object.defineProperties
            : function (t, r) {
                a(t);
                for (var e, n = u(r), o = c(r), s = o.length, f = 0; s > f; )
                  i.f(t, (e = o[f++]), n[e]);
                return t;
              };
      },
      3070: (t, r, e) => {
        var n = e(7854),
          o = e(9781),
          i = e(4664),
          a = e(3353),
          u = e(9670),
          c = e(4948),
          s = n.TypeError,
          f = Object.defineProperty,
          l = Object.getOwnPropertyDescriptor;
        r.f = o
          ? a
            ? function (t, r, e) {
                if (
                  (u(t),
                  (r = c(r)),
                  u(e),
                  "function" == typeof t &&
                    "prototype" === r &&
                    "value" in e &&
                    "writable" in e &&
                    !e.writable)
                ) {
                  var n = l(t, r);
                  n &&
                    n.writable &&
                    ((t[r] = e.value),
                    (e = {
                      configurable:
                        "configurable" in e ? e.configurable : n.configurable,
                      enumerable:
                        "enumerable" in e ? e.enumerable : n.enumerable,
                      writable: !1,
                    }));
                }
                return f(t, r, e);
              }
            : f
          : function (t, r, e) {
              if ((u(t), (r = c(r)), u(e), i))
                try {
                  return f(t, r, e);
                } catch (t) {}
              if ("get" in e || "set" in e) throw s("Accessors not supported");
              return "value" in e && (t[r] = e.value), t;
            };
      },
      1236: (t, r, e) => {
        var n = e(9781),
          o = e(6916),
          i = e(5296),
          a = e(9114),
          u = e(5656),
          c = e(4948),
          s = e(2597),
          f = e(4664),
          l = Object.getOwnPropertyDescriptor;
        r.f = n
          ? l
          : function (t, r) {
              if (((t = u(t)), (r = c(r)), f))
                try {
                  return l(t, r);
                } catch (t) {}
              if (s(t, r)) return a(!o(i.f, t, r), t[r]);
            };
      },
      8006: (t, r, e) => {
        var n = e(6324),
          o = e(748).concat("length", "prototype");
        r.f =
          Object.getOwnPropertyNames ||
          function (t) {
            return n(t, o);
          };
      },
      5181: (t, r) => {
        r.f = Object.getOwnPropertySymbols;
      },
      9518: (t, r, e) => {
        var n = e(7854),
          o = e(2597),
          i = e(614),
          a = e(7908),
          u = e(6200),
          c = e(8544),
          s = u("IE_PROTO"),
          f = n.Object,
          l = f.prototype;
        t.exports = c
          ? f.getPrototypeOf
          : function (t) {
              var r = a(t);
              if (o(r, s)) return r[s];
              var e = r.constructor;
              return i(e) && r instanceof e
                ? e.prototype
                : r instanceof f
                ? l
                : null;
            };
      },
      7976: (t, r, e) => {
        var n = e(1702);
        t.exports = n({}.isPrototypeOf);
      },
      6324: (t, r, e) => {
        var n = e(1702),
          o = e(2597),
          i = e(5656),
          a = e(1318).indexOf,
          u = e(3501),
          c = n([].push);
        t.exports = function (t, r) {
          var e,
            n = i(t),
            s = 0,
            f = [];
          for (e in n) !o(u, e) && o(n, e) && c(f, e);
          for (; r.length > s; ) o(n, (e = r[s++])) && (~a(f, e) || c(f, e));
          return f;
        };
      },
      1956: (t, r, e) => {
        var n = e(6324),
          o = e(748);
        t.exports =
          Object.keys ||
          function (t) {
            return n(t, o);
          };
      },
      5296: (t, r) => {
        "use strict";
        var e = {}.propertyIsEnumerable,
          n = Object.getOwnPropertyDescriptor,
          o = n && !e.call({ 1: 2 }, 1);
        r.f = o
          ? function (t) {
              var r = n(this, t);
              return !!r && r.enumerable;
            }
          : e;
      },
      7674: (t, r, e) => {
        var n = e(1702),
          o = e(9670),
          i = e(6077);
        t.exports =
          Object.setPrototypeOf ||
          ("__proto__" in {}
            ? (function () {
                var t,
                  r = !1,
                  e = {};
                try {
                  (t = n(
                    Object.getOwnPropertyDescriptor(
                      Object.prototype,
                      "__proto__"
                    ).set
                  ))(e, []),
                    (r = e instanceof Array);
                } catch (t) {}
                return function (e, n) {
                  return o(e), i(n), r ? t(e, n) : (e.__proto__ = n), e;
                };
              })()
            : void 0);
      },
      288: (t, r, e) => {
        "use strict";
        var n = e(1694),
          o = e(648);
        t.exports = n
          ? {}.toString
          : function () {
              return "[object " + o(this) + "]";
            };
      },
      2140: (t, r, e) => {
        var n = e(7854),
          o = e(6916),
          i = e(614),
          a = e(111),
          u = n.TypeError;
        t.exports = function (t, r) {
          var e, n;
          if ("string" === r && i((e = t.toString)) && !a((n = o(e, t))))
            return n;
          if (i((e = t.valueOf)) && !a((n = o(e, t)))) return n;
          if ("string" !== r && i((e = t.toString)) && !a((n = o(e, t))))
            return n;
          throw u("Can't convert object to primitive value");
        };
      },
      3887: (t, r, e) => {
        var n = e(5005),
          o = e(1702),
          i = e(8006),
          a = e(5181),
          u = e(9670),
          c = o([].concat);
        t.exports =
          n("Reflect", "ownKeys") ||
          function (t) {
            var r = i.f(u(t)),
              e = a.f;
            return e ? c(r, e(t)) : r;
          };
      },
      2248: (t, r, e) => {
        var n = e(1320);
        t.exports = function (t, r, e) {
          for (var o in r) n(t, o, r[o], e);
          return t;
        };
      },
      1320: (t, r, e) => {
        var n = e(7854),
          o = e(614),
          i = e(2597),
          a = e(8880),
          u = e(3505),
          c = e(2788),
          s = e(9909),
          f = e(6530).CONFIGURABLE,
          l = s.get,
          p = s.enforce,
          v = String(String).split("String");
        (t.exports = function (t, r, e, c) {
          var s,
            l = !!c && !!c.unsafe,
            y = !!c && !!c.enumerable,
            d = !!c && !!c.noTargetGet,
            h = c && void 0 !== c.name ? c.name : r;
          o(e) &&
            ("Symbol(" === String(h).slice(0, 7) &&
              (h = "[" + String(h).replace(/^Symbol\(([^)]*)\)/, "$1") + "]"),
            (!i(e, "name") || (f && e.name !== h)) && a(e, "name", h),
            (s = p(e)).source ||
              (s.source = v.join("string" == typeof h ? h : ""))),
            t !== n
              ? (l ? !d && t[r] && (y = !0) : delete t[r],
                y ? (t[r] = e) : a(t, r, e))
              : y
              ? (t[r] = e)
              : u(r, e);
        })(Function.prototype, "toString", function () {
          return (o(this) && l(this).source) || c(this);
        });
      },
      4488: (t, r, e) => {
        var n = e(7854).TypeError;
        t.exports = function (t) {
          if (null == t) throw n("Can't call method on " + t);
          return t;
        };
      },
      3505: (t, r, e) => {
        var n = e(7854),
          o = Object.defineProperty;
        t.exports = function (t, r) {
          try {
            o(n, t, { value: r, configurable: !0, writable: !0 });
          } catch (e) {
            n[t] = r;
          }
          return r;
        };
      },
      6340: (t, r, e) => {
        "use strict";
        var n = e(5005),
          o = e(3070),
          i = e(5112),
          a = e(9781),
          u = i("species");
        t.exports = function (t) {
          var r = n(t),
            e = o.f;
          a &&
            r &&
            !r[u] &&
            e(r, u, {
              configurable: !0,
              get: function () {
                return this;
              },
            });
        };
      },
      8003: (t, r, e) => {
        var n = e(3070).f,
          o = e(2597),
          i = e(5112)("toStringTag");
        t.exports = function (t, r, e) {
          t && !e && (t = t.prototype),
            t && !o(t, i) && n(t, i, { configurable: !0, value: r });
        };
      },
      6200: (t, r, e) => {
        var n = e(2309),
          o = e(9711),
          i = n("keys");
        t.exports = function (t) {
          return i[t] || (i[t] = o(t));
        };
      },
      5465: (t, r, e) => {
        var n = e(7854),
          o = e(3505),
          i = "__core-js_shared__",
          a = n[i] || o(i, {});
        t.exports = a;
      },
      2309: (t, r, e) => {
        var n = e(1913),
          o = e(5465);
        (t.exports = function (t, r) {
          return o[t] || (o[t] = void 0 !== r ? r : {});
        })("versions", []).push({
          version: "3.21.0",
          mode: n ? "pure" : "global",
          copyright: "© 2014-2022 Denis Pushkarev (zloirock.ru)",
          license: "https://github.com/zloirock/core-js/blob/v3.21.0/LICENSE",
          source: "https://github.com/zloirock/core-js",
        });
      },
      6707: (t, r, e) => {
        var n = e(9670),
          o = e(9483),
          i = e(5112)("species");
        t.exports = function (t, r) {
          var e,
            a = n(t).constructor;
          return void 0 === a || null == (e = n(a)[i]) ? r : o(e);
        };
      },
      8710: (t, r, e) => {
        var n = e(1702),
          o = e(9303),
          i = e(1340),
          a = e(4488),
          u = n("".charAt),
          c = n("".charCodeAt),
          s = n("".slice),
          f = function (t) {
            return function (r, e) {
              var n,
                f,
                l = i(a(r)),
                p = o(e),
                v = l.length;
              return p < 0 || p >= v
                ? t
                  ? ""
                  : void 0
                : (n = c(l, p)) < 55296 ||
                  n > 56319 ||
                  p + 1 === v ||
                  (f = c(l, p + 1)) < 56320 ||
                  f > 57343
                ? t
                  ? u(l, p)
                  : n
                : t
                ? s(l, p, p + 2)
                : f - 56320 + ((n - 55296) << 10) + 65536;
            };
          };
        t.exports = { codeAt: f(!1), charAt: f(!0) };
      },
      3111: (t, r, e) => {
        var n = e(1702),
          o = e(4488),
          i = e(1340),
          a = e(1361),
          u = n("".replace),
          c = "[" + a + "]",
          s = RegExp("^" + c + c + "*"),
          f = RegExp(c + c + "*$"),
          l = function (t) {
            return function (r) {
              var e = i(o(r));
              return 1 & t && (e = u(e, s, "")), 2 & t && (e = u(e, f, "")), e;
            };
          };
        t.exports = { start: l(1), end: l(2), trim: l(3) };
      },
      1400: (t, r, e) => {
        var n = e(9303),
          o = Math.max,
          i = Math.min;
        t.exports = function (t, r) {
          var e = n(t);
          return e < 0 ? o(e + r, 0) : i(e, r);
        };
      },
      7067: (t, r, e) => {
        var n = e(7854),
          o = e(9303),
          i = e(7466),
          a = n.RangeError;
        t.exports = function (t) {
          if (void 0 === t) return 0;
          var r = o(t),
            e = i(r);
          if (r !== e) throw a("Wrong length or index");
          return e;
        };
      },
      5656: (t, r, e) => {
        var n = e(8361),
          o = e(4488);
        t.exports = function (t) {
          return n(o(t));
        };
      },
      9303: (t) => {
        var r = Math.ceil,
          e = Math.floor;
        t.exports = function (t) {
          var n = +t;
          return n != n || 0 === n ? 0 : (n > 0 ? e : r)(n);
        };
      },
      7466: (t, r, e) => {
        var n = e(9303),
          o = Math.min;
        t.exports = function (t) {
          return t > 0 ? o(n(t), 9007199254740991) : 0;
        };
      },
      7908: (t, r, e) => {
        var n = e(7854),
          o = e(4488),
          i = n.Object;
        t.exports = function (t) {
          return i(o(t));
        };
      },
      4590: (t, r, e) => {
        var n = e(7854),
          o = e(3002),
          i = n.RangeError;
        t.exports = function (t, r) {
          var e = o(t);
          if (e % r) throw i("Wrong offset");
          return e;
        };
      },
      3002: (t, r, e) => {
        var n = e(7854),
          o = e(9303),
          i = n.RangeError;
        t.exports = function (t) {
          var r = o(t);
          if (r < 0) throw i("The argument can't be less than 0");
          return r;
        };
      },
      7593: (t, r, e) => {
        var n = e(7854),
          o = e(6916),
          i = e(111),
          a = e(2190),
          u = e(8173),
          c = e(2140),
          s = e(5112),
          f = n.TypeError,
          l = s("toPrimitive");
        t.exports = function (t, r) {
          if (!i(t) || a(t)) return t;
          var e,
            n = u(t, l);
          if (n) {
            if (
              (void 0 === r && (r = "default"), (e = o(n, t, r)), !i(e) || a(e))
            )
              return e;
            throw f("Can't convert object to primitive value");
          }
          return void 0 === r && (r = "number"), c(t, r);
        };
      },
      4948: (t, r, e) => {
        var n = e(7593),
          o = e(2190);
        t.exports = function (t) {
          var r = n(t, "string");
          return o(r) ? r : r + "";
        };
      },
      1694: (t, r, e) => {
        var n = {};
        (n[e(5112)("toStringTag")] = "z"),
          (t.exports = "[object z]" === String(n));
      },
      1340: (t, r, e) => {
        var n = e(7854),
          o = e(648),
          i = n.String;
        t.exports = function (t) {
          if ("Symbol" === o(t))
            throw TypeError("Cannot convert a Symbol value to a string");
          return i(t);
        };
      },
      6330: (t, r, e) => {
        var n = e(7854).String;
        t.exports = function (t) {
          try {
            return n(t);
          } catch (t) {
            return "Object";
          }
        };
      },
      9843: (t, r, e) => {
        "use strict";
        var n = e(2109),
          o = e(7854),
          i = e(6916),
          a = e(9781),
          u = e(3832),
          c = e(260),
          s = e(3331),
          f = e(5787),
          l = e(9114),
          p = e(8880),
          v = e(5988),
          y = e(7466),
          d = e(7067),
          h = e(4590),
          g = e(4948),
          m = e(2597),
          b = e(648),
          x = e(111),
          w = e(2190),
          A = e(30),
          T = e(7976),
          S = e(7674),
          E = e(8006).f,
          O = e(7321),
          R = e(2092).forEach,
          L = e(6340),
          M = e(3070),
          P = e(1236),
          I = e(9909),
          _ = e(9587),
          j = I.get,
          F = I.set,
          C = M.f,
          B = P.f,
          U = Math.round,
          Y = o.RangeError,
          k = s.ArrayBuffer,
          D = k.prototype,
          N = s.DataView,
          V = c.NATIVE_ARRAY_BUFFER_VIEWS,
          q = c.TYPED_ARRAY_CONSTRUCTOR,
          G = c.TYPED_ARRAY_TAG,
          W = c.TypedArray,
          H = c.TypedArrayPrototype,
          X = c.aTypedArrayConstructor,
          z = c.isTypedArray,
          K = "BYTES_PER_ELEMENT",
          $ = "Wrong length",
          Z = function (t, r) {
            X(t);
            for (var e = 0, n = r.length, o = new t(n); n > e; ) o[e] = r[e++];
            return o;
          },
          J = function (t, r) {
            C(t, r, {
              get: function () {
                return j(this)[r];
              },
            });
          },
          Q = function (t) {
            var r;
            return (
              T(D, t) || "ArrayBuffer" == (r = b(t)) || "SharedArrayBuffer" == r
            );
          },
          tt = function (t, r) {
            return z(t) && !w(r) && r in t && v(+r) && r >= 0;
          },
          rt = function (t, r) {
            return (r = g(r)), tt(t, r) ? l(2, t[r]) : B(t, r);
          },
          et = function (t, r, e) {
            return (
              (r = g(r)),
              !(tt(t, r) && x(e) && m(e, "value")) ||
              m(e, "get") ||
              m(e, "set") ||
              e.configurable ||
              (m(e, "writable") && !e.writable) ||
              (m(e, "enumerable") && !e.enumerable)
                ? C(t, r, e)
                : ((t[r] = e.value), t)
            );
          };
        a
          ? (V ||
              ((P.f = rt),
              (M.f = et),
              J(H, "buffer"),
              J(H, "byteOffset"),
              J(H, "byteLength"),
              J(H, "length")),
            n(
              { target: "Object", stat: !0, forced: !V },
              { getOwnPropertyDescriptor: rt, defineProperty: et }
            ),
            (t.exports = function (t, r, e) {
              var a = t.match(/\d+$/)[0] / 8,
                c = t + (e ? "Clamped" : "") + "Array",
                s = "get" + t,
                l = "set" + t,
                v = o[c],
                g = v,
                m = g && g.prototype,
                b = {},
                w = function (t, r) {
                  C(t, r, {
                    get: function () {
                      return (function (t, r) {
                        var e = j(t);
                        return e.view[s](r * a + e.byteOffset, !0);
                      })(this, r);
                    },
                    set: function (t) {
                      return (function (t, r, n) {
                        var o = j(t);
                        e && (n = (n = U(n)) < 0 ? 0 : n > 255 ? 255 : 255 & n),
                          o.view[l](r * a + o.byteOffset, n, !0);
                      })(this, r, t);
                    },
                    enumerable: !0,
                  });
                };
              V
                ? u &&
                  ((g = r(function (t, r, e, n) {
                    return (
                      f(t, m),
                      _(
                        x(r)
                          ? Q(r)
                            ? void 0 !== n
                              ? new v(r, h(e, a), n)
                              : void 0 !== e
                              ? new v(r, h(e, a))
                              : new v(r)
                            : z(r)
                            ? Z(g, r)
                            : i(O, g, r)
                          : new v(d(r)),
                        t,
                        g
                      )
                    );
                  })),
                  S && S(g, W),
                  R(E(v), function (t) {
                    t in g || p(g, t, v[t]);
                  }),
                  (g.prototype = m))
                : ((g = r(function (t, r, e, n) {
                    f(t, m);
                    var o,
                      u,
                      c,
                      s = 0,
                      l = 0;
                    if (x(r)) {
                      if (!Q(r)) return z(r) ? Z(g, r) : i(O, g, r);
                      (o = r), (l = h(e, a));
                      var p = r.byteLength;
                      if (void 0 === n) {
                        if (p % a) throw Y($);
                        if ((u = p - l) < 0) throw Y($);
                      } else if ((u = y(n) * a) + l > p) throw Y($);
                      c = u / a;
                    } else (c = d(r)), (o = new k((u = c * a)));
                    for (
                      F(t, {
                        buffer: o,
                        byteOffset: l,
                        byteLength: u,
                        length: c,
                        view: new N(o),
                      });
                      s < c;

                    )
                      w(t, s++);
                  })),
                  S && S(g, W),
                  (m = g.prototype = A(H))),
                m.constructor !== g && p(m, "constructor", g),
                p(m, q, g),
                G && p(m, G, c),
                (b[c] = g),
                n({ global: !0, forced: g != v, sham: !V }, b),
                K in g || p(g, K, a),
                K in m || p(m, K, a),
                L(c);
            }))
          : (t.exports = function () {});
      },
      3832: (t, r, e) => {
        var n = e(7854),
          o = e(7293),
          i = e(7072),
          a = e(260).NATIVE_ARRAY_BUFFER_VIEWS,
          u = n.ArrayBuffer,
          c = n.Int8Array;
        t.exports =
          !a ||
          !o(function () {
            c(1);
          }) ||
          !o(function () {
            new c(-1);
          }) ||
          !i(function (t) {
            new c(), new c(null), new c(1.5), new c(t);
          }, !0) ||
          o(function () {
            return 1 !== new c(new u(2), 1, void 0).length;
          });
      },
      3074: (t, r, e) => {
        var n = e(7745),
          o = e(6304);
        t.exports = function (t, r) {
          return n(o(t), r);
        };
      },
      7321: (t, r, e) => {
        var n = e(9974),
          o = e(6916),
          i = e(9483),
          a = e(7908),
          u = e(6244),
          c = e(8554),
          s = e(1246),
          f = e(7659),
          l = e(260).aTypedArrayConstructor;
        t.exports = function (t) {
          var r,
            e,
            p,
            v,
            y,
            d,
            h = i(this),
            g = a(t),
            m = arguments.length,
            b = m > 1 ? arguments[1] : void 0,
            x = void 0 !== b,
            w = s(g);
          if (w && !f(w))
            for (d = (y = c(g, w)).next, g = []; !(v = o(d, y)).done; )
              g.push(v.value);
          for (
            x && m > 2 && (b = n(b, arguments[2])),
              e = u(g),
              p = new (l(h))(e),
              r = 0;
            e > r;
            r++
          )
            p[r] = x ? b(g[r], r) : g[r];
          return p;
        };
      },
      6304: (t, r, e) => {
        var n = e(260),
          o = e(6707),
          i = n.TYPED_ARRAY_CONSTRUCTOR,
          a = n.aTypedArrayConstructor;
        t.exports = function (t) {
          return a(o(t, t[i]));
        };
      },
      9711: (t, r, e) => {
        var n = e(1702),
          o = 0,
          i = Math.random(),
          a = n((1).toString);
        t.exports = function (t) {
          return "Symbol(" + (void 0 === t ? "" : t) + ")_" + a(++o + i, 36);
        };
      },
      3307: (t, r, e) => {
        var n = e(133);
        t.exports = n && !Symbol.sham && "symbol" == typeof Symbol.iterator;
      },
      3353: (t, r, e) => {
        var n = e(9781),
          o = e(7293);
        t.exports =
          n &&
          o(function () {
            return (
              42 !=
              Object.defineProperty(function () {}, "prototype", {
                value: 42,
                writable: !1,
              }).prototype
            );
          });
      },
      5112: (t, r, e) => {
        var n = e(7854),
          o = e(2309),
          i = e(2597),
          a = e(9711),
          u = e(133),
          c = e(3307),
          s = o("wks"),
          f = n.Symbol,
          l = f && f.for,
          p = c ? f : (f && f.withoutSetter) || a;
        t.exports = function (t) {
          if (!i(s, t) || (!u && "string" != typeof s[t])) {
            var r = "Symbol." + t;
            u && i(f, t) ? (s[t] = f[t]) : (s[t] = c && l ? l(r) : p(r));
          }
          return s[t];
        };
      },
      1361: (t) => {
        t.exports = "\t\n\v\f\r                　\u2028\u2029\ufeff";
      },
      9575: (t, r, e) => {
        "use strict";
        var n = e(2109),
          o = e(1702),
          i = e(7293),
          a = e(3331),
          u = e(9670),
          c = e(1400),
          s = e(7466),
          f = e(6707),
          l = a.ArrayBuffer,
          p = a.DataView,
          v = p.prototype,
          y = o(l.prototype.slice),
          d = o(v.getUint8),
          h = o(v.setUint8);
        n(
          {
            target: "ArrayBuffer",
            proto: !0,
            unsafe: !0,
            forced: i(function () {
              return !new l(2).slice(1, void 0).byteLength;
            }),
          },
          {
            slice: function (t, r) {
              if (y && void 0 === r) return y(u(this), t);
              for (
                var e = u(this).byteLength,
                  n = c(t, e),
                  o = c(void 0 === r ? e : r, e),
                  i = new (f(this, l))(s(o - n)),
                  a = new p(this),
                  v = new p(i),
                  g = 0;
                n < o;

              )
                h(v, g++, d(a, n++));
              return i;
            },
          }
        );
      },
      9554: (t, r, e) => {
        "use strict";
        var n = e(2109),
          o = e(8533);
        n(
          { target: "Array", proto: !0, forced: [].forEach != o },
          { forEach: o }
        );
      },
      1038: (t, r, e) => {
        var n = e(2109),
          o = e(8457);
        n(
          {
            target: "Array",
            stat: !0,
            forced: !e(7072)(function (t) {
              Array.from(t);
            }),
          },
          { from: o }
        );
      },
      6992: (t, r, e) => {
        "use strict";
        var n = e(5656),
          o = e(1223),
          i = e(7497),
          a = e(9909),
          u = e(3070).f,
          c = e(654),
          s = e(1913),
          f = e(9781),
          l = "Array Iterator",
          p = a.set,
          v = a.getterFor(l);
        t.exports = c(
          Array,
          "Array",
          function (t, r) {
            p(this, { type: l, target: n(t), index: 0, kind: r });
          },
          function () {
            var t = v(this),
              r = t.target,
              e = t.kind,
              n = t.index++;
            return !r || n >= r.length
              ? ((t.target = void 0), { value: void 0, done: !0 })
              : "keys" == e
              ? { value: n, done: !1 }
              : "values" == e
              ? { value: r[n], done: !1 }
              : { value: [n, r[n]], done: !1 };
          },
          "values"
        );
        var y = (i.Arguments = i.Array);
        if (
          (o("keys"), o("values"), o("entries"), !s && f && "values" !== y.name)
        )
          try {
            u(y, "name", { value: "values" });
          } catch (t) {}
      },
      1539: (t, r, e) => {
        var n = e(1694),
          o = e(1320),
          i = e(288);
        n || o(Object.prototype, "toString", i, { unsafe: !0 });
      },
      1058: (t, r, e) => {
        var n = e(2109),
          o = e(3009);
        n({ global: !0, forced: parseInt != o }, { parseInt: o });
      },
      8783: (t, r, e) => {
        "use strict";
        var n = e(8710).charAt,
          o = e(1340),
          i = e(9909),
          a = e(654),
          u = "String Iterator",
          c = i.set,
          s = i.getterFor(u);
        a(
          String,
          "String",
          function (t) {
            c(this, { type: u, string: o(t), index: 0 });
          },
          function () {
            var t,
              r = s(this),
              e = r.string,
              o = r.index;
            return o >= e.length
              ? { value: void 0, done: !0 }
              : ((t = n(e, o)), (r.index += t.length), { value: t, done: !1 });
          }
        );
      },
      2990: (t, r, e) => {
        "use strict";
        var n = e(1702),
          o = e(260),
          i = n(e(1048)),
          a = o.aTypedArray;
        (0, o.exportTypedArrayMethod)("copyWithin", function (t, r) {
          return i(a(this), t, r, arguments.length > 2 ? arguments[2] : void 0);
        });
      },
      8927: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(2092).every,
          i = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("every", function (t) {
          return o(i(this), t, arguments.length > 1 ? arguments[1] : void 0);
        });
      },
      3105: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(6916),
          i = e(1285),
          a = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("fill", function (t) {
          var r = arguments.length;
          return o(
            i,
            a(this),
            t,
            r > 1 ? arguments[1] : void 0,
            r > 2 ? arguments[2] : void 0
          );
        });
      },
      5035: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(2092).filter,
          i = e(3074),
          a = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("filter", function (t) {
          var r = o(a(this), t, arguments.length > 1 ? arguments[1] : void 0);
          return i(this, r);
        });
      },
      7174: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(2092).findIndex,
          i = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("findIndex", function (t) {
          return o(i(this), t, arguments.length > 1 ? arguments[1] : void 0);
        });
      },
      4345: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(2092).find,
          i = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("find", function (t) {
          return o(i(this), t, arguments.length > 1 ? arguments[1] : void 0);
        });
      },
      4197: (t, r, e) => {
        e(9843)("Float32", function (t) {
          return function (r, e, n) {
            return t(this, r, e, n);
          };
        });
      },
      2846: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(2092).forEach,
          i = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("forEach", function (t) {
          o(i(this), t, arguments.length > 1 ? arguments[1] : void 0);
        });
      },
      4731: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(1318).includes,
          i = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("includes", function (t) {
          return o(i(this), t, arguments.length > 1 ? arguments[1] : void 0);
        });
      },
      7209: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(1318).indexOf,
          i = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("indexOf", function (t) {
          return o(i(this), t, arguments.length > 1 ? arguments[1] : void 0);
        });
      },
      6319: (t, r, e) => {
        "use strict";
        var n = e(7854),
          o = e(7293),
          i = e(1702),
          a = e(260),
          u = e(6992),
          c = e(5112)("iterator"),
          s = n.Uint8Array,
          f = i(u.values),
          l = i(u.keys),
          p = i(u.entries),
          v = a.aTypedArray,
          y = a.exportTypedArrayMethod,
          d = s && s.prototype,
          h = !o(function () {
            d[c].call([1]);
          }),
          g =
            !!d && d.values && d[c] === d.values && "values" === d.values.name,
          m = function () {
            return f(v(this));
          };
        y(
          "entries",
          function () {
            return p(v(this));
          },
          h
        ),
          y(
            "keys",
            function () {
              return l(v(this));
            },
            h
          ),
          y("values", m, h || !g, { name: "values" }),
          y(c, m, h || !g, { name: "values" });
      },
      8867: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(1702),
          i = n.aTypedArray,
          a = n.exportTypedArrayMethod,
          u = o([].join);
        a("join", function (t) {
          return u(i(this), t);
        });
      },
      7789: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(2104),
          i = e(6583),
          a = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("lastIndexOf", function (t) {
          var r = arguments.length;
          return o(i, a(this), r > 1 ? [t, arguments[1]] : [t]);
        });
      },
      3739: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(2092).map,
          i = e(6304),
          a = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("map", function (t) {
          return o(
            a(this),
            t,
            arguments.length > 1 ? arguments[1] : void 0,
            function (t, r) {
              return new (i(t))(r);
            }
          );
        });
      },
      4483: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(3671).right,
          i = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("reduceRight", function (t) {
          var r = arguments.length;
          return o(i(this), t, r, r > 1 ? arguments[1] : void 0);
        });
      },
      9368: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(3671).left,
          i = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("reduce", function (t) {
          var r = arguments.length;
          return o(i(this), t, r, r > 1 ? arguments[1] : void 0);
        });
      },
      2056: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = n.aTypedArray,
          i = n.exportTypedArrayMethod,
          a = Math.floor;
        i("reverse", function () {
          for (var t, r = this, e = o(r).length, n = a(e / 2), i = 0; i < n; )
            (t = r[i]), (r[i++] = r[--e]), (r[e] = t);
          return r;
        });
      },
      3462: (t, r, e) => {
        "use strict";
        var n = e(7854),
          o = e(6916),
          i = e(260),
          a = e(6244),
          u = e(4590),
          c = e(7908),
          s = e(7293),
          f = n.RangeError,
          l = n.Int8Array,
          p = l && l.prototype,
          v = p && p.set,
          y = i.aTypedArray,
          d = i.exportTypedArrayMethod,
          h = !s(function () {
            var t = new Uint8ClampedArray(2);
            return o(v, t, { length: 1, 0: 3 }, 1), 3 !== t[1];
          }),
          g =
            h &&
            i.NATIVE_ARRAY_BUFFER_VIEWS &&
            s(function () {
              var t = new l(2);
              return t.set(1), t.set("2", 1), 0 !== t[0] || 2 !== t[1];
            });
        d(
          "set",
          function (t) {
            y(this);
            var r = u(arguments.length > 1 ? arguments[1] : void 0, 1),
              e = c(t);
            if (h) return o(v, this, e, r);
            var n = this.length,
              i = a(e),
              s = 0;
            if (i + r > n) throw f("Wrong length");
            for (; s < i; ) this[r + s] = e[s++];
          },
          !h || g
        );
      },
      678: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(6304),
          i = e(7293),
          a = e(206),
          u = n.aTypedArray;
        (0, n.exportTypedArrayMethod)(
          "slice",
          function (t, r) {
            for (
              var e = a(u(this), t, r),
                n = o(this),
                i = 0,
                c = e.length,
                s = new n(c);
              c > i;

            )
              s[i] = e[i++];
            return s;
          },
          i(function () {
            new Int8Array(1).slice();
          })
        );
      },
      7462: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(2092).some,
          i = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("some", function (t) {
          return o(i(this), t, arguments.length > 1 ? arguments[1] : void 0);
        });
      },
      3824: (t, r, e) => {
        "use strict";
        var n = e(7854),
          o = e(1702),
          i = e(7293),
          a = e(9662),
          u = e(4362),
          c = e(260),
          s = e(8886),
          f = e(256),
          l = e(7392),
          p = e(8008),
          v = n.Array,
          y = c.aTypedArray,
          d = c.exportTypedArrayMethod,
          h = n.Uint16Array,
          g = h && o(h.prototype.sort),
          m = !(
            !g ||
            (i(function () {
              g(new h(2), null);
            }) &&
              i(function () {
                g(new h(2), {});
              }))
          ),
          b =
            !!g &&
            !i(function () {
              if (l) return l < 74;
              if (s) return s < 67;
              if (f) return !0;
              if (p) return p < 602;
              var t,
                r,
                e = new h(516),
                n = v(516);
              for (t = 0; t < 516; t++)
                (r = t % 4), (e[t] = 515 - t), (n[t] = t - 2 * r + 3);
              for (
                g(e, function (t, r) {
                  return ((t / 4) | 0) - ((r / 4) | 0);
                }),
                  t = 0;
                t < 516;
                t++
              )
                if (e[t] !== n[t]) return !0;
            });
        d(
          "sort",
          function (t) {
            return (
              void 0 !== t && a(t),
              b
                ? g(this, t)
                : u(
                    y(this),
                    (function (t) {
                      return function (r, e) {
                        return void 0 !== t
                          ? +t(r, e) || 0
                          : e != e
                          ? -1
                          : r != r
                          ? 1
                          : 0 === r && 0 === e
                          ? 1 / r > 0 && 1 / e < 0
                            ? 1
                            : -1
                          : r > e;
                      };
                    })(t)
                  )
            );
          },
          !b || m
        );
      },
      5021: (t, r, e) => {
        "use strict";
        var n = e(260),
          o = e(7466),
          i = e(1400),
          a = e(6304),
          u = n.aTypedArray;
        (0, n.exportTypedArrayMethod)("subarray", function (t, r) {
          var e = u(this),
            n = e.length,
            c = i(t, n);
          return new (a(e))(
            e.buffer,
            e.byteOffset + c * e.BYTES_PER_ELEMENT,
            o((void 0 === r ? n : i(r, n)) - c)
          );
        });
      },
      2974: (t, r, e) => {
        "use strict";
        var n = e(7854),
          o = e(2104),
          i = e(260),
          a = e(7293),
          u = e(206),
          c = n.Int8Array,
          s = i.aTypedArray,
          f = i.exportTypedArrayMethod,
          l = [].toLocaleString,
          p =
            !!c &&
            a(function () {
              l.call(new c(1));
            });
        f(
          "toLocaleString",
          function () {
            return o(l, p ? u(s(this)) : s(this), u(arguments));
          },
          a(function () {
            return [1, 2].toLocaleString() != new c([1, 2]).toLocaleString();
          }) ||
            !a(function () {
              c.prototype.toLocaleString.call([1, 2]);
            })
        );
      },
      5016: (t, r, e) => {
        "use strict";
        var n = e(260).exportTypedArrayMethod,
          o = e(7293),
          i = e(7854),
          a = e(1702),
          u = i.Uint8Array,
          c = (u && u.prototype) || {},
          s = [].toString,
          f = a([].join);
        o(function () {
          s.call({});
        }) &&
          (s = function () {
            return f(this);
          });
        var l = c.toString != s;
        n("toString", s, l);
      },
      4747: (t, r, e) => {
        var n = e(7854),
          o = e(8324),
          i = e(8509),
          a = e(8533),
          u = e(8880),
          c = function (t) {
            if (t && t.forEach !== a)
              try {
                u(t, "forEach", a);
              } catch (r) {
                t.forEach = a;
              }
          };
        for (var s in o) o[s] && c(n[s] && n[s].prototype);
        c(i);
      },
      523: (t) => {
        !(function () {
          "use strict";
          t.exports = {
            polyfill: function () {
              var t = window,
                r = document;
              if (
                !("scrollBehavior" in r.documentElement.style) ||
                !0 === t.__forceSmoothScrollPolyfill__
              ) {
                var e,
                  n = t.HTMLElement || t.Element,
                  o = {
                    scroll: t.scroll || t.scrollTo,
                    scrollBy: t.scrollBy,
                    elementScroll: n.prototype.scroll || u,
                    scrollIntoView: n.prototype.scrollIntoView,
                  },
                  i =
                    t.performance && t.performance.now
                      ? t.performance.now.bind(t.performance)
                      : Date.now,
                  a =
                    ((e = t.navigator.userAgent),
                    new RegExp(["MSIE ", "Trident/", "Edge/"].join("|")).test(e)
                      ? 1
                      : 0);
                (t.scroll = t.scrollTo =
                  function () {
                    void 0 !== arguments[0] &&
                      (!0 !== c(arguments[0])
                        ? y.call(
                            t,
                            r.body,
                            void 0 !== arguments[0].left
                              ? ~~arguments[0].left
                              : t.scrollX || t.pageXOffset,
                            void 0 !== arguments[0].top
                              ? ~~arguments[0].top
                              : t.scrollY || t.pageYOffset
                          )
                        : o.scroll.call(
                            t,
                            void 0 !== arguments[0].left
                              ? arguments[0].left
                              : "object" != typeof arguments[0]
                              ? arguments[0]
                              : t.scrollX || t.pageXOffset,
                            void 0 !== arguments[0].top
                              ? arguments[0].top
                              : void 0 !== arguments[1]
                              ? arguments[1]
                              : t.scrollY || t.pageYOffset
                          ));
                  }),
                  (t.scrollBy = function () {
                    void 0 !== arguments[0] &&
                      (c(arguments[0])
                        ? o.scrollBy.call(
                            t,
                            void 0 !== arguments[0].left
                              ? arguments[0].left
                              : "object" != typeof arguments[0]
                              ? arguments[0]
                              : 0,
                            void 0 !== arguments[0].top
                              ? arguments[0].top
                              : void 0 !== arguments[1]
                              ? arguments[1]
                              : 0
                          )
                        : y.call(
                            t,
                            r.body,
                            ~~arguments[0].left + (t.scrollX || t.pageXOffset),
                            ~~arguments[0].top + (t.scrollY || t.pageYOffset)
                          ));
                  }),
                  (n.prototype.scroll = n.prototype.scrollTo =
                    function () {
                      if (void 0 !== arguments[0])
                        if (!0 !== c(arguments[0])) {
                          var t = arguments[0].left,
                            r = arguments[0].top;
                          y.call(
                            this,
                            this,
                            void 0 === t ? this.scrollLeft : ~~t,
                            void 0 === r ? this.scrollTop : ~~r
                          );
                        } else {
                          if (
                            "number" == typeof arguments[0] &&
                            void 0 === arguments[1]
                          )
                            throw new SyntaxError(
                              "Value could not be converted"
                            );
                          o.elementScroll.call(
                            this,
                            void 0 !== arguments[0].left
                              ? ~~arguments[0].left
                              : "object" != typeof arguments[0]
                              ? ~~arguments[0]
                              : this.scrollLeft,
                            void 0 !== arguments[0].top
                              ? ~~arguments[0].top
                              : void 0 !== arguments[1]
                              ? ~~arguments[1]
                              : this.scrollTop
                          );
                        }
                    }),
                  (n.prototype.scrollBy = function () {
                    void 0 !== arguments[0] &&
                      (!0 !== c(arguments[0])
                        ? this.scroll({
                            left: ~~arguments[0].left + this.scrollLeft,
                            top: ~~arguments[0].top + this.scrollTop,
                            behavior: arguments[0].behavior,
                          })
                        : o.elementScroll.call(
                            this,
                            void 0 !== arguments[0].left
                              ? ~~arguments[0].left + this.scrollLeft
                              : ~~arguments[0] + this.scrollLeft,
                            void 0 !== arguments[0].top
                              ? ~~arguments[0].top + this.scrollTop
                              : ~~arguments[1] + this.scrollTop
                          ));
                  }),
                  (n.prototype.scrollIntoView = function () {
                    if (!0 !== c(arguments[0])) {
                      var e = p(this),
                        n = e.getBoundingClientRect(),
                        i = this.getBoundingClientRect();
                      e !== r.body
                        ? (y.call(
                            this,
                            e,
                            e.scrollLeft + i.left - n.left,
                            e.scrollTop + i.top - n.top
                          ),
                          "fixed" !== t.getComputedStyle(e).position &&
                            t.scrollBy({
                              left: n.left,
                              top: n.top,
                              behavior: "smooth",
                            }))
                        : t.scrollBy({
                            left: i.left,
                            top: i.top,
                            behavior: "smooth",
                          });
                    } else
                      o.scrollIntoView.call(
                        this,
                        void 0 === arguments[0] || arguments[0]
                      );
                  });
              }
              function u(t, r) {
                (this.scrollLeft = t), (this.scrollTop = r);
              }
              function c(t) {
                if (
                  null === t ||
                  "object" != typeof t ||
                  void 0 === t.behavior ||
                  "auto" === t.behavior ||
                  "instant" === t.behavior
                )
                  return !0;
                if ("object" == typeof t && "smooth" === t.behavior) return !1;
                throw new TypeError(
                  "behavior member of ScrollOptions " +
                    t.behavior +
                    " is not a valid value for enumeration ScrollBehavior."
                );
              }
              function s(t, r) {
                return "Y" === r
                  ? t.clientHeight + a < t.scrollHeight
                  : "X" === r
                  ? t.clientWidth + a < t.scrollWidth
                  : void 0;
              }
              function f(r, e) {
                var n = t.getComputedStyle(r, null)["overflow" + e];
                return "auto" === n || "scroll" === n;
              }
              function l(t) {
                var r = s(t, "Y") && f(t, "Y"),
                  e = s(t, "X") && f(t, "X");
                return r || e;
              }
              function p(t) {
                for (; t !== r.body && !1 === l(t); )
                  t = t.parentNode || t.host;
                return t;
              }
              function v(r) {
                var e,
                  n,
                  o,
                  a,
                  u = (i() - r.startTime) / 468;
                (a = u = u > 1 ? 1 : u),
                  (e = 0.5 * (1 - Math.cos(Math.PI * a))),
                  (n = r.startX + (r.x - r.startX) * e),
                  (o = r.startY + (r.y - r.startY) * e),
                  r.method.call(r.scrollable, n, o),
                  (n === r.x && o === r.y) ||
                    t.requestAnimationFrame(v.bind(t, r));
              }
              function y(e, n, a) {
                var c,
                  s,
                  f,
                  l,
                  p = i();
                e === r.body
                  ? ((c = t),
                    (s = t.scrollX || t.pageXOffset),
                    (f = t.scrollY || t.pageYOffset),
                    (l = o.scroll))
                  : ((c = e), (s = e.scrollLeft), (f = e.scrollTop), (l = u)),
                  v({
                    scrollable: c,
                    method: l,
                    startTime: p,
                    startX: s,
                    startY: f,
                    x: n,
                    y: a,
                  });
              }
            },
          };
        })();
      },
    },
    r = {};
  function e(n) {
    var o = r[n];
    if (void 0 !== o) return o.exports;
    var i = (r[n] = { exports: {} });
    return t[n](i, i.exports, e), i.exports;
  }
  (e.n = (t) => {
    var r = t && t.__esModule ? () => t.default : () => t;
    return e.d(r, { a: r }), r;
  }),
    (e.d = (t, r) => {
      for (var n in r)
        e.o(r, n) &&
          !e.o(t, n) &&
          Object.defineProperty(t, n, { enumerable: !0, get: r[n] });
    }),
    (e.g = (function () {
      if ("object" == typeof globalThis) return globalThis;
      try {
        return this || new Function("return this")();
      } catch (t) {
        if ("object" == typeof window) return window;
      }
    })()),
    (e.o = (t, r) => Object.prototype.hasOwnProperty.call(t, r)),
    (() => {
      "use strict";
      e(1058), e(1038), e(8783), e(9554), e(1539), e(4747);
      var t = e(523),
        r = e.n(t),
        n = e(9936);
      function o(t, r) {
        if ("none" !== window.getComputedStyle(t).display) {
          var e = t.getBoundingClientRect(),
            n = 0.1 * e.width,
            o = 0.02 * e.height,
            i = e.width - n,
            a = e.height - o;
          i * (9 / 16) > a
            ? ((r.style.height = a), (r.style.width = a * (16 / 9)))
            : ((r.style.height = i * (9 / 16)), (r.style.width = i));
        }
      }
      r().polyfill(),
        window.addEventListener(
          "load",
          function () {
            var t,
              r,
              e,
              i,
              a,
              u,
              c,
              s,
              f,
              l,
              p = document.querySelector(".scrollaway"),
              v = document.querySelector(".media"),
              y = document.querySelector(".message-container"),
              d = document.querySelector(".fullScreenOverlay"),
              h = document.querySelector(".project-video--fullScreen"),
              g = document.querySelector(".footer"),
              m = document.querySelector(".media-backgroundMask"),
              b = document.querySelector(".media-header");
            function x() {
              window.requestAnimationFrame(function () {
                var n = window.innerWidth;
                (t = (p && p.getBoundingClientRect().height + 10) || 0),
                  (r = (v && v.getBoundingClientRect().height) || 0);
                var m = (y && y.getBoundingClientRect().height) || 0;
                document.documentElement.style.setProperty(
                  "--message-container-height",
                  "".concat(m, "px")
                ),
                  o(d, h),
                  (e = g.getBoundingClientRect().height || 0),
                  document.documentElement.style.setProperty(
                    "--footer-height",
                    "".concat(e, "px")
                  ),
                  (a = t),
                  (u = t + 2 * (i = r - 0.212 * n)),
                  (c = t + 0.1 * i),
                  (s = t + 0.3 * i),
                  (f = t + 0.7 * i),
                  (l = t + 0.9 * i);
              });
            }
            window.addEventListener("resize", x),
              x(),
              document.addEventListener("scroll", function () {
                var t = Math.max(
                  document.body.scrollTop,
                  document.documentElement.scrollTop
                );
                t <= a
                  ? ((m.style.transform = "scale(1)"), (w = 1))
                  : (w =
                      t > a && t <= u ? 1 + ((t - a) / (u - a)) * 0.15 : 1.15),
                  (A =
                    t < c
                      ? 0
                      : t >= c && t < s
                      ? (t - c) / (s - c)
                      : t >= s && t < f
                      ? 1
                      : t >= f && t < l
                      ? 1 - (t - f) / (l - f)
                      : 0);
              });
            var w = 1,
              A = 0;
            function T(t, r) {
              var e =
                arguments.length > 2 && void 0 !== arguments[2]
                  ? arguments[2]
                  : 0.9;
              return (t - r) * e + r;
            }
            var S = 1,
              E = 0;
            window.requestAnimationFrame(function t() {
              S !== w &&
                ((S = T(w, S)), (m.style.transform = "scale(".concat(S, ")"))),
                E !== A && ((E = T(A, E)), (b.style.opacity = E)),
                window.requestAnimationFrame(t);
            });
            var O,
              R,
              L = document.querySelectorAll("canvas")[0],
              M = document.querySelectorAll("canvas")[1],
              P = "#A3ACB9";
            function I() {
              var r = window.scrollY,
                n =
                  Math.max(
                    document.body.scrollHeight,
                    document.body.offsetHeight,
                    document.documentElement.clientHeight,
                    document.documentElement.scrollHeight,
                    document.documentElement.offsetHeight
                  ) - window.innerHeight;
              r <= t
                ? O && O.isPaused() && O.play()
                : O && O.isPlaying() && O.pause(),
                r >= n - e
                  ? R && R.isPaused() && (R.play(), (g.style.opacity = 1))
                  : R && R.isPlaying() && (R.pause(), (g.style.opacity = 0));
            }
            function _(t) {
              return [
                parseInt(t.substr(1, 2), 16) / 255,
                parseInt(t.substr(3, 2), 16) / 255,
                parseInt(t.substr(5, 2), 16) / 255,
              ];
            }
            "true" === L.dataset.enabled && (O = (0, n.H)(L, _(P))),
              "true" === M.dataset.enabled && (R = (0, n.H)(M, _(P))),
              document.addEventListener("scroll", function () {
                window.requestAnimationFrame(I);
              });
          },
          !1
        ),
        window.addEventListener(
          "load",
          function () {
            var t = document.querySelector("#climeworks-play-button"),
              r = document.querySelector("#charm-play-button"),
              e = document.querySelector(".fullScreenOverlay"),
              n = document.querySelector(".project-video--fullScreen"),
              i = document.querySelector(".project-video--source"),
              a = document.querySelector(".video--closeButton");
            o(e, n);
            var u = document.querySelector(".media-video"),
              c = document.querySelectorAll(".project-video"),
              s = Array.from(c);
            function f(t) {
              "Escape" === t.key && p();
            }
            function l(t) {
              (e.style.display = "flex"),
                i.setAttribute("src", t),
                n.load(),
                o(e, n),
                n.play(),
                (document.body.style.overflow = "hidden"),
                s.forEach(function (t) {
                  t.pause();
                }),
                window.addEventListener("keydown", f, !1);
            }
            function p() {
              n.pause(),
                (n.currentTime = 0),
                (e.style.display = "none"),
                (document.body.style.overflow = "visible"),
                s.forEach(function (t) {
                  t.play();
                }),
                window.removeEventListener("keydown", f, !1);
            }
            s.push(u),
              t.addEventListener(
                "click",
                function () {
                  l(
                    "https://d37ugbyn3rpeym.cloudfront.net/videos/climate/Climeworks_final_062121.mp4"
                  );
                },
                !1
              ),
              r.addEventListener(
                "click",
                function () {
                  l(
                    "https://d37ugbyn3rpeym.cloudfront.net/videos/climate/Charm_final_062121.mp4"
                  );
                },
                !1
              ),
              e.addEventListener("click", p, !1),
              n.addEventListener(
                "click",
                function (t) {
                  t.stopPropagation();
                },
                !1
              ),
              a.addEventListener("click", p, !1);
          },
          !1
        );
    })();
})();
